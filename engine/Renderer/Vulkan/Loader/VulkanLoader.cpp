#include "VulkanLoader.hpp"

namespace wfe {
	// Internal variables
	static atomic_size_t loaderCount = 0;
	static DynamicLib vulkanLib;

	// Static function pointers
#if defined(VK_VERSION_1_0)
	static PFN_vkCreateInstance staticPfn_vkCreateInstance;
	static PFN_vkDestroyInstance staticPfn_vkDestroyInstance;
	static PFN_vkEnumeratePhysicalDevices staticPfn_vkEnumeratePhysicalDevices;
	static PFN_vkGetDeviceProcAddr staticPfn_vkGetDeviceProcAddr;
	static PFN_vkGetInstanceProcAddr staticPfn_vkGetInstanceProcAddr;
	static PFN_vkGetPhysicalDeviceProperties staticPfn_vkGetPhysicalDeviceProperties;
	static PFN_vkGetPhysicalDeviceQueueFamilyProperties staticPfn_vkGetPhysicalDeviceQueueFamilyProperties;
	static PFN_vkGetPhysicalDeviceMemoryProperties staticPfn_vkGetPhysicalDeviceMemoryProperties;
	static PFN_vkGetPhysicalDeviceFeatures staticPfn_vkGetPhysicalDeviceFeatures;
	static PFN_vkGetPhysicalDeviceFormatProperties staticPfn_vkGetPhysicalDeviceFormatProperties;
	static PFN_vkGetPhysicalDeviceImageFormatProperties staticPfn_vkGetPhysicalDeviceImageFormatProperties;
	static PFN_vkCreateDevice staticPfn_vkCreateDevice;
	static PFN_vkDestroyDevice staticPfn_vkDestroyDevice;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkEnumerateInstanceVersion staticPfn_vkEnumerateInstanceVersion;
#endif
#if defined(VK_VERSION_1_0)
	static PFN_vkEnumerateInstanceLayerProperties staticPfn_vkEnumerateInstanceLayerProperties;
	static PFN_vkEnumerateInstanceExtensionProperties staticPfn_vkEnumerateInstanceExtensionProperties;
	static PFN_vkEnumerateDeviceLayerProperties staticPfn_vkEnumerateDeviceLayerProperties;
	static PFN_vkEnumerateDeviceExtensionProperties staticPfn_vkEnumerateDeviceExtensionProperties;
	static PFN_vkGetDeviceQueue staticPfn_vkGetDeviceQueue;
	static PFN_vkQueueSubmit staticPfn_vkQueueSubmit;
	static PFN_vkQueueWaitIdle staticPfn_vkQueueWaitIdle;
	static PFN_vkDeviceWaitIdle staticPfn_vkDeviceWaitIdle;
	static PFN_vkAllocateMemory staticPfn_vkAllocateMemory;
	static PFN_vkFreeMemory staticPfn_vkFreeMemory;
	static PFN_vkMapMemory staticPfn_vkMapMemory;
	static PFN_vkUnmapMemory staticPfn_vkUnmapMemory;
	static PFN_vkFlushMappedMemoryRanges staticPfn_vkFlushMappedMemoryRanges;
	static PFN_vkInvalidateMappedMemoryRanges staticPfn_vkInvalidateMappedMemoryRanges;
	static PFN_vkGetDeviceMemoryCommitment staticPfn_vkGetDeviceMemoryCommitment;
	static PFN_vkGetBufferMemoryRequirements staticPfn_vkGetBufferMemoryRequirements;
	static PFN_vkBindBufferMemory staticPfn_vkBindBufferMemory;
	static PFN_vkGetImageMemoryRequirements staticPfn_vkGetImageMemoryRequirements;
	static PFN_vkBindImageMemory staticPfn_vkBindImageMemory;
	static PFN_vkGetImageSparseMemoryRequirements staticPfn_vkGetImageSparseMemoryRequirements;
	static PFN_vkGetPhysicalDeviceSparseImageFormatProperties staticPfn_vkGetPhysicalDeviceSparseImageFormatProperties;
	static PFN_vkQueueBindSparse staticPfn_vkQueueBindSparse;
	static PFN_vkCreateFence staticPfn_vkCreateFence;
	static PFN_vkDestroyFence staticPfn_vkDestroyFence;
	static PFN_vkResetFences staticPfn_vkResetFences;
	static PFN_vkGetFenceStatus staticPfn_vkGetFenceStatus;
	static PFN_vkWaitForFences staticPfn_vkWaitForFences;
	static PFN_vkCreateSemaphore staticPfn_vkCreateSemaphore;
	static PFN_vkDestroySemaphore staticPfn_vkDestroySemaphore;
	static PFN_vkCreateEvent staticPfn_vkCreateEvent;
	static PFN_vkDestroyEvent staticPfn_vkDestroyEvent;
	static PFN_vkGetEventStatus staticPfn_vkGetEventStatus;
	static PFN_vkSetEvent staticPfn_vkSetEvent;
	static PFN_vkResetEvent staticPfn_vkResetEvent;
	static PFN_vkCreateQueryPool staticPfn_vkCreateQueryPool;
	static PFN_vkDestroyQueryPool staticPfn_vkDestroyQueryPool;
	static PFN_vkGetQueryPoolResults staticPfn_vkGetQueryPoolResults;
#endif
#if defined(VK_VERSION_1_2)
	static PFN_vkResetQueryPool staticPfn_vkResetQueryPool;
#endif
#if defined(VK_EXT_host_query_reset) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkResetQueryPoolEXT staticPfn_vkResetQueryPoolEXT;
#endif
#if defined(VK_VERSION_1_0)
	static PFN_vkCreateBuffer staticPfn_vkCreateBuffer;
	static PFN_vkDestroyBuffer staticPfn_vkDestroyBuffer;
	static PFN_vkCreateBufferView staticPfn_vkCreateBufferView;
	static PFN_vkDestroyBufferView staticPfn_vkDestroyBufferView;
	static PFN_vkCreateImage staticPfn_vkCreateImage;
	static PFN_vkDestroyImage staticPfn_vkDestroyImage;
	static PFN_vkGetImageSubresourceLayout staticPfn_vkGetImageSubresourceLayout;
	static PFN_vkCreateImageView staticPfn_vkCreateImageView;
	static PFN_vkDestroyImageView staticPfn_vkDestroyImageView;
	static PFN_vkCreateShaderModule staticPfn_vkCreateShaderModule;
	static PFN_vkDestroyShaderModule staticPfn_vkDestroyShaderModule;
	static PFN_vkCreatePipelineCache staticPfn_vkCreatePipelineCache;
	static PFN_vkDestroyPipelineCache staticPfn_vkDestroyPipelineCache;
	static PFN_vkGetPipelineCacheData staticPfn_vkGetPipelineCacheData;
	static PFN_vkMergePipelineCaches staticPfn_vkMergePipelineCaches;
	static PFN_vkCreateGraphicsPipelines staticPfn_vkCreateGraphicsPipelines;
	static PFN_vkCreateComputePipelines staticPfn_vkCreateComputePipelines;
#endif
#if defined(VK_HUAWEI_subpass_shading) && (defined(VK_KHR_create_renderpass2) && defined(VK_KHR_synchronization2))
	static PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI staticPfn_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
#endif
#if defined(VK_VERSION_1_0)
	static PFN_vkDestroyPipeline staticPfn_vkDestroyPipeline;
	static PFN_vkCreatePipelineLayout staticPfn_vkCreatePipelineLayout;
	static PFN_vkDestroyPipelineLayout staticPfn_vkDestroyPipelineLayout;
	static PFN_vkCreateSampler staticPfn_vkCreateSampler;
	static PFN_vkDestroySampler staticPfn_vkDestroySampler;
	static PFN_vkCreateDescriptorSetLayout staticPfn_vkCreateDescriptorSetLayout;
	static PFN_vkDestroyDescriptorSetLayout staticPfn_vkDestroyDescriptorSetLayout;
	static PFN_vkCreateDescriptorPool staticPfn_vkCreateDescriptorPool;
	static PFN_vkDestroyDescriptorPool staticPfn_vkDestroyDescriptorPool;
	static PFN_vkResetDescriptorPool staticPfn_vkResetDescriptorPool;
	static PFN_vkAllocateDescriptorSets staticPfn_vkAllocateDescriptorSets;
	static PFN_vkFreeDescriptorSets staticPfn_vkFreeDescriptorSets;
	static PFN_vkUpdateDescriptorSets staticPfn_vkUpdateDescriptorSets;
	static PFN_vkCreateFramebuffer staticPfn_vkCreateFramebuffer;
	static PFN_vkDestroyFramebuffer staticPfn_vkDestroyFramebuffer;
	static PFN_vkCreateRenderPass staticPfn_vkCreateRenderPass;
	static PFN_vkDestroyRenderPass staticPfn_vkDestroyRenderPass;
	static PFN_vkGetRenderAreaGranularity staticPfn_vkGetRenderAreaGranularity;
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
	static PFN_vkGetRenderingAreaGranularityKHR staticPfn_vkGetRenderingAreaGranularityKHR;
#endif
#if defined(VK_VERSION_1_0)
	static PFN_vkCreateCommandPool staticPfn_vkCreateCommandPool;
	static PFN_vkDestroyCommandPool staticPfn_vkDestroyCommandPool;
	static PFN_vkResetCommandPool staticPfn_vkResetCommandPool;
	static PFN_vkAllocateCommandBuffers staticPfn_vkAllocateCommandBuffers;
	static PFN_vkFreeCommandBuffers staticPfn_vkFreeCommandBuffers;
	static PFN_vkBeginCommandBuffer staticPfn_vkBeginCommandBuffer;
	static PFN_vkEndCommandBuffer staticPfn_vkEndCommandBuffer;
	static PFN_vkResetCommandBuffer staticPfn_vkResetCommandBuffer;
	static PFN_vkCmdBindPipeline staticPfn_vkCmdBindPipeline;
#endif
#if defined(VK_EXT_attachment_feedback_loop_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_EXT_attachment_feedback_loop_layout))
	static PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT staticPfn_vkCmdSetAttachmentFeedbackLoopEnableEXT;
#endif
#if defined(VK_VERSION_1_0)
	static PFN_vkCmdSetViewport staticPfn_vkCmdSetViewport;
	static PFN_vkCmdSetScissor staticPfn_vkCmdSetScissor;
	static PFN_vkCmdSetLineWidth staticPfn_vkCmdSetLineWidth;
	static PFN_vkCmdSetDepthBias staticPfn_vkCmdSetDepthBias;
	static PFN_vkCmdSetBlendConstants staticPfn_vkCmdSetBlendConstants;
	static PFN_vkCmdSetDepthBounds staticPfn_vkCmdSetDepthBounds;
	static PFN_vkCmdSetStencilCompareMask staticPfn_vkCmdSetStencilCompareMask;
	static PFN_vkCmdSetStencilWriteMask staticPfn_vkCmdSetStencilWriteMask;
	static PFN_vkCmdSetStencilReference staticPfn_vkCmdSetStencilReference;
	static PFN_vkCmdBindDescriptorSets staticPfn_vkCmdBindDescriptorSets;
	static PFN_vkCmdBindIndexBuffer staticPfn_vkCmdBindIndexBuffer;
	static PFN_vkCmdBindVertexBuffers staticPfn_vkCmdBindVertexBuffers;
	static PFN_vkCmdDraw staticPfn_vkCmdDraw;
	static PFN_vkCmdDrawIndexed staticPfn_vkCmdDrawIndexed;
#endif
#if defined(VK_EXT_multi_draw) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkCmdDrawMultiEXT staticPfn_vkCmdDrawMultiEXT;
	static PFN_vkCmdDrawMultiIndexedEXT staticPfn_vkCmdDrawMultiIndexedEXT;
#endif
#if defined(VK_VERSION_1_0)
	static PFN_vkCmdDrawIndirect staticPfn_vkCmdDrawIndirect;
	static PFN_vkCmdDrawIndexedIndirect staticPfn_vkCmdDrawIndexedIndirect;
	static PFN_vkCmdDispatch staticPfn_vkCmdDispatch;
	static PFN_vkCmdDispatchIndirect staticPfn_vkCmdDispatchIndirect;
#endif
#if defined(VK_HUAWEI_subpass_shading) && (defined(VK_KHR_create_renderpass2) && defined(VK_KHR_synchronization2))
	static PFN_vkCmdSubpassShadingHUAWEI staticPfn_vkCmdSubpassShadingHUAWEI;
#endif
#if defined(VK_HUAWEI_cluster_culling_shader) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkCmdDrawClusterHUAWEI staticPfn_vkCmdDrawClusterHUAWEI;
	static PFN_vkCmdDrawClusterIndirectHUAWEI staticPfn_vkCmdDrawClusterIndirectHUAWEI;
#endif
#if defined(VK_NV_device_generated_commands_compute) && (defined(VK_NV_device_generated_commands))
	static PFN_vkCmdUpdatePipelineIndirectBufferNV staticPfn_vkCmdUpdatePipelineIndirectBufferNV;
#endif
#if defined(VK_VERSION_1_0)
	static PFN_vkCmdCopyBuffer staticPfn_vkCmdCopyBuffer;
	static PFN_vkCmdCopyImage staticPfn_vkCmdCopyImage;
	static PFN_vkCmdBlitImage staticPfn_vkCmdBlitImage;
	static PFN_vkCmdCopyBufferToImage staticPfn_vkCmdCopyBufferToImage;
	static PFN_vkCmdCopyImageToBuffer staticPfn_vkCmdCopyImageToBuffer;
#endif
#if defined(VK_NV_copy_memory_indirect) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address))
	static PFN_vkCmdCopyMemoryIndirectNV staticPfn_vkCmdCopyMemoryIndirectNV;
	static PFN_vkCmdCopyMemoryToImageIndirectNV staticPfn_vkCmdCopyMemoryToImageIndirectNV;
#endif
#if defined(VK_VERSION_1_0)
	static PFN_vkCmdUpdateBuffer staticPfn_vkCmdUpdateBuffer;
	static PFN_vkCmdFillBuffer staticPfn_vkCmdFillBuffer;
	static PFN_vkCmdClearColorImage staticPfn_vkCmdClearColorImage;
	static PFN_vkCmdClearDepthStencilImage staticPfn_vkCmdClearDepthStencilImage;
	static PFN_vkCmdClearAttachments staticPfn_vkCmdClearAttachments;
	static PFN_vkCmdResolveImage staticPfn_vkCmdResolveImage;
	static PFN_vkCmdSetEvent staticPfn_vkCmdSetEvent;
	static PFN_vkCmdResetEvent staticPfn_vkCmdResetEvent;
	static PFN_vkCmdWaitEvents staticPfn_vkCmdWaitEvents;
	static PFN_vkCmdPipelineBarrier staticPfn_vkCmdPipelineBarrier;
	static PFN_vkCmdBeginQuery staticPfn_vkCmdBeginQuery;
	static PFN_vkCmdEndQuery staticPfn_vkCmdEndQuery;
#endif
#if defined(VK_EXT_conditional_rendering) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkCmdBeginConditionalRenderingEXT staticPfn_vkCmdBeginConditionalRenderingEXT;
	static PFN_vkCmdEndConditionalRenderingEXT staticPfn_vkCmdEndConditionalRenderingEXT;
#endif
#if defined(VK_VERSION_1_0)
	static PFN_vkCmdResetQueryPool staticPfn_vkCmdResetQueryPool;
	static PFN_vkCmdWriteTimestamp staticPfn_vkCmdWriteTimestamp;
	static PFN_vkCmdCopyQueryPoolResults staticPfn_vkCmdCopyQueryPoolResults;
	static PFN_vkCmdPushConstants staticPfn_vkCmdPushConstants;
	static PFN_vkCmdBeginRenderPass staticPfn_vkCmdBeginRenderPass;
	static PFN_vkCmdNextSubpass staticPfn_vkCmdNextSubpass;
	static PFN_vkCmdEndRenderPass staticPfn_vkCmdEndRenderPass;
	static PFN_vkCmdExecuteCommands staticPfn_vkCmdExecuteCommands;
#endif
#if defined(VK_KHR_android_surface) && (defined(VK_KHR_surface))
	static PFN_vkCreateAndroidSurfaceKHR staticPfn_vkCreateAndroidSurfaceKHR;
#endif
#if defined(VK_KHR_display) && (defined(VK_KHR_surface))
	static PFN_vkGetPhysicalDeviceDisplayPropertiesKHR staticPfn_vkGetPhysicalDeviceDisplayPropertiesKHR;
	static PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR staticPfn_vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
	static PFN_vkGetDisplayPlaneSupportedDisplaysKHR staticPfn_vkGetDisplayPlaneSupportedDisplaysKHR;
	static PFN_vkGetDisplayModePropertiesKHR staticPfn_vkGetDisplayModePropertiesKHR;
	static PFN_vkCreateDisplayModeKHR staticPfn_vkCreateDisplayModeKHR;
	static PFN_vkGetDisplayPlaneCapabilitiesKHR staticPfn_vkGetDisplayPlaneCapabilitiesKHR;
	static PFN_vkCreateDisplayPlaneSurfaceKHR staticPfn_vkCreateDisplayPlaneSurfaceKHR;
#endif
#if defined(VK_KHR_display_swapchain) && (defined(VK_KHR_swapchain) && defined(VK_KHR_display))
	static PFN_vkCreateSharedSwapchainsKHR staticPfn_vkCreateSharedSwapchainsKHR;
#endif
#if defined(VK_KHR_surface)
	static PFN_vkDestroySurfaceKHR staticPfn_vkDestroySurfaceKHR;
	static PFN_vkGetPhysicalDeviceSurfaceSupportKHR staticPfn_vkGetPhysicalDeviceSurfaceSupportKHR;
	static PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR staticPfn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
	static PFN_vkGetPhysicalDeviceSurfaceFormatsKHR staticPfn_vkGetPhysicalDeviceSurfaceFormatsKHR;
	static PFN_vkGetPhysicalDeviceSurfacePresentModesKHR staticPfn_vkGetPhysicalDeviceSurfacePresentModesKHR;
#endif
#if defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))
	static PFN_vkCreateSwapchainKHR staticPfn_vkCreateSwapchainKHR;
	static PFN_vkDestroySwapchainKHR staticPfn_vkDestroySwapchainKHR;
	static PFN_vkGetSwapchainImagesKHR staticPfn_vkGetSwapchainImagesKHR;
	static PFN_vkAcquireNextImageKHR staticPfn_vkAcquireNextImageKHR;
	static PFN_vkQueuePresentKHR staticPfn_vkQueuePresentKHR;
#endif
#if defined(VK_NN_vi_surface) && (defined(VK_KHR_surface))
	static PFN_vkCreateViSurfaceNN staticPfn_vkCreateViSurfaceNN;
#endif
#if defined(VK_KHR_wayland_surface) && (defined(VK_KHR_surface))
	static PFN_vkCreateWaylandSurfaceKHR staticPfn_vkCreateWaylandSurfaceKHR;
	static PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR staticPfn_vkGetPhysicalDeviceWaylandPresentationSupportKHR;
#endif
#if defined(VK_KHR_win32_surface) && (defined(VK_KHR_surface))
	static PFN_vkCreateWin32SurfaceKHR staticPfn_vkCreateWin32SurfaceKHR;
	static PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR staticPfn_vkGetPhysicalDeviceWin32PresentationSupportKHR;
#endif
#if defined(VK_KHR_xlib_surface) && (defined(VK_KHR_surface))
	static PFN_vkCreateXlibSurfaceKHR staticPfn_vkCreateXlibSurfaceKHR;
	static PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR staticPfn_vkGetPhysicalDeviceXlibPresentationSupportKHR;
#endif
#if defined(VK_KHR_xcb_surface) && (defined(VK_KHR_surface))
	static PFN_vkCreateXcbSurfaceKHR staticPfn_vkCreateXcbSurfaceKHR;
	static PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR staticPfn_vkGetPhysicalDeviceXcbPresentationSupportKHR;
#endif
#if defined(VK_EXT_directfb_surface) && (defined(VK_KHR_surface))
	static PFN_vkCreateDirectFBSurfaceEXT staticPfn_vkCreateDirectFBSurfaceEXT;
	static PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT staticPfn_vkGetPhysicalDeviceDirectFBPresentationSupportEXT;
#endif
#if defined(VK_FUCHSIA_imagepipe_surface) && (defined(VK_KHR_surface))
	static PFN_vkCreateImagePipeSurfaceFUCHSIA staticPfn_vkCreateImagePipeSurfaceFUCHSIA;
#endif
#if defined(VK_GGP_stream_descriptor_surface) && (defined(VK_KHR_surface))
	static PFN_vkCreateStreamDescriptorSurfaceGGP staticPfn_vkCreateStreamDescriptorSurfaceGGP;
#endif
#if defined(VK_QNX_screen_surface) && (defined(VK_KHR_surface))
	static PFN_vkCreateScreenSurfaceQNX staticPfn_vkCreateScreenSurfaceQNX;
	static PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX staticPfn_vkGetPhysicalDeviceScreenPresentationSupportQNX;
#endif
#if defined(VK_EXT_debug_report)
	static PFN_vkCreateDebugReportCallbackEXT staticPfn_vkCreateDebugReportCallbackEXT;
	static PFN_vkDestroyDebugReportCallbackEXT staticPfn_vkDestroyDebugReportCallbackEXT;
	static PFN_vkDebugReportMessageEXT staticPfn_vkDebugReportMessageEXT;
#endif
#if defined(VK_EXT_debug_marker) && (defined(VK_EXT_debug_report))
	static PFN_vkDebugMarkerSetObjectNameEXT staticPfn_vkDebugMarkerSetObjectNameEXT;
	static PFN_vkDebugMarkerSetObjectTagEXT staticPfn_vkDebugMarkerSetObjectTagEXT;
	static PFN_vkCmdDebugMarkerBeginEXT staticPfn_vkCmdDebugMarkerBeginEXT;
	static PFN_vkCmdDebugMarkerEndEXT staticPfn_vkCmdDebugMarkerEndEXT;
	static PFN_vkCmdDebugMarkerInsertEXT staticPfn_vkCmdDebugMarkerInsertEXT;
#endif
#if defined(VK_NV_external_memory_capabilities)
	static PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV staticPfn_vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
#endif
#if defined(VK_NV_external_memory_win32) && (defined(VK_NV_external_memory))
	static PFN_vkGetMemoryWin32HandleNV staticPfn_vkGetMemoryWin32HandleNV;
#endif
#if defined(VK_NV_device_generated_commands) && (defined(VK_VERSION_1_1) && defined(VK_KHR_buffer_device_address))
	static PFN_vkCmdExecuteGeneratedCommandsNV staticPfn_vkCmdExecuteGeneratedCommandsNV;
	static PFN_vkCmdPreprocessGeneratedCommandsNV staticPfn_vkCmdPreprocessGeneratedCommandsNV;
	static PFN_vkCmdBindPipelineShaderGroupNV staticPfn_vkCmdBindPipelineShaderGroupNV;
	static PFN_vkGetGeneratedCommandsMemoryRequirementsNV staticPfn_vkGetGeneratedCommandsMemoryRequirementsNV;
	static PFN_vkCreateIndirectCommandsLayoutNV staticPfn_vkCreateIndirectCommandsLayoutNV;
	static PFN_vkDestroyIndirectCommandsLayoutNV staticPfn_vkDestroyIndirectCommandsLayoutNV;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkGetPhysicalDeviceFeatures2 staticPfn_vkGetPhysicalDeviceFeatures2;
#endif
#if defined(VK_KHR_get_physical_device_properties2)
	static PFN_vkGetPhysicalDeviceFeatures2KHR staticPfn_vkGetPhysicalDeviceFeatures2KHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkGetPhysicalDeviceProperties2 staticPfn_vkGetPhysicalDeviceProperties2;
#endif
#if defined(VK_KHR_get_physical_device_properties2)
	static PFN_vkGetPhysicalDeviceProperties2KHR staticPfn_vkGetPhysicalDeviceProperties2KHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkGetPhysicalDeviceFormatProperties2 staticPfn_vkGetPhysicalDeviceFormatProperties2;
#endif
#if defined(VK_KHR_get_physical_device_properties2)
	static PFN_vkGetPhysicalDeviceFormatProperties2KHR staticPfn_vkGetPhysicalDeviceFormatProperties2KHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkGetPhysicalDeviceImageFormatProperties2 staticPfn_vkGetPhysicalDeviceImageFormatProperties2;
#endif
#if defined(VK_KHR_get_physical_device_properties2)
	static PFN_vkGetPhysicalDeviceImageFormatProperties2KHR staticPfn_vkGetPhysicalDeviceImageFormatProperties2KHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkGetPhysicalDeviceQueueFamilyProperties2 staticPfn_vkGetPhysicalDeviceQueueFamilyProperties2;
#endif
#if defined(VK_KHR_get_physical_device_properties2)
	static PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR staticPfn_vkGetPhysicalDeviceQueueFamilyProperties2KHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkGetPhysicalDeviceMemoryProperties2 staticPfn_vkGetPhysicalDeviceMemoryProperties2;
#endif
#if defined(VK_KHR_get_physical_device_properties2)
	static PFN_vkGetPhysicalDeviceMemoryProperties2KHR staticPfn_vkGetPhysicalDeviceMemoryProperties2KHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 staticPfn_vkGetPhysicalDeviceSparseImageFormatProperties2;
#endif
#if defined(VK_KHR_get_physical_device_properties2)
	static PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR staticPfn_vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
#endif
#if defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkCmdPushDescriptorSetKHR staticPfn_vkCmdPushDescriptorSetKHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkTrimCommandPool staticPfn_vkTrimCommandPool;
#endif
#if defined(VK_KHR_maintenance1)
	static PFN_vkTrimCommandPoolKHR staticPfn_vkTrimCommandPoolKHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkGetPhysicalDeviceExternalBufferProperties staticPfn_vkGetPhysicalDeviceExternalBufferProperties;
#endif
#if defined(VK_KHR_external_memory_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR staticPfn_vkGetPhysicalDeviceExternalBufferPropertiesKHR;
#endif
#if defined(VK_KHR_external_memory_win32) && (defined(VK_KHR_external_memory))
	static PFN_vkGetMemoryWin32HandleKHR staticPfn_vkGetMemoryWin32HandleKHR;
	static PFN_vkGetMemoryWin32HandlePropertiesKHR staticPfn_vkGetMemoryWin32HandlePropertiesKHR;
#endif
#if defined(VK_KHR_external_memory_fd) && (defined(VK_KHR_external_memory) || defined(VK_VERSION_1_1))
	static PFN_vkGetMemoryFdKHR staticPfn_vkGetMemoryFdKHR;
	static PFN_vkGetMemoryFdPropertiesKHR staticPfn_vkGetMemoryFdPropertiesKHR;
#endif
#if defined(VK_FUCHSIA_external_memory) && (defined(VK_KHR_external_memory_capabilities) && defined(VK_KHR_external_memory))
	static PFN_vkGetMemoryZirconHandleFUCHSIA staticPfn_vkGetMemoryZirconHandleFUCHSIA;
	static PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA staticPfn_vkGetMemoryZirconHandlePropertiesFUCHSIA;
#endif
#if defined(VK_NV_external_memory_rdma) && (defined(VK_KHR_external_memory))
	static PFN_vkGetMemoryRemoteAddressNV staticPfn_vkGetMemoryRemoteAddressNV;
#endif
#if defined(VK_NV_external_memory_sci_buf) && (defined(VK_VERSION_1_1))
	static PFN_vkGetMemorySciBufNV staticPfn_vkGetMemorySciBufNV;
	static PFN_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV staticPfn_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV;
	static PFN_vkGetPhysicalDeviceSciBufAttributesNV staticPfn_vkGetPhysicalDeviceSciBufAttributesNV;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkGetPhysicalDeviceExternalSemaphoreProperties staticPfn_vkGetPhysicalDeviceExternalSemaphoreProperties;
#endif
#if defined(VK_KHR_external_semaphore_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR staticPfn_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
#endif
#if defined(VK_KHR_external_semaphore_win32) && (defined(VK_KHR_external_semaphore))
	static PFN_vkGetSemaphoreWin32HandleKHR staticPfn_vkGetSemaphoreWin32HandleKHR;
	static PFN_vkImportSemaphoreWin32HandleKHR staticPfn_vkImportSemaphoreWin32HandleKHR;
#endif
#if defined(VK_KHR_external_semaphore_fd) && (defined(VK_KHR_external_semaphore) || defined(VK_VERSION_1_1))
	static PFN_vkGetSemaphoreFdKHR staticPfn_vkGetSemaphoreFdKHR;
	static PFN_vkImportSemaphoreFdKHR staticPfn_vkImportSemaphoreFdKHR;
#endif
#if defined(VK_FUCHSIA_external_semaphore) && (defined(VK_KHR_external_semaphore_capabilities) && defined(VK_KHR_external_semaphore))
	static PFN_vkGetSemaphoreZirconHandleFUCHSIA staticPfn_vkGetSemaphoreZirconHandleFUCHSIA;
	static PFN_vkImportSemaphoreZirconHandleFUCHSIA staticPfn_vkImportSemaphoreZirconHandleFUCHSIA;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkGetPhysicalDeviceExternalFenceProperties staticPfn_vkGetPhysicalDeviceExternalFenceProperties;
#endif
#if defined(VK_KHR_external_fence_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR staticPfn_vkGetPhysicalDeviceExternalFencePropertiesKHR;
#endif
#if defined(VK_KHR_external_fence_win32) && (defined(VK_KHR_external_fence))
	static PFN_vkGetFenceWin32HandleKHR staticPfn_vkGetFenceWin32HandleKHR;
	static PFN_vkImportFenceWin32HandleKHR staticPfn_vkImportFenceWin32HandleKHR;
#endif
#if defined(VK_KHR_external_fence_fd) && (defined(VK_KHR_external_fence) || defined(VK_VERSION_1_1))
	static PFN_vkGetFenceFdKHR staticPfn_vkGetFenceFdKHR;
	static PFN_vkImportFenceFdKHR staticPfn_vkImportFenceFdKHR;
#endif
#if (defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))) || (defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1)))
	static PFN_vkGetFenceSciSyncFenceNV staticPfn_vkGetFenceSciSyncFenceNV;
	static PFN_vkGetFenceSciSyncObjNV staticPfn_vkGetFenceSciSyncObjNV;
	static PFN_vkImportFenceSciSyncFenceNV staticPfn_vkImportFenceSciSyncFenceNV;
	static PFN_vkImportFenceSciSyncObjNV staticPfn_vkImportFenceSciSyncObjNV;
#endif
#if defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))
	static PFN_vkGetSemaphoreSciSyncObjNV staticPfn_vkGetSemaphoreSciSyncObjNV;
	static PFN_vkImportSemaphoreSciSyncObjNV staticPfn_vkImportSemaphoreSciSyncObjNV;
#endif
#if (defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))) || (defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1)))
	static PFN_vkGetPhysicalDeviceSciSyncAttributesNV staticPfn_vkGetPhysicalDeviceSciSyncAttributesNV;
#endif
#if defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1))
	static PFN_vkCreateSemaphoreSciSyncPoolNV staticPfn_vkCreateSemaphoreSciSyncPoolNV;
	static PFN_vkDestroySemaphoreSciSyncPoolNV staticPfn_vkDestroySemaphoreSciSyncPoolNV;
#endif
#if defined(VK_EXT_direct_mode_display) && (defined(VK_KHR_display))
	static PFN_vkReleaseDisplayEXT staticPfn_vkReleaseDisplayEXT;
#endif
#if defined(VK_EXT_acquire_xlib_display) && (defined(VK_EXT_direct_mode_display))
	static PFN_vkAcquireXlibDisplayEXT staticPfn_vkAcquireXlibDisplayEXT;
	static PFN_vkGetRandROutputDisplayEXT staticPfn_vkGetRandROutputDisplayEXT;
#endif
#if defined(VK_NV_acquire_winrt_display) && (defined(VK_EXT_direct_mode_display))
	static PFN_vkAcquireWinrtDisplayNV staticPfn_vkAcquireWinrtDisplayNV;
	static PFN_vkGetWinrtDisplayNV staticPfn_vkGetWinrtDisplayNV;
#endif
#if defined(VK_EXT_display_control) && (defined(VK_EXT_display_surface_counter) && defined(VK_KHR_swapchain))
	static PFN_vkDisplayPowerControlEXT staticPfn_vkDisplayPowerControlEXT;
	static PFN_vkRegisterDeviceEventEXT staticPfn_vkRegisterDeviceEventEXT;
	static PFN_vkRegisterDisplayEventEXT staticPfn_vkRegisterDisplayEventEXT;
	static PFN_vkGetSwapchainCounterEXT staticPfn_vkGetSwapchainCounterEXT;
#endif
#if defined(VK_EXT_display_surface_counter) && (defined(VK_KHR_display))
	static PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT staticPfn_vkGetPhysicalDeviceSurfaceCapabilities2EXT;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkEnumeratePhysicalDeviceGroups staticPfn_vkEnumeratePhysicalDeviceGroups;
#endif
#if defined(VK_KHR_device_group_creation)
	static PFN_vkEnumeratePhysicalDeviceGroupsKHR staticPfn_vkEnumeratePhysicalDeviceGroupsKHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkGetDeviceGroupPeerMemoryFeatures staticPfn_vkGetDeviceGroupPeerMemoryFeatures;
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
	static PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR staticPfn_vkGetDeviceGroupPeerMemoryFeaturesKHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkBindBufferMemory2 staticPfn_vkBindBufferMemory2;
#endif
#if defined(VK_KHR_bind_memory2)
	static PFN_vkBindBufferMemory2KHR staticPfn_vkBindBufferMemory2KHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkBindImageMemory2 staticPfn_vkBindImageMemory2;
#endif
#if defined(VK_KHR_bind_memory2)
	static PFN_vkBindImageMemory2KHR staticPfn_vkBindImageMemory2KHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkCmdSetDeviceMask staticPfn_vkCmdSetDeviceMask;
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
	static PFN_vkCmdSetDeviceMaskKHR staticPfn_vkCmdSetDeviceMaskKHR;
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_surface)))
	static PFN_vkGetDeviceGroupPresentCapabilitiesKHR staticPfn_vkGetDeviceGroupPresentCapabilitiesKHR;
	static PFN_vkGetDeviceGroupSurfacePresentModesKHR staticPfn_vkGetDeviceGroupSurfacePresentModesKHR;
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_swapchain)))
	static PFN_vkAcquireNextImage2KHR staticPfn_vkAcquireNextImage2KHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkCmdDispatchBase staticPfn_vkCmdDispatchBase;
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
	static PFN_vkCmdDispatchBaseKHR staticPfn_vkCmdDispatchBaseKHR;
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_surface)))
	static PFN_vkGetPhysicalDevicePresentRectanglesKHR staticPfn_vkGetPhysicalDevicePresentRectanglesKHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkCreateDescriptorUpdateTemplate staticPfn_vkCreateDescriptorUpdateTemplate;
#endif
#if defined(VK_KHR_descriptor_update_template)
	static PFN_vkCreateDescriptorUpdateTemplateKHR staticPfn_vkCreateDescriptorUpdateTemplateKHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkDestroyDescriptorUpdateTemplate staticPfn_vkDestroyDescriptorUpdateTemplate;
#endif
#if defined(VK_KHR_descriptor_update_template)
	static PFN_vkDestroyDescriptorUpdateTemplateKHR staticPfn_vkDestroyDescriptorUpdateTemplateKHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkUpdateDescriptorSetWithTemplate staticPfn_vkUpdateDescriptorSetWithTemplate;
#endif
#if defined(VK_KHR_descriptor_update_template)
	static PFN_vkUpdateDescriptorSetWithTemplateKHR staticPfn_vkUpdateDescriptorSetWithTemplateKHR;
#endif
#if (((defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_KHR_descriptor_update_template)))) || ((defined(VK_KHR_descriptor_update_template)) && (defined(VK_KHR_push_descriptor)))
	static PFN_vkCmdPushDescriptorSetWithTemplateKHR staticPfn_vkCmdPushDescriptorSetWithTemplateKHR;
#endif
#if defined(VK_EXT_hdr_metadata) && (defined(VK_KHR_swapchain))
	static PFN_vkSetHdrMetadataEXT staticPfn_vkSetHdrMetadataEXT;
#endif
#if defined(VK_KHR_shared_presentable_image) && (defined(VK_KHR_swapchain) && defined(VK_KHR_get_surface_capabilities2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)))
	static PFN_vkGetSwapchainStatusKHR staticPfn_vkGetSwapchainStatusKHR;
#endif
#if defined(VK_GOOGLE_display_timing) && (defined(VK_KHR_swapchain))
	static PFN_vkGetRefreshCycleDurationGOOGLE staticPfn_vkGetRefreshCycleDurationGOOGLE;
	static PFN_vkGetPastPresentationTimingGOOGLE staticPfn_vkGetPastPresentationTimingGOOGLE;
#endif
#if defined(VK_MVK_ios_surface) && (defined(VK_KHR_surface))
	static PFN_vkCreateIOSSurfaceMVK staticPfn_vkCreateIOSSurfaceMVK;
#endif
#if defined(VK_MVK_macos_surface) && (defined(VK_KHR_surface))
	static PFN_vkCreateMacOSSurfaceMVK staticPfn_vkCreateMacOSSurfaceMVK;
#endif
#if defined(VK_EXT_metal_surface) && (defined(VK_KHR_surface))
	static PFN_vkCreateMetalSurfaceEXT staticPfn_vkCreateMetalSurfaceEXT;
#endif
#if defined(VK_NV_clip_space_w_scaling)
	static PFN_vkCmdSetViewportWScalingNV staticPfn_vkCmdSetViewportWScalingNV;
#endif
#if defined(VK_EXT_discard_rectangles) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkCmdSetDiscardRectangleEXT staticPfn_vkCmdSetDiscardRectangleEXT;
	static PFN_vkCmdSetDiscardRectangleEnableEXT staticPfn_vkCmdSetDiscardRectangleEnableEXT;
	static PFN_vkCmdSetDiscardRectangleModeEXT staticPfn_vkCmdSetDiscardRectangleModeEXT;
#endif
#if defined(VK_EXT_sample_locations) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkCmdSetSampleLocationsEXT staticPfn_vkCmdSetSampleLocationsEXT;
	static PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT staticPfn_vkGetPhysicalDeviceMultisamplePropertiesEXT;
#endif
#if defined(VK_KHR_get_surface_capabilities2) && (defined(VK_KHR_surface))
	static PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR staticPfn_vkGetPhysicalDeviceSurfaceCapabilities2KHR;
	static PFN_vkGetPhysicalDeviceSurfaceFormats2KHR staticPfn_vkGetPhysicalDeviceSurfaceFormats2KHR;
#endif
#if defined(VK_KHR_get_display_properties2) && (defined(VK_KHR_display))
	static PFN_vkGetPhysicalDeviceDisplayProperties2KHR staticPfn_vkGetPhysicalDeviceDisplayProperties2KHR;
	static PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR staticPfn_vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
	static PFN_vkGetDisplayModeProperties2KHR staticPfn_vkGetDisplayModeProperties2KHR;
	static PFN_vkGetDisplayPlaneCapabilities2KHR staticPfn_vkGetDisplayPlaneCapabilities2KHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkGetBufferMemoryRequirements2 staticPfn_vkGetBufferMemoryRequirements2;
#endif
#if defined(VK_KHR_get_memory_requirements2)
	static PFN_vkGetBufferMemoryRequirements2KHR staticPfn_vkGetBufferMemoryRequirements2KHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkGetImageMemoryRequirements2 staticPfn_vkGetImageMemoryRequirements2;
#endif
#if defined(VK_KHR_get_memory_requirements2)
	static PFN_vkGetImageMemoryRequirements2KHR staticPfn_vkGetImageMemoryRequirements2KHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkGetImageSparseMemoryRequirements2 staticPfn_vkGetImageSparseMemoryRequirements2;
#endif
#if defined(VK_KHR_get_memory_requirements2)
	static PFN_vkGetImageSparseMemoryRequirements2KHR staticPfn_vkGetImageSparseMemoryRequirements2KHR;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkGetDeviceBufferMemoryRequirements staticPfn_vkGetDeviceBufferMemoryRequirements;
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
	static PFN_vkGetDeviceBufferMemoryRequirementsKHR staticPfn_vkGetDeviceBufferMemoryRequirementsKHR;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkGetDeviceImageMemoryRequirements staticPfn_vkGetDeviceImageMemoryRequirements;
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
	static PFN_vkGetDeviceImageMemoryRequirementsKHR staticPfn_vkGetDeviceImageMemoryRequirementsKHR;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkGetDeviceImageSparseMemoryRequirements staticPfn_vkGetDeviceImageSparseMemoryRequirements;
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
	static PFN_vkGetDeviceImageSparseMemoryRequirementsKHR staticPfn_vkGetDeviceImageSparseMemoryRequirementsKHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkCreateSamplerYcbcrConversion staticPfn_vkCreateSamplerYcbcrConversion;
#endif
#if defined(VK_KHR_sampler_ycbcr_conversion) && (defined(VK_KHR_maintenance1) && defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_memory_requirements2) && defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkCreateSamplerYcbcrConversionKHR staticPfn_vkCreateSamplerYcbcrConversionKHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkDestroySamplerYcbcrConversion staticPfn_vkDestroySamplerYcbcrConversion;
#endif
#if defined(VK_KHR_sampler_ycbcr_conversion) && (defined(VK_KHR_maintenance1) && defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_memory_requirements2) && defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkDestroySamplerYcbcrConversionKHR staticPfn_vkDestroySamplerYcbcrConversionKHR;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkGetDeviceQueue2 staticPfn_vkGetDeviceQueue2;
#endif
#if defined(VK_EXT_validation_cache)
	static PFN_vkCreateValidationCacheEXT staticPfn_vkCreateValidationCacheEXT;
	static PFN_vkDestroyValidationCacheEXT staticPfn_vkDestroyValidationCacheEXT;
	static PFN_vkGetValidationCacheDataEXT staticPfn_vkGetValidationCacheDataEXT;
	static PFN_vkMergeValidationCachesEXT staticPfn_vkMergeValidationCachesEXT;
#endif
#if defined(VK_VERSION_1_1)
	static PFN_vkGetDescriptorSetLayoutSupport staticPfn_vkGetDescriptorSetLayoutSupport;
#endif
#if defined(VK_KHR_maintenance3) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkGetDescriptorSetLayoutSupportKHR staticPfn_vkGetDescriptorSetLayoutSupportKHR;
#endif
#if defined(VK_ANDROID_native_buffer)
	static PFN_vkGetSwapchainGrallocUsageANDROID staticPfn_vkGetSwapchainGrallocUsageANDROID;
	static PFN_vkGetSwapchainGrallocUsage2ANDROID staticPfn_vkGetSwapchainGrallocUsage2ANDROID;
	static PFN_vkAcquireImageANDROID staticPfn_vkAcquireImageANDROID;
	static PFN_vkQueueSignalReleaseImageANDROID staticPfn_vkQueueSignalReleaseImageANDROID;
#endif
#if defined(VK_AMD_shader_info)
	static PFN_vkGetShaderInfoAMD staticPfn_vkGetShaderInfoAMD;
#endif
#if defined(VK_AMD_display_native_hdr) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
	static PFN_vkSetLocalDimmingAMD staticPfn_vkSetLocalDimmingAMD;
#endif
#if defined(VK_KHR_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR staticPfn_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR;
#endif
#if defined(VK_EXT_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT staticPfn_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
#endif
#if defined(VK_KHR_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkGetCalibratedTimestampsKHR staticPfn_vkGetCalibratedTimestampsKHR;
#endif
#if defined(VK_EXT_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkGetCalibratedTimestampsEXT staticPfn_vkGetCalibratedTimestampsEXT;
#endif
#if defined(VK_EXT_debug_utils)
	static PFN_vkSetDebugUtilsObjectNameEXT staticPfn_vkSetDebugUtilsObjectNameEXT;
	static PFN_vkSetDebugUtilsObjectTagEXT staticPfn_vkSetDebugUtilsObjectTagEXT;
	static PFN_vkQueueBeginDebugUtilsLabelEXT staticPfn_vkQueueBeginDebugUtilsLabelEXT;
	static PFN_vkQueueEndDebugUtilsLabelEXT staticPfn_vkQueueEndDebugUtilsLabelEXT;
	static PFN_vkQueueInsertDebugUtilsLabelEXT staticPfn_vkQueueInsertDebugUtilsLabelEXT;
	static PFN_vkCmdBeginDebugUtilsLabelEXT staticPfn_vkCmdBeginDebugUtilsLabelEXT;
	static PFN_vkCmdEndDebugUtilsLabelEXT staticPfn_vkCmdEndDebugUtilsLabelEXT;
	static PFN_vkCmdInsertDebugUtilsLabelEXT staticPfn_vkCmdInsertDebugUtilsLabelEXT;
	static PFN_vkCreateDebugUtilsMessengerEXT staticPfn_vkCreateDebugUtilsMessengerEXT;
	static PFN_vkDestroyDebugUtilsMessengerEXT staticPfn_vkDestroyDebugUtilsMessengerEXT;
	static PFN_vkSubmitDebugUtilsMessageEXT staticPfn_vkSubmitDebugUtilsMessageEXT;
#endif
#if defined(VK_EXT_external_memory_host) && (defined(VK_KHR_external_memory) || defined(VK_VERSION_1_1))
	static PFN_vkGetMemoryHostPointerPropertiesEXT staticPfn_vkGetMemoryHostPointerPropertiesEXT;
#endif
#if defined(VK_AMD_buffer_marker)
	static PFN_vkCmdWriteBufferMarkerAMD staticPfn_vkCmdWriteBufferMarkerAMD;
#endif
#if defined(VK_VERSION_1_2)
	static PFN_vkCreateRenderPass2 staticPfn_vkCreateRenderPass2;
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
	static PFN_vkCreateRenderPass2KHR staticPfn_vkCreateRenderPass2KHR;
#endif
#if defined(VK_VERSION_1_2)
	static PFN_vkCmdBeginRenderPass2 staticPfn_vkCmdBeginRenderPass2;
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
	static PFN_vkCmdBeginRenderPass2KHR staticPfn_vkCmdBeginRenderPass2KHR;
#endif
#if defined(VK_VERSION_1_2)
	static PFN_vkCmdNextSubpass2 staticPfn_vkCmdNextSubpass2;
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
	static PFN_vkCmdNextSubpass2KHR staticPfn_vkCmdNextSubpass2KHR;
#endif
#if defined(VK_VERSION_1_2)
	static PFN_vkCmdEndRenderPass2 staticPfn_vkCmdEndRenderPass2;
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
	static PFN_vkCmdEndRenderPass2KHR staticPfn_vkCmdEndRenderPass2KHR;
#endif
#if defined(VK_VERSION_1_2)
	static PFN_vkGetSemaphoreCounterValue staticPfn_vkGetSemaphoreCounterValue;
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkGetSemaphoreCounterValueKHR staticPfn_vkGetSemaphoreCounterValueKHR;
#endif
#if defined(VK_VERSION_1_2)
	static PFN_vkWaitSemaphores staticPfn_vkWaitSemaphores;
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkWaitSemaphoresKHR staticPfn_vkWaitSemaphoresKHR;
#endif
#if defined(VK_VERSION_1_2)
	static PFN_vkSignalSemaphore staticPfn_vkSignalSemaphore;
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkSignalSemaphoreKHR staticPfn_vkSignalSemaphoreKHR;
#endif
#if defined(VK_ANDROID_external_memory_android_hardware_buffer) && (defined(VK_KHR_sampler_ycbcr_conversion) && defined(VK_KHR_external_memory) && defined(VK_EXT_queue_family_foreign) && defined(VK_KHR_dedicated_allocation))
	static PFN_vkGetAndroidHardwareBufferPropertiesANDROID staticPfn_vkGetAndroidHardwareBufferPropertiesANDROID;
	static PFN_vkGetMemoryAndroidHardwareBufferANDROID staticPfn_vkGetMemoryAndroidHardwareBufferANDROID;
#endif
#if defined(VK_VERSION_1_2)
	static PFN_vkCmdDrawIndirectCount staticPfn_vkCmdDrawIndirectCount;
#endif
#if defined(VK_KHR_draw_indirect_count)
	static PFN_vkCmdDrawIndirectCountKHR staticPfn_vkCmdDrawIndirectCountKHR;
#endif
#if defined(VK_AMD_draw_indirect_count)
	static PFN_vkCmdDrawIndirectCountAMD staticPfn_vkCmdDrawIndirectCountAMD;
#endif
#if defined(VK_VERSION_1_2)
	static PFN_vkCmdDrawIndexedIndirectCount staticPfn_vkCmdDrawIndexedIndirectCount;
#endif
#if defined(VK_KHR_draw_indirect_count)
	static PFN_vkCmdDrawIndexedIndirectCountKHR staticPfn_vkCmdDrawIndexedIndirectCountKHR;
#endif
#if defined(VK_AMD_draw_indirect_count)
	static PFN_vkCmdDrawIndexedIndirectCountAMD staticPfn_vkCmdDrawIndexedIndirectCountAMD;
#endif
#if defined(VK_NV_device_diagnostic_checkpoints) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkCmdSetCheckpointNV staticPfn_vkCmdSetCheckpointNV;
	static PFN_vkGetQueueCheckpointDataNV staticPfn_vkGetQueueCheckpointDataNV;
#endif
#if defined(VK_EXT_transform_feedback) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkCmdBindTransformFeedbackBuffersEXT staticPfn_vkCmdBindTransformFeedbackBuffersEXT;
	static PFN_vkCmdBeginTransformFeedbackEXT staticPfn_vkCmdBeginTransformFeedbackEXT;
	static PFN_vkCmdEndTransformFeedbackEXT staticPfn_vkCmdEndTransformFeedbackEXT;
	static PFN_vkCmdBeginQueryIndexedEXT staticPfn_vkCmdBeginQueryIndexedEXT;
	static PFN_vkCmdEndQueryIndexedEXT staticPfn_vkCmdEndQueryIndexedEXT;
	static PFN_vkCmdDrawIndirectByteCountEXT staticPfn_vkCmdDrawIndirectByteCountEXT;
#endif
#if defined(VK_NV_scissor_exclusive) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkCmdSetExclusiveScissorNV staticPfn_vkCmdSetExclusiveScissorNV;
	static PFN_vkCmdSetExclusiveScissorEnableNV staticPfn_vkCmdSetExclusiveScissorEnableNV;
#endif
#if defined(VK_NV_shading_rate_image) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkCmdBindShadingRateImageNV staticPfn_vkCmdBindShadingRateImageNV;
	static PFN_vkCmdSetViewportShadingRatePaletteNV staticPfn_vkCmdSetViewportShadingRatePaletteNV;
	static PFN_vkCmdSetCoarseSampleOrderNV staticPfn_vkCmdSetCoarseSampleOrderNV;
#endif
#if defined(VK_NV_mesh_shader) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkCmdDrawMeshTasksNV staticPfn_vkCmdDrawMeshTasksNV;
	static PFN_vkCmdDrawMeshTasksIndirectNV staticPfn_vkCmdDrawMeshTasksIndirectNV;
	static PFN_vkCmdDrawMeshTasksIndirectCountNV staticPfn_vkCmdDrawMeshTasksIndirectCountNV;
#endif
#if defined(VK_EXT_mesh_shader) && (defined(VK_KHR_spirv_1_4))
	static PFN_vkCmdDrawMeshTasksEXT staticPfn_vkCmdDrawMeshTasksEXT;
	static PFN_vkCmdDrawMeshTasksIndirectEXT staticPfn_vkCmdDrawMeshTasksIndirectEXT;
	static PFN_vkCmdDrawMeshTasksIndirectCountEXT staticPfn_vkCmdDrawMeshTasksIndirectCountEXT;
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
	static PFN_vkCompileDeferredNV staticPfn_vkCompileDeferredNV;
	static PFN_vkCreateAccelerationStructureNV staticPfn_vkCreateAccelerationStructureNV;
#endif
#if defined(VK_HUAWEI_invocation_mask) && (defined(VK_KHR_ray_tracing_pipeline) && defined(VK_KHR_synchronization2))
	static PFN_vkCmdBindInvocationMaskHUAWEI staticPfn_vkCmdBindInvocationMaskHUAWEI;
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
	static PFN_vkDestroyAccelerationStructureKHR staticPfn_vkDestroyAccelerationStructureKHR;
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
	static PFN_vkDestroyAccelerationStructureNV staticPfn_vkDestroyAccelerationStructureNV;
	static PFN_vkGetAccelerationStructureMemoryRequirementsNV staticPfn_vkGetAccelerationStructureMemoryRequirementsNV;
	static PFN_vkBindAccelerationStructureMemoryNV staticPfn_vkBindAccelerationStructureMemoryNV;
	static PFN_vkCmdCopyAccelerationStructureNV staticPfn_vkCmdCopyAccelerationStructureNV;
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
	static PFN_vkCmdCopyAccelerationStructureKHR staticPfn_vkCmdCopyAccelerationStructureKHR;
	static PFN_vkCopyAccelerationStructureKHR staticPfn_vkCopyAccelerationStructureKHR;
	static PFN_vkCmdCopyAccelerationStructureToMemoryKHR staticPfn_vkCmdCopyAccelerationStructureToMemoryKHR;
	static PFN_vkCopyAccelerationStructureToMemoryKHR staticPfn_vkCopyAccelerationStructureToMemoryKHR;
	static PFN_vkCmdCopyMemoryToAccelerationStructureKHR staticPfn_vkCmdCopyMemoryToAccelerationStructureKHR;
	static PFN_vkCopyMemoryToAccelerationStructureKHR staticPfn_vkCopyMemoryToAccelerationStructureKHR;
	static PFN_vkCmdWriteAccelerationStructuresPropertiesKHR staticPfn_vkCmdWriteAccelerationStructuresPropertiesKHR;
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
	static PFN_vkCmdWriteAccelerationStructuresPropertiesNV staticPfn_vkCmdWriteAccelerationStructuresPropertiesNV;
	static PFN_vkCmdBuildAccelerationStructureNV staticPfn_vkCmdBuildAccelerationStructureNV;
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
	static PFN_vkWriteAccelerationStructuresPropertiesKHR staticPfn_vkWriteAccelerationStructuresPropertiesKHR;
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
	static PFN_vkCmdTraceRaysKHR staticPfn_vkCmdTraceRaysKHR;
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
	static PFN_vkCmdTraceRaysNV staticPfn_vkCmdTraceRaysNV;
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
	static PFN_vkGetRayTracingShaderGroupHandlesKHR staticPfn_vkGetRayTracingShaderGroupHandlesKHR;
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
	static PFN_vkGetRayTracingShaderGroupHandlesNV staticPfn_vkGetRayTracingShaderGroupHandlesNV;
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
	static PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR staticPfn_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
	static PFN_vkGetAccelerationStructureHandleNV staticPfn_vkGetAccelerationStructureHandleNV;
	static PFN_vkCreateRayTracingPipelinesNV staticPfn_vkCreateRayTracingPipelinesNV;
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
	static PFN_vkCreateRayTracingPipelinesKHR staticPfn_vkCreateRayTracingPipelinesKHR;
#endif
#if defined(VK_NV_cooperative_matrix) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV staticPfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
	static PFN_vkCmdTraceRaysIndirectKHR staticPfn_vkCmdTraceRaysIndirectKHR;
#endif
#if (defined(VK_KHR_ray_tracing_maintenance1) && (defined(VK_KHR_acceleration_structure))) && (defined(VK_KHR_ray_tracing_pipeline))
	static PFN_vkCmdTraceRaysIndirect2KHR staticPfn_vkCmdTraceRaysIndirect2KHR;
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
	static PFN_vkGetDeviceAccelerationStructureCompatibilityKHR staticPfn_vkGetDeviceAccelerationStructureCompatibilityKHR;
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
	static PFN_vkGetRayTracingShaderGroupStackSizeKHR staticPfn_vkGetRayTracingShaderGroupStackSizeKHR;
	static PFN_vkCmdSetRayTracingPipelineStackSizeKHR staticPfn_vkCmdSetRayTracingPipelineStackSizeKHR;
#endif
#if defined(VK_NVX_image_view_handle)
	static PFN_vkGetImageViewHandleNVX staticPfn_vkGetImageViewHandleNVX;
	static PFN_vkGetImageViewAddressNVX staticPfn_vkGetImageViewAddressNVX;
#endif
#if defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
	static PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT staticPfn_vkGetPhysicalDeviceSurfacePresentModes2EXT;
#endif
#if ((defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))) && (defined(VK_KHR_device_group))) || ((defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))) && (defined(VK_VERSION_1_1)))
	static PFN_vkGetDeviceGroupSurfacePresentModes2EXT staticPfn_vkGetDeviceGroupSurfacePresentModes2EXT;
#endif
#if defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
	static PFN_vkAcquireFullScreenExclusiveModeEXT staticPfn_vkAcquireFullScreenExclusiveModeEXT;
	static PFN_vkReleaseFullScreenExclusiveModeEXT staticPfn_vkReleaseFullScreenExclusiveModeEXT;
#endif
#if defined(VK_KHR_performance_query) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR staticPfn_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
	static PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR staticPfn_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
	static PFN_vkAcquireProfilingLockKHR staticPfn_vkAcquireProfilingLockKHR;
	static PFN_vkReleaseProfilingLockKHR staticPfn_vkReleaseProfilingLockKHR;
#endif
#if defined(VK_EXT_image_drm_format_modifier) && (((defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_sampler_ycbcr_conversion)) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_image_format_list) || defined(VK_VERSION_1_2)))
	static PFN_vkGetImageDrmFormatModifierPropertiesEXT staticPfn_vkGetImageDrmFormatModifierPropertiesEXT;
#endif
#if defined(VK_VERSION_1_2)
	static PFN_vkGetBufferOpaqueCaptureAddress staticPfn_vkGetBufferOpaqueCaptureAddress;
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
	static PFN_vkGetBufferOpaqueCaptureAddressKHR staticPfn_vkGetBufferOpaqueCaptureAddressKHR;
#endif
#if defined(VK_VERSION_1_2)
	static PFN_vkGetBufferDeviceAddress staticPfn_vkGetBufferDeviceAddress;
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
	static PFN_vkGetBufferDeviceAddressKHR staticPfn_vkGetBufferDeviceAddressKHR;
#endif
#if defined(VK_EXT_buffer_device_address) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkGetBufferDeviceAddressEXT staticPfn_vkGetBufferDeviceAddressEXT;
#endif
#if defined(VK_EXT_headless_surface) && (defined(VK_KHR_surface))
	static PFN_vkCreateHeadlessSurfaceEXT staticPfn_vkCreateHeadlessSurfaceEXT;
#endif
#if defined(VK_NV_coverage_reduction_mode) && (defined(VK_NV_framebuffer_mixed_samples) && defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV staticPfn_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
#endif
#if defined(VK_INTEL_performance_query)
	static PFN_vkInitializePerformanceApiINTEL staticPfn_vkInitializePerformanceApiINTEL;
	static PFN_vkUninitializePerformanceApiINTEL staticPfn_vkUninitializePerformanceApiINTEL;
	static PFN_vkCmdSetPerformanceMarkerINTEL staticPfn_vkCmdSetPerformanceMarkerINTEL;
	static PFN_vkCmdSetPerformanceStreamMarkerINTEL staticPfn_vkCmdSetPerformanceStreamMarkerINTEL;
	static PFN_vkCmdSetPerformanceOverrideINTEL staticPfn_vkCmdSetPerformanceOverrideINTEL;
	static PFN_vkAcquirePerformanceConfigurationINTEL staticPfn_vkAcquirePerformanceConfigurationINTEL;
	static PFN_vkReleasePerformanceConfigurationINTEL staticPfn_vkReleasePerformanceConfigurationINTEL;
	static PFN_vkQueueSetPerformanceConfigurationINTEL staticPfn_vkQueueSetPerformanceConfigurationINTEL;
	static PFN_vkGetPerformanceParameterINTEL staticPfn_vkGetPerformanceParameterINTEL;
#endif
#if defined(VK_VERSION_1_2)
	static PFN_vkGetDeviceMemoryOpaqueCaptureAddress staticPfn_vkGetDeviceMemoryOpaqueCaptureAddress;
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
	static PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR staticPfn_vkGetDeviceMemoryOpaqueCaptureAddressKHR;
#endif
#if defined(VK_KHR_pipeline_executable_properties) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkGetPipelineExecutablePropertiesKHR staticPfn_vkGetPipelineExecutablePropertiesKHR;
	static PFN_vkGetPipelineExecutableStatisticsKHR staticPfn_vkGetPipelineExecutableStatisticsKHR;
	static PFN_vkGetPipelineExecutableInternalRepresentationsKHR staticPfn_vkGetPipelineExecutableInternalRepresentationsKHR;
#endif
#if defined(VK_KHR_line_rasterization) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkCmdSetLineStippleKHR staticPfn_vkCmdSetLineStippleKHR;
#endif
#if defined(VK_EXT_line_rasterization) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkCmdSetLineStippleEXT staticPfn_vkCmdSetLineStippleEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkGetPhysicalDeviceToolProperties staticPfn_vkGetPhysicalDeviceToolProperties;
#endif
#if defined(VK_EXT_tooling_info)
	static PFN_vkGetPhysicalDeviceToolPropertiesEXT staticPfn_vkGetPhysicalDeviceToolPropertiesEXT;
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
	static PFN_vkCreateAccelerationStructureKHR staticPfn_vkCreateAccelerationStructureKHR;
	static PFN_vkCmdBuildAccelerationStructuresKHR staticPfn_vkCmdBuildAccelerationStructuresKHR;
	static PFN_vkCmdBuildAccelerationStructuresIndirectKHR staticPfn_vkCmdBuildAccelerationStructuresIndirectKHR;
	static PFN_vkBuildAccelerationStructuresKHR staticPfn_vkBuildAccelerationStructuresKHR;
	static PFN_vkGetAccelerationStructureDeviceAddressKHR staticPfn_vkGetAccelerationStructureDeviceAddressKHR;
#endif
#if defined(VK_KHR_deferred_host_operations)
	static PFN_vkCreateDeferredOperationKHR staticPfn_vkCreateDeferredOperationKHR;
	static PFN_vkDestroyDeferredOperationKHR staticPfn_vkDestroyDeferredOperationKHR;
	static PFN_vkGetDeferredOperationMaxConcurrencyKHR staticPfn_vkGetDeferredOperationMaxConcurrencyKHR;
	static PFN_vkGetDeferredOperationResultKHR staticPfn_vkGetDeferredOperationResultKHR;
	static PFN_vkDeferredOperationJoinKHR staticPfn_vkDeferredOperationJoinKHR;
#endif
#if defined(VK_NV_device_generated_commands_compute) && (defined(VK_NV_device_generated_commands))
	static PFN_vkGetPipelineIndirectMemoryRequirementsNV staticPfn_vkGetPipelineIndirectMemoryRequirementsNV;
	static PFN_vkGetPipelineIndirectDeviceAddressNV staticPfn_vkGetPipelineIndirectDeviceAddressNV;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdSetCullMode staticPfn_vkCmdSetCullMode;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetCullModeEXT staticPfn_vkCmdSetCullModeEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdSetFrontFace staticPfn_vkCmdSetFrontFace;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetFrontFaceEXT staticPfn_vkCmdSetFrontFaceEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdSetPrimitiveTopology staticPfn_vkCmdSetPrimitiveTopology;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetPrimitiveTopologyEXT staticPfn_vkCmdSetPrimitiveTopologyEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdSetViewportWithCount staticPfn_vkCmdSetViewportWithCount;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetViewportWithCountEXT staticPfn_vkCmdSetViewportWithCountEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdSetScissorWithCount staticPfn_vkCmdSetScissorWithCount;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetScissorWithCountEXT staticPfn_vkCmdSetScissorWithCountEXT;
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
	static PFN_vkCmdBindIndexBuffer2KHR staticPfn_vkCmdBindIndexBuffer2KHR;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdBindVertexBuffers2 staticPfn_vkCmdBindVertexBuffers2;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdBindVertexBuffers2EXT staticPfn_vkCmdBindVertexBuffers2EXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdSetDepthTestEnable staticPfn_vkCmdSetDepthTestEnable;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetDepthTestEnableEXT staticPfn_vkCmdSetDepthTestEnableEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdSetDepthWriteEnable staticPfn_vkCmdSetDepthWriteEnable;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetDepthWriteEnableEXT staticPfn_vkCmdSetDepthWriteEnableEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdSetDepthCompareOp staticPfn_vkCmdSetDepthCompareOp;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetDepthCompareOpEXT staticPfn_vkCmdSetDepthCompareOpEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdSetDepthBoundsTestEnable staticPfn_vkCmdSetDepthBoundsTestEnable;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetDepthBoundsTestEnableEXT staticPfn_vkCmdSetDepthBoundsTestEnableEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdSetStencilTestEnable staticPfn_vkCmdSetStencilTestEnable;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetStencilTestEnableEXT staticPfn_vkCmdSetStencilTestEnableEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdSetStencilOp staticPfn_vkCmdSetStencilOp;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetStencilOpEXT staticPfn_vkCmdSetStencilOpEXT;
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetPatchControlPointsEXT staticPfn_vkCmdSetPatchControlPointsEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdSetRasterizerDiscardEnable staticPfn_vkCmdSetRasterizerDiscardEnable;
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetRasterizerDiscardEnableEXT staticPfn_vkCmdSetRasterizerDiscardEnableEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdSetDepthBiasEnable staticPfn_vkCmdSetDepthBiasEnable;
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetDepthBiasEnableEXT staticPfn_vkCmdSetDepthBiasEnableEXT;
	static PFN_vkCmdSetLogicOpEXT staticPfn_vkCmdSetLogicOpEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdSetPrimitiveRestartEnable staticPfn_vkCmdSetPrimitiveRestartEnable;
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetPrimitiveRestartEnableEXT staticPfn_vkCmdSetPrimitiveRestartEnableEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_KHR_maintenance2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetTessellationDomainOriginEXT staticPfn_vkCmdSetTessellationDomainOriginEXT;
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetDepthClampEnableEXT staticPfn_vkCmdSetDepthClampEnableEXT;
	static PFN_vkCmdSetPolygonModeEXT staticPfn_vkCmdSetPolygonModeEXT;
	static PFN_vkCmdSetRasterizationSamplesEXT staticPfn_vkCmdSetRasterizationSamplesEXT;
	static PFN_vkCmdSetSampleMaskEXT staticPfn_vkCmdSetSampleMaskEXT;
	static PFN_vkCmdSetAlphaToCoverageEnableEXT staticPfn_vkCmdSetAlphaToCoverageEnableEXT;
	static PFN_vkCmdSetAlphaToOneEnableEXT staticPfn_vkCmdSetAlphaToOneEnableEXT;
	static PFN_vkCmdSetLogicOpEnableEXT staticPfn_vkCmdSetLogicOpEnableEXT;
	static PFN_vkCmdSetColorBlendEnableEXT staticPfn_vkCmdSetColorBlendEnableEXT;
	static PFN_vkCmdSetColorBlendEquationEXT staticPfn_vkCmdSetColorBlendEquationEXT;
	static PFN_vkCmdSetColorWriteMaskEXT staticPfn_vkCmdSetColorWriteMaskEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_transform_feedback))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_transform_feedback)))
	static PFN_vkCmdSetRasterizationStreamEXT staticPfn_vkCmdSetRasterizationStreamEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_conservative_rasterization))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_conservative_rasterization)))
	static PFN_vkCmdSetConservativeRasterizationModeEXT staticPfn_vkCmdSetConservativeRasterizationModeEXT;
	static PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT staticPfn_vkCmdSetExtraPrimitiveOverestimationSizeEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_depth_clip_enable))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_depth_clip_enable)))
	static PFN_vkCmdSetDepthClipEnableEXT staticPfn_vkCmdSetDepthClipEnableEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_sample_locations))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_sample_locations)))
	static PFN_vkCmdSetSampleLocationsEnableEXT staticPfn_vkCmdSetSampleLocationsEnableEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_blend_operation_advanced))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_blend_operation_advanced)))
	static PFN_vkCmdSetColorBlendAdvancedEXT staticPfn_vkCmdSetColorBlendAdvancedEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_provoking_vertex))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_provoking_vertex)))
	static PFN_vkCmdSetProvokingVertexModeEXT staticPfn_vkCmdSetProvokingVertexModeEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_line_rasterization))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_line_rasterization)))
	static PFN_vkCmdSetLineRasterizationModeEXT staticPfn_vkCmdSetLineRasterizationModeEXT;
	static PFN_vkCmdSetLineStippleEnableEXT staticPfn_vkCmdSetLineStippleEnableEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_depth_clip_control))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_depth_clip_control)))
	static PFN_vkCmdSetDepthClipNegativeOneToOneEXT staticPfn_vkCmdSetDepthClipNegativeOneToOneEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_clip_space_w_scaling))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_clip_space_w_scaling)))
	static PFN_vkCmdSetViewportWScalingEnableNV staticPfn_vkCmdSetViewportWScalingEnableNV;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_viewport_swizzle))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_viewport_swizzle)))
	static PFN_vkCmdSetViewportSwizzleNV staticPfn_vkCmdSetViewportSwizzleNV;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_fragment_coverage_to_color))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_fragment_coverage_to_color)))
	static PFN_vkCmdSetCoverageToColorEnableNV staticPfn_vkCmdSetCoverageToColorEnableNV;
	static PFN_vkCmdSetCoverageToColorLocationNV staticPfn_vkCmdSetCoverageToColorLocationNV;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_framebuffer_mixed_samples))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_framebuffer_mixed_samples)))
	static PFN_vkCmdSetCoverageModulationModeNV staticPfn_vkCmdSetCoverageModulationModeNV;
	static PFN_vkCmdSetCoverageModulationTableEnableNV staticPfn_vkCmdSetCoverageModulationTableEnableNV;
	static PFN_vkCmdSetCoverageModulationTableNV staticPfn_vkCmdSetCoverageModulationTableNV;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_shading_rate_image))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_shading_rate_image)))
	static PFN_vkCmdSetShadingRateImageEnableNV staticPfn_vkCmdSetShadingRateImageEnableNV;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_coverage_reduction_mode))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_coverage_reduction_mode)))
	static PFN_vkCmdSetCoverageReductionModeNV staticPfn_vkCmdSetCoverageReductionModeNV;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_representative_fragment_test))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_representative_fragment_test)))
	static PFN_vkCmdSetRepresentativeFragmentTestEnableNV staticPfn_vkCmdSetRepresentativeFragmentTestEnableNV;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCreatePrivateDataSlot staticPfn_vkCreatePrivateDataSlot;
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkCreatePrivateDataSlotEXT staticPfn_vkCreatePrivateDataSlotEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkDestroyPrivateDataSlot staticPfn_vkDestroyPrivateDataSlot;
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkDestroyPrivateDataSlotEXT staticPfn_vkDestroyPrivateDataSlotEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkSetPrivateData staticPfn_vkSetPrivateData;
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkSetPrivateDataEXT staticPfn_vkSetPrivateDataEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkGetPrivateData staticPfn_vkGetPrivateData;
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkGetPrivateDataEXT staticPfn_vkGetPrivateDataEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdCopyBuffer2 staticPfn_vkCmdCopyBuffer2;
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkCmdCopyBuffer2KHR staticPfn_vkCmdCopyBuffer2KHR;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdCopyImage2 staticPfn_vkCmdCopyImage2;
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkCmdCopyImage2KHR staticPfn_vkCmdCopyImage2KHR;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdBlitImage2 staticPfn_vkCmdBlitImage2;
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkCmdBlitImage2KHR staticPfn_vkCmdBlitImage2KHR;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdCopyBufferToImage2 staticPfn_vkCmdCopyBufferToImage2;
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkCmdCopyBufferToImage2KHR staticPfn_vkCmdCopyBufferToImage2KHR;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdCopyImageToBuffer2 staticPfn_vkCmdCopyImageToBuffer2;
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkCmdCopyImageToBuffer2KHR staticPfn_vkCmdCopyImageToBuffer2KHR;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdResolveImage2 staticPfn_vkCmdResolveImage2;
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkCmdResolveImage2KHR staticPfn_vkCmdResolveImage2KHR;
#endif
#if defined(VK_KHR_object_refresh)
	static PFN_vkCmdRefreshObjectsKHR staticPfn_vkCmdRefreshObjectsKHR;
	static PFN_vkGetPhysicalDeviceRefreshableObjectTypesKHR staticPfn_vkGetPhysicalDeviceRefreshableObjectTypesKHR;
#endif
#if defined(VK_KHR_fragment_shading_rate) && ((defined(VK_KHR_create_renderpass2) || defined(VK_VERSION_1_2)) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)))
	static PFN_vkCmdSetFragmentShadingRateKHR staticPfn_vkCmdSetFragmentShadingRateKHR;
	static PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR staticPfn_vkGetPhysicalDeviceFragmentShadingRatesKHR;
#endif
#if defined(VK_NV_fragment_shading_rate_enums) && (defined(VK_KHR_fragment_shading_rate))
	static PFN_vkCmdSetFragmentShadingRateEnumNV staticPfn_vkCmdSetFragmentShadingRateEnumNV;
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
	static PFN_vkGetAccelerationStructureBuildSizesKHR staticPfn_vkGetAccelerationStructureBuildSizesKHR;
#endif
#if (defined(VK_EXT_vertex_input_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	static PFN_vkCmdSetVertexInputEXT staticPfn_vkCmdSetVertexInputEXT;
#endif
#if defined(VK_EXT_color_write_enable) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkCmdSetColorWriteEnableEXT staticPfn_vkCmdSetColorWriteEnableEXT;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdSetEvent2 staticPfn_vkCmdSetEvent2;
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkCmdSetEvent2KHR staticPfn_vkCmdSetEvent2KHR;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdResetEvent2 staticPfn_vkCmdResetEvent2;
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkCmdResetEvent2KHR staticPfn_vkCmdResetEvent2KHR;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdWaitEvents2 staticPfn_vkCmdWaitEvents2;
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkCmdWaitEvents2KHR staticPfn_vkCmdWaitEvents2KHR;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdPipelineBarrier2 staticPfn_vkCmdPipelineBarrier2;
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkCmdPipelineBarrier2KHR staticPfn_vkCmdPipelineBarrier2KHR;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkQueueSubmit2 staticPfn_vkQueueSubmit2;
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkQueueSubmit2KHR staticPfn_vkQueueSubmit2KHR;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdWriteTimestamp2 staticPfn_vkCmdWriteTimestamp2;
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	static PFN_vkCmdWriteTimestamp2KHR staticPfn_vkCmdWriteTimestamp2KHR;
#endif
#if (defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) && (defined(VK_AMD_buffer_marker))
	static PFN_vkCmdWriteBufferMarker2AMD staticPfn_vkCmdWriteBufferMarker2AMD;
#endif
#if (defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) && (defined(VK_NV_device_diagnostic_checkpoints))
	static PFN_vkGetQueueCheckpointData2NV staticPfn_vkGetQueueCheckpointData2NV;
#endif
#if defined(VK_EXT_host_image_copy) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_copy_commands2) && defined(VK_KHR_format_feature_flags2))
	static PFN_vkCopyMemoryToImageEXT staticPfn_vkCopyMemoryToImageEXT;
	static PFN_vkCopyImageToMemoryEXT staticPfn_vkCopyImageToMemoryEXT;
	static PFN_vkCopyImageToImageEXT staticPfn_vkCopyImageToImageEXT;
	static PFN_vkTransitionImageLayoutEXT staticPfn_vkTransitionImageLayoutEXT;
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
	static PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR staticPfn_vkGetPhysicalDeviceVideoCapabilitiesKHR;
	static PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR staticPfn_vkGetPhysicalDeviceVideoFormatPropertiesKHR;
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
	static PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR staticPfn_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
	static PFN_vkCreateVideoSessionKHR staticPfn_vkCreateVideoSessionKHR;
	static PFN_vkDestroyVideoSessionKHR staticPfn_vkDestroyVideoSessionKHR;
	static PFN_vkCreateVideoSessionParametersKHR staticPfn_vkCreateVideoSessionParametersKHR;
	static PFN_vkUpdateVideoSessionParametersKHR staticPfn_vkUpdateVideoSessionParametersKHR;
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
	static PFN_vkGetEncodedVideoSessionParametersKHR staticPfn_vkGetEncodedVideoSessionParametersKHR;
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
	static PFN_vkDestroyVideoSessionParametersKHR staticPfn_vkDestroyVideoSessionParametersKHR;
	static PFN_vkGetVideoSessionMemoryRequirementsKHR staticPfn_vkGetVideoSessionMemoryRequirementsKHR;
	static PFN_vkBindVideoSessionMemoryKHR staticPfn_vkBindVideoSessionMemoryKHR;
#endif
#if defined(VK_KHR_video_decode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
	static PFN_vkCmdDecodeVideoKHR staticPfn_vkCmdDecodeVideoKHR;
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
	static PFN_vkCmdBeginVideoCodingKHR staticPfn_vkCmdBeginVideoCodingKHR;
	static PFN_vkCmdControlVideoCodingKHR staticPfn_vkCmdControlVideoCodingKHR;
	static PFN_vkCmdEndVideoCodingKHR staticPfn_vkCmdEndVideoCodingKHR;
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
	static PFN_vkCmdEncodeVideoKHR staticPfn_vkCmdEncodeVideoKHR;
#endif
#if defined(VK_NV_memory_decompression) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address))
	static PFN_vkCmdDecompressMemoryNV staticPfn_vkCmdDecompressMemoryNV;
	static PFN_vkCmdDecompressMemoryIndirectCountNV staticPfn_vkCmdDecompressMemoryIndirectCountNV;
#endif
#if defined(VK_NVX_binary_import)
	static PFN_vkCreateCuModuleNVX staticPfn_vkCreateCuModuleNVX;
	static PFN_vkCreateCuFunctionNVX staticPfn_vkCreateCuFunctionNVX;
	static PFN_vkDestroyCuModuleNVX staticPfn_vkDestroyCuModuleNVX;
	static PFN_vkDestroyCuFunctionNVX staticPfn_vkDestroyCuFunctionNVX;
	static PFN_vkCmdCuLaunchKernelNVX staticPfn_vkCmdCuLaunchKernelNVX;
#endif
#if defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_synchronization2) && defined(VK_EXT_descriptor_indexing))
	static PFN_vkGetDescriptorSetLayoutSizeEXT staticPfn_vkGetDescriptorSetLayoutSizeEXT;
	static PFN_vkGetDescriptorSetLayoutBindingOffsetEXT staticPfn_vkGetDescriptorSetLayoutBindingOffsetEXT;
	static PFN_vkGetDescriptorEXT staticPfn_vkGetDescriptorEXT;
	static PFN_vkCmdBindDescriptorBuffersEXT staticPfn_vkCmdBindDescriptorBuffersEXT;
	static PFN_vkCmdSetDescriptorBufferOffsetsEXT staticPfn_vkCmdSetDescriptorBufferOffsetsEXT;
	static PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT staticPfn_vkCmdBindDescriptorBufferEmbeddedSamplersEXT;
	static PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT staticPfn_vkGetBufferOpaqueCaptureDescriptorDataEXT;
	static PFN_vkGetImageOpaqueCaptureDescriptorDataEXT staticPfn_vkGetImageOpaqueCaptureDescriptorDataEXT;
	static PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT staticPfn_vkGetImageViewOpaqueCaptureDescriptorDataEXT;
	static PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT staticPfn_vkGetSamplerOpaqueCaptureDescriptorDataEXT;
#endif
#if (defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_synchronization2) && defined(VK_EXT_descriptor_indexing))) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing))
	static PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT staticPfn_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT;
#endif
#if defined(VK_EXT_pageable_device_local_memory) && (defined(VK_EXT_memory_priority))
	static PFN_vkSetDeviceMemoryPriorityEXT staticPfn_vkSetDeviceMemoryPriorityEXT;
#endif
#if defined(VK_EXT_acquire_drm_display) && (defined(VK_EXT_direct_mode_display))
	static PFN_vkAcquireDrmDisplayEXT staticPfn_vkAcquireDrmDisplayEXT;
	static PFN_vkGetDrmDisplayEXT staticPfn_vkGetDrmDisplayEXT;
#endif
#if defined(VK_KHR_present_wait) && (defined(VK_KHR_swapchain) && defined(VK_KHR_present_id))
	static PFN_vkWaitForPresentKHR staticPfn_vkWaitForPresentKHR;
#endif
#if defined(VK_FUCHSIA_buffer_collection) && (defined(VK_FUCHSIA_external_memory) && defined(VK_KHR_sampler_ycbcr_conversion))
	static PFN_vkCreateBufferCollectionFUCHSIA staticPfn_vkCreateBufferCollectionFUCHSIA;
	static PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA staticPfn_vkSetBufferCollectionBufferConstraintsFUCHSIA;
	static PFN_vkSetBufferCollectionImageConstraintsFUCHSIA staticPfn_vkSetBufferCollectionImageConstraintsFUCHSIA;
	static PFN_vkDestroyBufferCollectionFUCHSIA staticPfn_vkDestroyBufferCollectionFUCHSIA;
	static PFN_vkGetBufferCollectionPropertiesFUCHSIA staticPfn_vkGetBufferCollectionPropertiesFUCHSIA;
#endif
#if defined(VK_NV_cuda_kernel_launch)
	static PFN_vkCreateCudaModuleNV staticPfn_vkCreateCudaModuleNV;
	static PFN_vkGetCudaModuleCacheNV staticPfn_vkGetCudaModuleCacheNV;
	static PFN_vkCreateCudaFunctionNV staticPfn_vkCreateCudaFunctionNV;
	static PFN_vkDestroyCudaModuleNV staticPfn_vkDestroyCudaModuleNV;
	static PFN_vkDestroyCudaFunctionNV staticPfn_vkDestroyCudaFunctionNV;
	static PFN_vkCmdCudaLaunchKernelNV staticPfn_vkCmdCudaLaunchKernelNV;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdBeginRendering staticPfn_vkCmdBeginRendering;
#endif
#if defined(VK_KHR_dynamic_rendering) && (defined(VK_KHR_depth_stencil_resolve) && defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkCmdBeginRenderingKHR staticPfn_vkCmdBeginRenderingKHR;
#endif
#if defined(VK_VERSION_1_3)
	static PFN_vkCmdEndRendering staticPfn_vkCmdEndRendering;
#endif
#if defined(VK_KHR_dynamic_rendering) && (defined(VK_KHR_depth_stencil_resolve) && defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkCmdEndRenderingKHR staticPfn_vkCmdEndRenderingKHR;
#endif
#if defined(VK_VALVE_descriptor_set_host_mapping) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE staticPfn_vkGetDescriptorSetLayoutHostMappingInfoVALVE;
	static PFN_vkGetDescriptorSetHostMappingVALVE staticPfn_vkGetDescriptorSetHostMappingVALVE;
#endif
#if defined(VK_EXT_opacity_micromap) && (defined(VK_KHR_acceleration_structure) && defined(VK_KHR_synchronization2))
	static PFN_vkCreateMicromapEXT staticPfn_vkCreateMicromapEXT;
	static PFN_vkCmdBuildMicromapsEXT staticPfn_vkCmdBuildMicromapsEXT;
	static PFN_vkBuildMicromapsEXT staticPfn_vkBuildMicromapsEXT;
	static PFN_vkDestroyMicromapEXT staticPfn_vkDestroyMicromapEXT;
	static PFN_vkCmdCopyMicromapEXT staticPfn_vkCmdCopyMicromapEXT;
	static PFN_vkCopyMicromapEXT staticPfn_vkCopyMicromapEXT;
	static PFN_vkCmdCopyMicromapToMemoryEXT staticPfn_vkCmdCopyMicromapToMemoryEXT;
	static PFN_vkCopyMicromapToMemoryEXT staticPfn_vkCopyMicromapToMemoryEXT;
	static PFN_vkCmdCopyMemoryToMicromapEXT staticPfn_vkCmdCopyMemoryToMicromapEXT;
	static PFN_vkCopyMemoryToMicromapEXT staticPfn_vkCopyMemoryToMicromapEXT;
	static PFN_vkCmdWriteMicromapsPropertiesEXT staticPfn_vkCmdWriteMicromapsPropertiesEXT;
	static PFN_vkWriteMicromapsPropertiesEXT staticPfn_vkWriteMicromapsPropertiesEXT;
	static PFN_vkGetDeviceMicromapCompatibilityEXT staticPfn_vkGetDeviceMicromapCompatibilityEXT;
	static PFN_vkGetMicromapBuildSizesEXT staticPfn_vkGetMicromapBuildSizesEXT;
#endif
#if defined(VK_EXT_shader_module_identifier) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_EXT_pipeline_creation_cache_control))
	static PFN_vkGetShaderModuleIdentifierEXT staticPfn_vkGetShaderModuleIdentifierEXT;
	static PFN_vkGetShaderModuleCreateInfoIdentifierEXT staticPfn_vkGetShaderModuleCreateInfoIdentifierEXT;
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
	static PFN_vkGetImageSubresourceLayout2KHR staticPfn_vkGetImageSubresourceLayout2KHR;
#endif
#if (defined(VK_EXT_host_image_copy) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_copy_commands2) && defined(VK_KHR_format_feature_flags2))) || (defined(VK_EXT_image_compression_control) && (defined(VK_KHR_get_physical_device_properties2)))
	static PFN_vkGetImageSubresourceLayout2EXT staticPfn_vkGetImageSubresourceLayout2EXT;
#endif
#if defined(VK_EXT_pipeline_properties) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkGetPipelinePropertiesEXT staticPfn_vkGetPipelinePropertiesEXT;
#endif
#if defined(VK_EXT_metal_objects)
	static PFN_vkExportMetalObjectsEXT staticPfn_vkExportMetalObjectsEXT;
#endif
#if defined(VK_QCOM_tile_properties) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkGetFramebufferTilePropertiesQCOM staticPfn_vkGetFramebufferTilePropertiesQCOM;
	static PFN_vkGetDynamicRenderingTilePropertiesQCOM staticPfn_vkGetDynamicRenderingTilePropertiesQCOM;
#endif
#if defined(VK_NV_optical_flow) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_format_feature_flags2) && defined(VK_KHR_synchronization2))
	static PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV staticPfn_vkGetPhysicalDeviceOpticalFlowImageFormatsNV;
	static PFN_vkCreateOpticalFlowSessionNV staticPfn_vkCreateOpticalFlowSessionNV;
	static PFN_vkDestroyOpticalFlowSessionNV staticPfn_vkDestroyOpticalFlowSessionNV;
	static PFN_vkBindOpticalFlowSessionImageNV staticPfn_vkBindOpticalFlowSessionImageNV;
	static PFN_vkCmdOpticalFlowExecuteNV staticPfn_vkCmdOpticalFlowExecuteNV;
#endif
#if defined(VK_EXT_device_fault) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkGetDeviceFaultInfoEXT staticPfn_vkGetDeviceFaultInfoEXT;
#endif
#if defined(VK_EXT_depth_bias_control) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkCmdSetDepthBias2EXT staticPfn_vkCmdSetDepthBias2EXT;
#endif
#if defined(VK_EXT_swapchain_maintenance1) && (defined(VK_KHR_swapchain) && defined(VK_EXT_surface_maintenance1) && defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkReleaseSwapchainImagesEXT staticPfn_vkReleaseSwapchainImagesEXT;
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
	static PFN_vkGetDeviceImageSubresourceLayoutKHR staticPfn_vkGetDeviceImageSubresourceLayoutKHR;
#endif
#if defined(VK_KHR_map_memory2)
	static PFN_vkMapMemory2KHR staticPfn_vkMapMemory2KHR;
	static PFN_vkUnmapMemory2KHR staticPfn_vkUnmapMemory2KHR;
#endif
#if defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))
	static PFN_vkCreateShadersEXT staticPfn_vkCreateShadersEXT;
	static PFN_vkDestroyShaderEXT staticPfn_vkDestroyShaderEXT;
	static PFN_vkGetShaderBinaryDataEXT staticPfn_vkGetShaderBinaryDataEXT;
	static PFN_vkCmdBindShadersEXT staticPfn_vkCmdBindShadersEXT;
#endif
#if defined(VK_QNX_external_memory_screen_buffer) && (((defined(VK_KHR_sampler_ycbcr_conversion) && defined(VK_KHR_external_memory) && defined(VK_KHR_dedicated_allocation)) || defined(VK_VERSION_1_1)) && defined(VK_EXT_queue_family_foreign))
	static PFN_vkGetScreenBufferPropertiesQNX staticPfn_vkGetScreenBufferPropertiesQNX;
#endif
#if defined(VK_KHR_cooperative_matrix) && (defined(VK_KHR_get_physical_device_properties2))
	static PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR staticPfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR;
#endif
#if defined(VK_AMDX_shader_enqueue) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_synchronization2) && defined(VK_KHR_pipeline_library) && defined(VK_KHR_spirv_1_4))
	static PFN_vkGetExecutionGraphPipelineScratchSizeAMDX staticPfn_vkGetExecutionGraphPipelineScratchSizeAMDX;
	static PFN_vkGetExecutionGraphPipelineNodeIndexAMDX staticPfn_vkGetExecutionGraphPipelineNodeIndexAMDX;
	static PFN_vkCreateExecutionGraphPipelinesAMDX staticPfn_vkCreateExecutionGraphPipelinesAMDX;
	static PFN_vkCmdInitializeGraphScratchMemoryAMDX staticPfn_vkCmdInitializeGraphScratchMemoryAMDX;
	static PFN_vkCmdDispatchGraphAMDX staticPfn_vkCmdDispatchGraphAMDX;
	static PFN_vkCmdDispatchGraphIndirectAMDX staticPfn_vkCmdDispatchGraphIndirectAMDX;
	static PFN_vkCmdDispatchGraphIndirectCountAMDX staticPfn_vkCmdDispatchGraphIndirectCountAMDX;
#endif
#if defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))
	static PFN_vkCmdBindDescriptorSets2KHR staticPfn_vkCmdBindDescriptorSets2KHR;
	static PFN_vkCmdPushConstants2KHR staticPfn_vkCmdPushConstants2KHR;
#endif
#if (defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))) && (defined(VK_KHR_push_descriptor))
	static PFN_vkCmdPushDescriptorSet2KHR staticPfn_vkCmdPushDescriptorSet2KHR;
	static PFN_vkCmdPushDescriptorSetWithTemplate2KHR staticPfn_vkCmdPushDescriptorSetWithTemplate2KHR;
#endif
#if (defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))) && (defined(VK_EXT_descriptor_buffer))
	static PFN_vkCmdSetDescriptorBufferOffsets2EXT staticPfn_vkCmdSetDescriptorBufferOffsets2EXT;
	static PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT staticPfn_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT;
#endif
#if defined(VK_NV_low_latency2) && (defined(VK_VERSION_1_2) || defined(VK_KHR_timeline_semaphore))
	static PFN_vkSetLatencySleepModeNV staticPfn_vkSetLatencySleepModeNV;
	static PFN_vkLatencySleepNV staticPfn_vkLatencySleepNV;
	static PFN_vkSetLatencyMarkerNV staticPfn_vkSetLatencyMarkerNV;
	static PFN_vkGetLatencyTimingsNV staticPfn_vkGetLatencyTimingsNV;
	static PFN_vkQueueNotifyOutOfBandNV staticPfn_vkQueueNotifyOutOfBandNV;
#endif
#if defined(VK_KHR_dynamic_rendering_local_read) && (defined(VK_KHR_dynamic_rendering))
	static PFN_vkCmdSetRenderingAttachmentLocationsKHR staticPfn_vkCmdSetRenderingAttachmentLocationsKHR;
	static PFN_vkCmdSetRenderingInputAttachmentIndicesKHR staticPfn_vkCmdSetRenderingInputAttachmentIndicesKHR;
#endif

	// Internal helper functions
	static void LoadStaticFunctionPointers() {
#if defined(WFE_PLATFORM_WINDOWS)
		if(!vulkanLib.LoadLib("vulkan-1.dll"))
			throw Renderer::UnsupportedAPIException("Failed to load Vulkan dynamic lib!");
#elif defined(WFE_PLATFORM_LINUX)
		if(!vulkanLib.LoadLib("libvulkan.so"))
			throw Renderer::UnsupportedAPIException("Failed to load Vulkan dynamic lib!");
#endif

#if defined(VK_VERSION_1_0)
		staticPfn_vkCreateInstance = (PFN_vkCreateInstance)vulkanLib.LoadFunc("vkCreateInstance");
		staticPfn_vkDestroyInstance = (PFN_vkDestroyInstance)vulkanLib.LoadFunc("vkDestroyInstance");
		staticPfn_vkEnumeratePhysicalDevices = (PFN_vkEnumeratePhysicalDevices)vulkanLib.LoadFunc("vkEnumeratePhysicalDevices");
		staticPfn_vkGetDeviceProcAddr = (PFN_vkGetDeviceProcAddr)vulkanLib.LoadFunc("vkGetDeviceProcAddr");
		staticPfn_vkGetInstanceProcAddr = (PFN_vkGetInstanceProcAddr)vulkanLib.LoadFunc("vkGetInstanceProcAddr");
		staticPfn_vkGetPhysicalDeviceProperties = (PFN_vkGetPhysicalDeviceProperties)vulkanLib.LoadFunc("vkGetPhysicalDeviceProperties");
		staticPfn_vkGetPhysicalDeviceQueueFamilyProperties = (PFN_vkGetPhysicalDeviceQueueFamilyProperties)vulkanLib.LoadFunc("vkGetPhysicalDeviceQueueFamilyProperties");
		staticPfn_vkGetPhysicalDeviceMemoryProperties = (PFN_vkGetPhysicalDeviceMemoryProperties)vulkanLib.LoadFunc("vkGetPhysicalDeviceMemoryProperties");
		staticPfn_vkGetPhysicalDeviceFeatures = (PFN_vkGetPhysicalDeviceFeatures)vulkanLib.LoadFunc("vkGetPhysicalDeviceFeatures");
		staticPfn_vkGetPhysicalDeviceFormatProperties = (PFN_vkGetPhysicalDeviceFormatProperties)vulkanLib.LoadFunc("vkGetPhysicalDeviceFormatProperties");
		staticPfn_vkGetPhysicalDeviceImageFormatProperties = (PFN_vkGetPhysicalDeviceImageFormatProperties)vulkanLib.LoadFunc("vkGetPhysicalDeviceImageFormatProperties");
		staticPfn_vkCreateDevice = (PFN_vkCreateDevice)vulkanLib.LoadFunc("vkCreateDevice");
		staticPfn_vkDestroyDevice = (PFN_vkDestroyDevice)vulkanLib.LoadFunc("vkDestroyDevice");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkEnumerateInstanceVersion = (PFN_vkEnumerateInstanceVersion)vulkanLib.LoadFunc("vkEnumerateInstanceVersion");
#endif
#if defined(VK_VERSION_1_0)
		staticPfn_vkEnumerateInstanceLayerProperties = (PFN_vkEnumerateInstanceLayerProperties)vulkanLib.LoadFunc("vkEnumerateInstanceLayerProperties");
		staticPfn_vkEnumerateInstanceExtensionProperties = (PFN_vkEnumerateInstanceExtensionProperties)vulkanLib.LoadFunc("vkEnumerateInstanceExtensionProperties");
		staticPfn_vkEnumerateDeviceLayerProperties = (PFN_vkEnumerateDeviceLayerProperties)vulkanLib.LoadFunc("vkEnumerateDeviceLayerProperties");
		staticPfn_vkEnumerateDeviceExtensionProperties = (PFN_vkEnumerateDeviceExtensionProperties)vulkanLib.LoadFunc("vkEnumerateDeviceExtensionProperties");
		staticPfn_vkGetDeviceQueue = (PFN_vkGetDeviceQueue)vulkanLib.LoadFunc("vkGetDeviceQueue");
		staticPfn_vkQueueSubmit = (PFN_vkQueueSubmit)vulkanLib.LoadFunc("vkQueueSubmit");
		staticPfn_vkQueueWaitIdle = (PFN_vkQueueWaitIdle)vulkanLib.LoadFunc("vkQueueWaitIdle");
		staticPfn_vkDeviceWaitIdle = (PFN_vkDeviceWaitIdle)vulkanLib.LoadFunc("vkDeviceWaitIdle");
		staticPfn_vkAllocateMemory = (PFN_vkAllocateMemory)vulkanLib.LoadFunc("vkAllocateMemory");
		staticPfn_vkFreeMemory = (PFN_vkFreeMemory)vulkanLib.LoadFunc("vkFreeMemory");
		staticPfn_vkMapMemory = (PFN_vkMapMemory)vulkanLib.LoadFunc("vkMapMemory");
		staticPfn_vkUnmapMemory = (PFN_vkUnmapMemory)vulkanLib.LoadFunc("vkUnmapMemory");
		staticPfn_vkFlushMappedMemoryRanges = (PFN_vkFlushMappedMemoryRanges)vulkanLib.LoadFunc("vkFlushMappedMemoryRanges");
		staticPfn_vkInvalidateMappedMemoryRanges = (PFN_vkInvalidateMappedMemoryRanges)vulkanLib.LoadFunc("vkInvalidateMappedMemoryRanges");
		staticPfn_vkGetDeviceMemoryCommitment = (PFN_vkGetDeviceMemoryCommitment)vulkanLib.LoadFunc("vkGetDeviceMemoryCommitment");
		staticPfn_vkGetBufferMemoryRequirements = (PFN_vkGetBufferMemoryRequirements)vulkanLib.LoadFunc("vkGetBufferMemoryRequirements");
		staticPfn_vkBindBufferMemory = (PFN_vkBindBufferMemory)vulkanLib.LoadFunc("vkBindBufferMemory");
		staticPfn_vkGetImageMemoryRequirements = (PFN_vkGetImageMemoryRequirements)vulkanLib.LoadFunc("vkGetImageMemoryRequirements");
		staticPfn_vkBindImageMemory = (PFN_vkBindImageMemory)vulkanLib.LoadFunc("vkBindImageMemory");
		staticPfn_vkGetImageSparseMemoryRequirements = (PFN_vkGetImageSparseMemoryRequirements)vulkanLib.LoadFunc("vkGetImageSparseMemoryRequirements");
		staticPfn_vkGetPhysicalDeviceSparseImageFormatProperties = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties)vulkanLib.LoadFunc("vkGetPhysicalDeviceSparseImageFormatProperties");
		staticPfn_vkQueueBindSparse = (PFN_vkQueueBindSparse)vulkanLib.LoadFunc("vkQueueBindSparse");
		staticPfn_vkCreateFence = (PFN_vkCreateFence)vulkanLib.LoadFunc("vkCreateFence");
		staticPfn_vkDestroyFence = (PFN_vkDestroyFence)vulkanLib.LoadFunc("vkDestroyFence");
		staticPfn_vkResetFences = (PFN_vkResetFences)vulkanLib.LoadFunc("vkResetFences");
		staticPfn_vkGetFenceStatus = (PFN_vkGetFenceStatus)vulkanLib.LoadFunc("vkGetFenceStatus");
		staticPfn_vkWaitForFences = (PFN_vkWaitForFences)vulkanLib.LoadFunc("vkWaitForFences");
		staticPfn_vkCreateSemaphore = (PFN_vkCreateSemaphore)vulkanLib.LoadFunc("vkCreateSemaphore");
		staticPfn_vkDestroySemaphore = (PFN_vkDestroySemaphore)vulkanLib.LoadFunc("vkDestroySemaphore");
		staticPfn_vkCreateEvent = (PFN_vkCreateEvent)vulkanLib.LoadFunc("vkCreateEvent");
		staticPfn_vkDestroyEvent = (PFN_vkDestroyEvent)vulkanLib.LoadFunc("vkDestroyEvent");
		staticPfn_vkGetEventStatus = (PFN_vkGetEventStatus)vulkanLib.LoadFunc("vkGetEventStatus");
		staticPfn_vkSetEvent = (PFN_vkSetEvent)vulkanLib.LoadFunc("vkSetEvent");
		staticPfn_vkResetEvent = (PFN_vkResetEvent)vulkanLib.LoadFunc("vkResetEvent");
		staticPfn_vkCreateQueryPool = (PFN_vkCreateQueryPool)vulkanLib.LoadFunc("vkCreateQueryPool");
		staticPfn_vkDestroyQueryPool = (PFN_vkDestroyQueryPool)vulkanLib.LoadFunc("vkDestroyQueryPool");
		staticPfn_vkGetQueryPoolResults = (PFN_vkGetQueryPoolResults)vulkanLib.LoadFunc("vkGetQueryPoolResults");
#endif
#if defined(VK_VERSION_1_2)
		staticPfn_vkResetQueryPool = (PFN_vkResetQueryPool)vulkanLib.LoadFunc("vkResetQueryPool");
#endif
#if defined(VK_EXT_host_query_reset) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkResetQueryPoolEXT = (PFN_vkResetQueryPoolEXT)vulkanLib.LoadFunc("vkResetQueryPoolEXT");
#endif
#if defined(VK_VERSION_1_0)
		staticPfn_vkCreateBuffer = (PFN_vkCreateBuffer)vulkanLib.LoadFunc("vkCreateBuffer");
		staticPfn_vkDestroyBuffer = (PFN_vkDestroyBuffer)vulkanLib.LoadFunc("vkDestroyBuffer");
		staticPfn_vkCreateBufferView = (PFN_vkCreateBufferView)vulkanLib.LoadFunc("vkCreateBufferView");
		staticPfn_vkDestroyBufferView = (PFN_vkDestroyBufferView)vulkanLib.LoadFunc("vkDestroyBufferView");
		staticPfn_vkCreateImage = (PFN_vkCreateImage)vulkanLib.LoadFunc("vkCreateImage");
		staticPfn_vkDestroyImage = (PFN_vkDestroyImage)vulkanLib.LoadFunc("vkDestroyImage");
		staticPfn_vkGetImageSubresourceLayout = (PFN_vkGetImageSubresourceLayout)vulkanLib.LoadFunc("vkGetImageSubresourceLayout");
		staticPfn_vkCreateImageView = (PFN_vkCreateImageView)vulkanLib.LoadFunc("vkCreateImageView");
		staticPfn_vkDestroyImageView = (PFN_vkDestroyImageView)vulkanLib.LoadFunc("vkDestroyImageView");
		staticPfn_vkCreateShaderModule = (PFN_vkCreateShaderModule)vulkanLib.LoadFunc("vkCreateShaderModule");
		staticPfn_vkDestroyShaderModule = (PFN_vkDestroyShaderModule)vulkanLib.LoadFunc("vkDestroyShaderModule");
		staticPfn_vkCreatePipelineCache = (PFN_vkCreatePipelineCache)vulkanLib.LoadFunc("vkCreatePipelineCache");
		staticPfn_vkDestroyPipelineCache = (PFN_vkDestroyPipelineCache)vulkanLib.LoadFunc("vkDestroyPipelineCache");
		staticPfn_vkGetPipelineCacheData = (PFN_vkGetPipelineCacheData)vulkanLib.LoadFunc("vkGetPipelineCacheData");
		staticPfn_vkMergePipelineCaches = (PFN_vkMergePipelineCaches)vulkanLib.LoadFunc("vkMergePipelineCaches");
		staticPfn_vkCreateGraphicsPipelines = (PFN_vkCreateGraphicsPipelines)vulkanLib.LoadFunc("vkCreateGraphicsPipelines");
		staticPfn_vkCreateComputePipelines = (PFN_vkCreateComputePipelines)vulkanLib.LoadFunc("vkCreateComputePipelines");
#endif
#if defined(VK_HUAWEI_subpass_shading) && (defined(VK_KHR_create_renderpass2) && defined(VK_KHR_synchronization2))
		staticPfn_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = (PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI)vulkanLib.LoadFunc("vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI");
#endif
#if defined(VK_VERSION_1_0)
		staticPfn_vkDestroyPipeline = (PFN_vkDestroyPipeline)vulkanLib.LoadFunc("vkDestroyPipeline");
		staticPfn_vkCreatePipelineLayout = (PFN_vkCreatePipelineLayout)vulkanLib.LoadFunc("vkCreatePipelineLayout");
		staticPfn_vkDestroyPipelineLayout = (PFN_vkDestroyPipelineLayout)vulkanLib.LoadFunc("vkDestroyPipelineLayout");
		staticPfn_vkCreateSampler = (PFN_vkCreateSampler)vulkanLib.LoadFunc("vkCreateSampler");
		staticPfn_vkDestroySampler = (PFN_vkDestroySampler)vulkanLib.LoadFunc("vkDestroySampler");
		staticPfn_vkCreateDescriptorSetLayout = (PFN_vkCreateDescriptorSetLayout)vulkanLib.LoadFunc("vkCreateDescriptorSetLayout");
		staticPfn_vkDestroyDescriptorSetLayout = (PFN_vkDestroyDescriptorSetLayout)vulkanLib.LoadFunc("vkDestroyDescriptorSetLayout");
		staticPfn_vkCreateDescriptorPool = (PFN_vkCreateDescriptorPool)vulkanLib.LoadFunc("vkCreateDescriptorPool");
		staticPfn_vkDestroyDescriptorPool = (PFN_vkDestroyDescriptorPool)vulkanLib.LoadFunc("vkDestroyDescriptorPool");
		staticPfn_vkResetDescriptorPool = (PFN_vkResetDescriptorPool)vulkanLib.LoadFunc("vkResetDescriptorPool");
		staticPfn_vkAllocateDescriptorSets = (PFN_vkAllocateDescriptorSets)vulkanLib.LoadFunc("vkAllocateDescriptorSets");
		staticPfn_vkFreeDescriptorSets = (PFN_vkFreeDescriptorSets)vulkanLib.LoadFunc("vkFreeDescriptorSets");
		staticPfn_vkUpdateDescriptorSets = (PFN_vkUpdateDescriptorSets)vulkanLib.LoadFunc("vkUpdateDescriptorSets");
		staticPfn_vkCreateFramebuffer = (PFN_vkCreateFramebuffer)vulkanLib.LoadFunc("vkCreateFramebuffer");
		staticPfn_vkDestroyFramebuffer = (PFN_vkDestroyFramebuffer)vulkanLib.LoadFunc("vkDestroyFramebuffer");
		staticPfn_vkCreateRenderPass = (PFN_vkCreateRenderPass)vulkanLib.LoadFunc("vkCreateRenderPass");
		staticPfn_vkDestroyRenderPass = (PFN_vkDestroyRenderPass)vulkanLib.LoadFunc("vkDestroyRenderPass");
		staticPfn_vkGetRenderAreaGranularity = (PFN_vkGetRenderAreaGranularity)vulkanLib.LoadFunc("vkGetRenderAreaGranularity");
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
		staticPfn_vkGetRenderingAreaGranularityKHR = (PFN_vkGetRenderingAreaGranularityKHR)vulkanLib.LoadFunc("vkGetRenderingAreaGranularityKHR");
#endif
#if defined(VK_VERSION_1_0)
		staticPfn_vkCreateCommandPool = (PFN_vkCreateCommandPool)vulkanLib.LoadFunc("vkCreateCommandPool");
		staticPfn_vkDestroyCommandPool = (PFN_vkDestroyCommandPool)vulkanLib.LoadFunc("vkDestroyCommandPool");
		staticPfn_vkResetCommandPool = (PFN_vkResetCommandPool)vulkanLib.LoadFunc("vkResetCommandPool");
		staticPfn_vkAllocateCommandBuffers = (PFN_vkAllocateCommandBuffers)vulkanLib.LoadFunc("vkAllocateCommandBuffers");
		staticPfn_vkFreeCommandBuffers = (PFN_vkFreeCommandBuffers)vulkanLib.LoadFunc("vkFreeCommandBuffers");
		staticPfn_vkBeginCommandBuffer = (PFN_vkBeginCommandBuffer)vulkanLib.LoadFunc("vkBeginCommandBuffer");
		staticPfn_vkEndCommandBuffer = (PFN_vkEndCommandBuffer)vulkanLib.LoadFunc("vkEndCommandBuffer");
		staticPfn_vkResetCommandBuffer = (PFN_vkResetCommandBuffer)vulkanLib.LoadFunc("vkResetCommandBuffer");
		staticPfn_vkCmdBindPipeline = (PFN_vkCmdBindPipeline)vulkanLib.LoadFunc("vkCmdBindPipeline");
#endif
#if defined(VK_EXT_attachment_feedback_loop_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_EXT_attachment_feedback_loop_layout))
		staticPfn_vkCmdSetAttachmentFeedbackLoopEnableEXT = (PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT)vulkanLib.LoadFunc("vkCmdSetAttachmentFeedbackLoopEnableEXT");
#endif
#if defined(VK_VERSION_1_0)
		staticPfn_vkCmdSetViewport = (PFN_vkCmdSetViewport)vulkanLib.LoadFunc("vkCmdSetViewport");
		staticPfn_vkCmdSetScissor = (PFN_vkCmdSetScissor)vulkanLib.LoadFunc("vkCmdSetScissor");
		staticPfn_vkCmdSetLineWidth = (PFN_vkCmdSetLineWidth)vulkanLib.LoadFunc("vkCmdSetLineWidth");
		staticPfn_vkCmdSetDepthBias = (PFN_vkCmdSetDepthBias)vulkanLib.LoadFunc("vkCmdSetDepthBias");
		staticPfn_vkCmdSetBlendConstants = (PFN_vkCmdSetBlendConstants)vulkanLib.LoadFunc("vkCmdSetBlendConstants");
		staticPfn_vkCmdSetDepthBounds = (PFN_vkCmdSetDepthBounds)vulkanLib.LoadFunc("vkCmdSetDepthBounds");
		staticPfn_vkCmdSetStencilCompareMask = (PFN_vkCmdSetStencilCompareMask)vulkanLib.LoadFunc("vkCmdSetStencilCompareMask");
		staticPfn_vkCmdSetStencilWriteMask = (PFN_vkCmdSetStencilWriteMask)vulkanLib.LoadFunc("vkCmdSetStencilWriteMask");
		staticPfn_vkCmdSetStencilReference = (PFN_vkCmdSetStencilReference)vulkanLib.LoadFunc("vkCmdSetStencilReference");
		staticPfn_vkCmdBindDescriptorSets = (PFN_vkCmdBindDescriptorSets)vulkanLib.LoadFunc("vkCmdBindDescriptorSets");
		staticPfn_vkCmdBindIndexBuffer = (PFN_vkCmdBindIndexBuffer)vulkanLib.LoadFunc("vkCmdBindIndexBuffer");
		staticPfn_vkCmdBindVertexBuffers = (PFN_vkCmdBindVertexBuffers)vulkanLib.LoadFunc("vkCmdBindVertexBuffers");
		staticPfn_vkCmdDraw = (PFN_vkCmdDraw)vulkanLib.LoadFunc("vkCmdDraw");
		staticPfn_vkCmdDrawIndexed = (PFN_vkCmdDrawIndexed)vulkanLib.LoadFunc("vkCmdDrawIndexed");
#endif
#if defined(VK_EXT_multi_draw) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkCmdDrawMultiEXT = (PFN_vkCmdDrawMultiEXT)vulkanLib.LoadFunc("vkCmdDrawMultiEXT");
		staticPfn_vkCmdDrawMultiIndexedEXT = (PFN_vkCmdDrawMultiIndexedEXT)vulkanLib.LoadFunc("vkCmdDrawMultiIndexedEXT");
#endif
#if defined(VK_VERSION_1_0)
		staticPfn_vkCmdDrawIndirect = (PFN_vkCmdDrawIndirect)vulkanLib.LoadFunc("vkCmdDrawIndirect");
		staticPfn_vkCmdDrawIndexedIndirect = (PFN_vkCmdDrawIndexedIndirect)vulkanLib.LoadFunc("vkCmdDrawIndexedIndirect");
		staticPfn_vkCmdDispatch = (PFN_vkCmdDispatch)vulkanLib.LoadFunc("vkCmdDispatch");
		staticPfn_vkCmdDispatchIndirect = (PFN_vkCmdDispatchIndirect)vulkanLib.LoadFunc("vkCmdDispatchIndirect");
#endif
#if defined(VK_HUAWEI_subpass_shading) && (defined(VK_KHR_create_renderpass2) && defined(VK_KHR_synchronization2))
		staticPfn_vkCmdSubpassShadingHUAWEI = (PFN_vkCmdSubpassShadingHUAWEI)vulkanLib.LoadFunc("vkCmdSubpassShadingHUAWEI");
#endif
#if defined(VK_HUAWEI_cluster_culling_shader) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkCmdDrawClusterHUAWEI = (PFN_vkCmdDrawClusterHUAWEI)vulkanLib.LoadFunc("vkCmdDrawClusterHUAWEI");
		staticPfn_vkCmdDrawClusterIndirectHUAWEI = (PFN_vkCmdDrawClusterIndirectHUAWEI)vulkanLib.LoadFunc("vkCmdDrawClusterIndirectHUAWEI");
#endif
#if defined(VK_NV_device_generated_commands_compute) && (defined(VK_NV_device_generated_commands))
		staticPfn_vkCmdUpdatePipelineIndirectBufferNV = (PFN_vkCmdUpdatePipelineIndirectBufferNV)vulkanLib.LoadFunc("vkCmdUpdatePipelineIndirectBufferNV");
#endif
#if defined(VK_VERSION_1_0)
		staticPfn_vkCmdCopyBuffer = (PFN_vkCmdCopyBuffer)vulkanLib.LoadFunc("vkCmdCopyBuffer");
		staticPfn_vkCmdCopyImage = (PFN_vkCmdCopyImage)vulkanLib.LoadFunc("vkCmdCopyImage");
		staticPfn_vkCmdBlitImage = (PFN_vkCmdBlitImage)vulkanLib.LoadFunc("vkCmdBlitImage");
		staticPfn_vkCmdCopyBufferToImage = (PFN_vkCmdCopyBufferToImage)vulkanLib.LoadFunc("vkCmdCopyBufferToImage");
		staticPfn_vkCmdCopyImageToBuffer = (PFN_vkCmdCopyImageToBuffer)vulkanLib.LoadFunc("vkCmdCopyImageToBuffer");
#endif
#if defined(VK_NV_copy_memory_indirect) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address))
		staticPfn_vkCmdCopyMemoryIndirectNV = (PFN_vkCmdCopyMemoryIndirectNV)vulkanLib.LoadFunc("vkCmdCopyMemoryIndirectNV");
		staticPfn_vkCmdCopyMemoryToImageIndirectNV = (PFN_vkCmdCopyMemoryToImageIndirectNV)vulkanLib.LoadFunc("vkCmdCopyMemoryToImageIndirectNV");
#endif
#if defined(VK_VERSION_1_0)
		staticPfn_vkCmdUpdateBuffer = (PFN_vkCmdUpdateBuffer)vulkanLib.LoadFunc("vkCmdUpdateBuffer");
		staticPfn_vkCmdFillBuffer = (PFN_vkCmdFillBuffer)vulkanLib.LoadFunc("vkCmdFillBuffer");
		staticPfn_vkCmdClearColorImage = (PFN_vkCmdClearColorImage)vulkanLib.LoadFunc("vkCmdClearColorImage");
		staticPfn_vkCmdClearDepthStencilImage = (PFN_vkCmdClearDepthStencilImage)vulkanLib.LoadFunc("vkCmdClearDepthStencilImage");
		staticPfn_vkCmdClearAttachments = (PFN_vkCmdClearAttachments)vulkanLib.LoadFunc("vkCmdClearAttachments");
		staticPfn_vkCmdResolveImage = (PFN_vkCmdResolveImage)vulkanLib.LoadFunc("vkCmdResolveImage");
		staticPfn_vkCmdSetEvent = (PFN_vkCmdSetEvent)vulkanLib.LoadFunc("vkCmdSetEvent");
		staticPfn_vkCmdResetEvent = (PFN_vkCmdResetEvent)vulkanLib.LoadFunc("vkCmdResetEvent");
		staticPfn_vkCmdWaitEvents = (PFN_vkCmdWaitEvents)vulkanLib.LoadFunc("vkCmdWaitEvents");
		staticPfn_vkCmdPipelineBarrier = (PFN_vkCmdPipelineBarrier)vulkanLib.LoadFunc("vkCmdPipelineBarrier");
		staticPfn_vkCmdBeginQuery = (PFN_vkCmdBeginQuery)vulkanLib.LoadFunc("vkCmdBeginQuery");
		staticPfn_vkCmdEndQuery = (PFN_vkCmdEndQuery)vulkanLib.LoadFunc("vkCmdEndQuery");
#endif
#if defined(VK_EXT_conditional_rendering) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkCmdBeginConditionalRenderingEXT = (PFN_vkCmdBeginConditionalRenderingEXT)vulkanLib.LoadFunc("vkCmdBeginConditionalRenderingEXT");
		staticPfn_vkCmdEndConditionalRenderingEXT = (PFN_vkCmdEndConditionalRenderingEXT)vulkanLib.LoadFunc("vkCmdEndConditionalRenderingEXT");
#endif
#if defined(VK_VERSION_1_0)
		staticPfn_vkCmdResetQueryPool = (PFN_vkCmdResetQueryPool)vulkanLib.LoadFunc("vkCmdResetQueryPool");
		staticPfn_vkCmdWriteTimestamp = (PFN_vkCmdWriteTimestamp)vulkanLib.LoadFunc("vkCmdWriteTimestamp");
		staticPfn_vkCmdCopyQueryPoolResults = (PFN_vkCmdCopyQueryPoolResults)vulkanLib.LoadFunc("vkCmdCopyQueryPoolResults");
		staticPfn_vkCmdPushConstants = (PFN_vkCmdPushConstants)vulkanLib.LoadFunc("vkCmdPushConstants");
		staticPfn_vkCmdBeginRenderPass = (PFN_vkCmdBeginRenderPass)vulkanLib.LoadFunc("vkCmdBeginRenderPass");
		staticPfn_vkCmdNextSubpass = (PFN_vkCmdNextSubpass)vulkanLib.LoadFunc("vkCmdNextSubpass");
		staticPfn_vkCmdEndRenderPass = (PFN_vkCmdEndRenderPass)vulkanLib.LoadFunc("vkCmdEndRenderPass");
		staticPfn_vkCmdExecuteCommands = (PFN_vkCmdExecuteCommands)vulkanLib.LoadFunc("vkCmdExecuteCommands");
#endif
#if defined(VK_KHR_android_surface) && (defined(VK_KHR_surface))
		staticPfn_vkCreateAndroidSurfaceKHR = (PFN_vkCreateAndroidSurfaceKHR)vulkanLib.LoadFunc("vkCreateAndroidSurfaceKHR");
#endif
#if defined(VK_KHR_display) && (defined(VK_KHR_surface))
		staticPfn_vkGetPhysicalDeviceDisplayPropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPropertiesKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceDisplayPropertiesKHR");
		staticPfn_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
		staticPfn_vkGetDisplayPlaneSupportedDisplaysKHR = (PFN_vkGetDisplayPlaneSupportedDisplaysKHR)vulkanLib.LoadFunc("vkGetDisplayPlaneSupportedDisplaysKHR");
		staticPfn_vkGetDisplayModePropertiesKHR = (PFN_vkGetDisplayModePropertiesKHR)vulkanLib.LoadFunc("vkGetDisplayModePropertiesKHR");
		staticPfn_vkCreateDisplayModeKHR = (PFN_vkCreateDisplayModeKHR)vulkanLib.LoadFunc("vkCreateDisplayModeKHR");
		staticPfn_vkGetDisplayPlaneCapabilitiesKHR = (PFN_vkGetDisplayPlaneCapabilitiesKHR)vulkanLib.LoadFunc("vkGetDisplayPlaneCapabilitiesKHR");
		staticPfn_vkCreateDisplayPlaneSurfaceKHR = (PFN_vkCreateDisplayPlaneSurfaceKHR)vulkanLib.LoadFunc("vkCreateDisplayPlaneSurfaceKHR");
#endif
#if defined(VK_KHR_display_swapchain) && (defined(VK_KHR_swapchain) && defined(VK_KHR_display))
		staticPfn_vkCreateSharedSwapchainsKHR = (PFN_vkCreateSharedSwapchainsKHR)vulkanLib.LoadFunc("vkCreateSharedSwapchainsKHR");
#endif
#if defined(VK_KHR_surface)
		staticPfn_vkDestroySurfaceKHR = (PFN_vkDestroySurfaceKHR)vulkanLib.LoadFunc("vkDestroySurfaceKHR");
		staticPfn_vkGetPhysicalDeviceSurfaceSupportKHR = (PFN_vkGetPhysicalDeviceSurfaceSupportKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceSurfaceSupportKHR");
		staticPfn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
		staticPfn_vkGetPhysicalDeviceSurfaceFormatsKHR = (PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceSurfaceFormatsKHR");
		staticPfn_vkGetPhysicalDeviceSurfacePresentModesKHR = (PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceSurfacePresentModesKHR");
#endif
#if defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))
		staticPfn_vkCreateSwapchainKHR = (PFN_vkCreateSwapchainKHR)vulkanLib.LoadFunc("vkCreateSwapchainKHR");
		staticPfn_vkDestroySwapchainKHR = (PFN_vkDestroySwapchainKHR)vulkanLib.LoadFunc("vkDestroySwapchainKHR");
		staticPfn_vkGetSwapchainImagesKHR = (PFN_vkGetSwapchainImagesKHR)vulkanLib.LoadFunc("vkGetSwapchainImagesKHR");
		staticPfn_vkAcquireNextImageKHR = (PFN_vkAcquireNextImageKHR)vulkanLib.LoadFunc("vkAcquireNextImageKHR");
		staticPfn_vkQueuePresentKHR = (PFN_vkQueuePresentKHR)vulkanLib.LoadFunc("vkQueuePresentKHR");
#endif
#if defined(VK_NN_vi_surface) && (defined(VK_KHR_surface))
		staticPfn_vkCreateViSurfaceNN = (PFN_vkCreateViSurfaceNN)vulkanLib.LoadFunc("vkCreateViSurfaceNN");
#endif
#if defined(VK_KHR_wayland_surface) && (defined(VK_KHR_surface))
		staticPfn_vkCreateWaylandSurfaceKHR = (PFN_vkCreateWaylandSurfaceKHR)vulkanLib.LoadFunc("vkCreateWaylandSurfaceKHR");
		staticPfn_vkGetPhysicalDeviceWaylandPresentationSupportKHR = (PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceWaylandPresentationSupportKHR");
#endif
#if defined(VK_KHR_win32_surface) && (defined(VK_KHR_surface))
		staticPfn_vkCreateWin32SurfaceKHR = (PFN_vkCreateWin32SurfaceKHR)vulkanLib.LoadFunc("vkCreateWin32SurfaceKHR");
		staticPfn_vkGetPhysicalDeviceWin32PresentationSupportKHR = (PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceWin32PresentationSupportKHR");
#endif
#if defined(VK_KHR_xlib_surface) && (defined(VK_KHR_surface))
		staticPfn_vkCreateXlibSurfaceKHR = (PFN_vkCreateXlibSurfaceKHR)vulkanLib.LoadFunc("vkCreateXlibSurfaceKHR");
		staticPfn_vkGetPhysicalDeviceXlibPresentationSupportKHR = (PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceXlibPresentationSupportKHR");
#endif
#if defined(VK_KHR_xcb_surface) && (defined(VK_KHR_surface))
		staticPfn_vkCreateXcbSurfaceKHR = (PFN_vkCreateXcbSurfaceKHR)vulkanLib.LoadFunc("vkCreateXcbSurfaceKHR");
		staticPfn_vkGetPhysicalDeviceXcbPresentationSupportKHR = (PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceXcbPresentationSupportKHR");
#endif
#if defined(VK_EXT_directfb_surface) && (defined(VK_KHR_surface))
		staticPfn_vkCreateDirectFBSurfaceEXT = (PFN_vkCreateDirectFBSurfaceEXT)vulkanLib.LoadFunc("vkCreateDirectFBSurfaceEXT");
		staticPfn_vkGetPhysicalDeviceDirectFBPresentationSupportEXT = (PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT)vulkanLib.LoadFunc("vkGetPhysicalDeviceDirectFBPresentationSupportEXT");
#endif
#if defined(VK_FUCHSIA_imagepipe_surface) && (defined(VK_KHR_surface))
		staticPfn_vkCreateImagePipeSurfaceFUCHSIA = (PFN_vkCreateImagePipeSurfaceFUCHSIA)vulkanLib.LoadFunc("vkCreateImagePipeSurfaceFUCHSIA");
#endif
#if defined(VK_GGP_stream_descriptor_surface) && (defined(VK_KHR_surface))
		staticPfn_vkCreateStreamDescriptorSurfaceGGP = (PFN_vkCreateStreamDescriptorSurfaceGGP)vulkanLib.LoadFunc("vkCreateStreamDescriptorSurfaceGGP");
#endif
#if defined(VK_QNX_screen_surface) && (defined(VK_KHR_surface))
		staticPfn_vkCreateScreenSurfaceQNX = (PFN_vkCreateScreenSurfaceQNX)vulkanLib.LoadFunc("vkCreateScreenSurfaceQNX");
		staticPfn_vkGetPhysicalDeviceScreenPresentationSupportQNX = (PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX)vulkanLib.LoadFunc("vkGetPhysicalDeviceScreenPresentationSupportQNX");
#endif
#if defined(VK_EXT_debug_report)
		staticPfn_vkCreateDebugReportCallbackEXT = (PFN_vkCreateDebugReportCallbackEXT)vulkanLib.LoadFunc("vkCreateDebugReportCallbackEXT");
		staticPfn_vkDestroyDebugReportCallbackEXT = (PFN_vkDestroyDebugReportCallbackEXT)vulkanLib.LoadFunc("vkDestroyDebugReportCallbackEXT");
		staticPfn_vkDebugReportMessageEXT = (PFN_vkDebugReportMessageEXT)vulkanLib.LoadFunc("vkDebugReportMessageEXT");
#endif
#if defined(VK_EXT_debug_marker) && (defined(VK_EXT_debug_report))
		staticPfn_vkDebugMarkerSetObjectNameEXT = (PFN_vkDebugMarkerSetObjectNameEXT)vulkanLib.LoadFunc("vkDebugMarkerSetObjectNameEXT");
		staticPfn_vkDebugMarkerSetObjectTagEXT = (PFN_vkDebugMarkerSetObjectTagEXT)vulkanLib.LoadFunc("vkDebugMarkerSetObjectTagEXT");
		staticPfn_vkCmdDebugMarkerBeginEXT = (PFN_vkCmdDebugMarkerBeginEXT)vulkanLib.LoadFunc("vkCmdDebugMarkerBeginEXT");
		staticPfn_vkCmdDebugMarkerEndEXT = (PFN_vkCmdDebugMarkerEndEXT)vulkanLib.LoadFunc("vkCmdDebugMarkerEndEXT");
		staticPfn_vkCmdDebugMarkerInsertEXT = (PFN_vkCmdDebugMarkerInsertEXT)vulkanLib.LoadFunc("vkCmdDebugMarkerInsertEXT");
#endif
#if defined(VK_NV_external_memory_capabilities)
		staticPfn_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = (PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV)vulkanLib.LoadFunc("vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
#endif
#if defined(VK_NV_external_memory_win32) && (defined(VK_NV_external_memory))
		staticPfn_vkGetMemoryWin32HandleNV = (PFN_vkGetMemoryWin32HandleNV)vulkanLib.LoadFunc("vkGetMemoryWin32HandleNV");
#endif
#if defined(VK_NV_device_generated_commands) && (defined(VK_VERSION_1_1) && defined(VK_KHR_buffer_device_address))
		staticPfn_vkCmdExecuteGeneratedCommandsNV = (PFN_vkCmdExecuteGeneratedCommandsNV)vulkanLib.LoadFunc("vkCmdExecuteGeneratedCommandsNV");
		staticPfn_vkCmdPreprocessGeneratedCommandsNV = (PFN_vkCmdPreprocessGeneratedCommandsNV)vulkanLib.LoadFunc("vkCmdPreprocessGeneratedCommandsNV");
		staticPfn_vkCmdBindPipelineShaderGroupNV = (PFN_vkCmdBindPipelineShaderGroupNV)vulkanLib.LoadFunc("vkCmdBindPipelineShaderGroupNV");
		staticPfn_vkGetGeneratedCommandsMemoryRequirementsNV = (PFN_vkGetGeneratedCommandsMemoryRequirementsNV)vulkanLib.LoadFunc("vkGetGeneratedCommandsMemoryRequirementsNV");
		staticPfn_vkCreateIndirectCommandsLayoutNV = (PFN_vkCreateIndirectCommandsLayoutNV)vulkanLib.LoadFunc("vkCreateIndirectCommandsLayoutNV");
		staticPfn_vkDestroyIndirectCommandsLayoutNV = (PFN_vkDestroyIndirectCommandsLayoutNV)vulkanLib.LoadFunc("vkDestroyIndirectCommandsLayoutNV");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkGetPhysicalDeviceFeatures2 = (PFN_vkGetPhysicalDeviceFeatures2)vulkanLib.LoadFunc("vkGetPhysicalDeviceFeatures2");
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		staticPfn_vkGetPhysicalDeviceFeatures2KHR = (PFN_vkGetPhysicalDeviceFeatures2KHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceFeatures2KHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkGetPhysicalDeviceProperties2 = (PFN_vkGetPhysicalDeviceProperties2)vulkanLib.LoadFunc("vkGetPhysicalDeviceProperties2");
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		staticPfn_vkGetPhysicalDeviceProperties2KHR = (PFN_vkGetPhysicalDeviceProperties2KHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceProperties2KHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkGetPhysicalDeviceFormatProperties2 = (PFN_vkGetPhysicalDeviceFormatProperties2)vulkanLib.LoadFunc("vkGetPhysicalDeviceFormatProperties2");
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		staticPfn_vkGetPhysicalDeviceFormatProperties2KHR = (PFN_vkGetPhysicalDeviceFormatProperties2KHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceFormatProperties2KHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkGetPhysicalDeviceImageFormatProperties2 = (PFN_vkGetPhysicalDeviceImageFormatProperties2)vulkanLib.LoadFunc("vkGetPhysicalDeviceImageFormatProperties2");
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		staticPfn_vkGetPhysicalDeviceImageFormatProperties2KHR = (PFN_vkGetPhysicalDeviceImageFormatProperties2KHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceImageFormatProperties2KHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkGetPhysicalDeviceQueueFamilyProperties2 = (PFN_vkGetPhysicalDeviceQueueFamilyProperties2)vulkanLib.LoadFunc("vkGetPhysicalDeviceQueueFamilyProperties2");
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		staticPfn_vkGetPhysicalDeviceQueueFamilyProperties2KHR = (PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceQueueFamilyProperties2KHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkGetPhysicalDeviceMemoryProperties2 = (PFN_vkGetPhysicalDeviceMemoryProperties2)vulkanLib.LoadFunc("vkGetPhysicalDeviceMemoryProperties2");
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		staticPfn_vkGetPhysicalDeviceMemoryProperties2KHR = (PFN_vkGetPhysicalDeviceMemoryProperties2KHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceMemoryProperties2KHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkGetPhysicalDeviceSparseImageFormatProperties2 = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties2)vulkanLib.LoadFunc("vkGetPhysicalDeviceSparseImageFormatProperties2");
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		staticPfn_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
#endif
#if defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkCmdPushDescriptorSetKHR = (PFN_vkCmdPushDescriptorSetKHR)vulkanLib.LoadFunc("vkCmdPushDescriptorSetKHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkTrimCommandPool = (PFN_vkTrimCommandPool)vulkanLib.LoadFunc("vkTrimCommandPool");
#endif
#if defined(VK_KHR_maintenance1)
		staticPfn_vkTrimCommandPoolKHR = (PFN_vkTrimCommandPoolKHR)vulkanLib.LoadFunc("vkTrimCommandPoolKHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkGetPhysicalDeviceExternalBufferProperties = (PFN_vkGetPhysicalDeviceExternalBufferProperties)vulkanLib.LoadFunc("vkGetPhysicalDeviceExternalBufferProperties");
#endif
#if defined(VK_KHR_external_memory_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkGetPhysicalDeviceExternalBufferPropertiesKHR = (PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceExternalBufferPropertiesKHR");
#endif
#if defined(VK_KHR_external_memory_win32) && (defined(VK_KHR_external_memory))
		staticPfn_vkGetMemoryWin32HandleKHR = (PFN_vkGetMemoryWin32HandleKHR)vulkanLib.LoadFunc("vkGetMemoryWin32HandleKHR");
		staticPfn_vkGetMemoryWin32HandlePropertiesKHR = (PFN_vkGetMemoryWin32HandlePropertiesKHR)vulkanLib.LoadFunc("vkGetMemoryWin32HandlePropertiesKHR");
#endif
#if defined(VK_KHR_external_memory_fd) && (defined(VK_KHR_external_memory) || defined(VK_VERSION_1_1))
		staticPfn_vkGetMemoryFdKHR = (PFN_vkGetMemoryFdKHR)vulkanLib.LoadFunc("vkGetMemoryFdKHR");
		staticPfn_vkGetMemoryFdPropertiesKHR = (PFN_vkGetMemoryFdPropertiesKHR)vulkanLib.LoadFunc("vkGetMemoryFdPropertiesKHR");
#endif
#if defined(VK_FUCHSIA_external_memory) && (defined(VK_KHR_external_memory_capabilities) && defined(VK_KHR_external_memory))
		staticPfn_vkGetMemoryZirconHandleFUCHSIA = (PFN_vkGetMemoryZirconHandleFUCHSIA)vulkanLib.LoadFunc("vkGetMemoryZirconHandleFUCHSIA");
		staticPfn_vkGetMemoryZirconHandlePropertiesFUCHSIA = (PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA)vulkanLib.LoadFunc("vkGetMemoryZirconHandlePropertiesFUCHSIA");
#endif
#if defined(VK_NV_external_memory_rdma) && (defined(VK_KHR_external_memory))
		staticPfn_vkGetMemoryRemoteAddressNV = (PFN_vkGetMemoryRemoteAddressNV)vulkanLib.LoadFunc("vkGetMemoryRemoteAddressNV");
#endif
#if defined(VK_NV_external_memory_sci_buf) && (defined(VK_VERSION_1_1))
		staticPfn_vkGetMemorySciBufNV = (PFN_vkGetMemorySciBufNV)vulkanLib.LoadFunc("vkGetMemorySciBufNV");
		staticPfn_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = (PFN_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV)vulkanLib.LoadFunc("vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV");
		staticPfn_vkGetPhysicalDeviceSciBufAttributesNV = (PFN_vkGetPhysicalDeviceSciBufAttributesNV)vulkanLib.LoadFunc("vkGetPhysicalDeviceSciBufAttributesNV");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkGetPhysicalDeviceExternalSemaphoreProperties = (PFN_vkGetPhysicalDeviceExternalSemaphoreProperties)vulkanLib.LoadFunc("vkGetPhysicalDeviceExternalSemaphoreProperties");
#endif
#if defined(VK_KHR_external_semaphore_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = (PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
#endif
#if defined(VK_KHR_external_semaphore_win32) && (defined(VK_KHR_external_semaphore))
		staticPfn_vkGetSemaphoreWin32HandleKHR = (PFN_vkGetSemaphoreWin32HandleKHR)vulkanLib.LoadFunc("vkGetSemaphoreWin32HandleKHR");
		staticPfn_vkImportSemaphoreWin32HandleKHR = (PFN_vkImportSemaphoreWin32HandleKHR)vulkanLib.LoadFunc("vkImportSemaphoreWin32HandleKHR");
#endif
#if defined(VK_KHR_external_semaphore_fd) && (defined(VK_KHR_external_semaphore) || defined(VK_VERSION_1_1))
		staticPfn_vkGetSemaphoreFdKHR = (PFN_vkGetSemaphoreFdKHR)vulkanLib.LoadFunc("vkGetSemaphoreFdKHR");
		staticPfn_vkImportSemaphoreFdKHR = (PFN_vkImportSemaphoreFdKHR)vulkanLib.LoadFunc("vkImportSemaphoreFdKHR");
#endif
#if defined(VK_FUCHSIA_external_semaphore) && (defined(VK_KHR_external_semaphore_capabilities) && defined(VK_KHR_external_semaphore))
		staticPfn_vkGetSemaphoreZirconHandleFUCHSIA = (PFN_vkGetSemaphoreZirconHandleFUCHSIA)vulkanLib.LoadFunc("vkGetSemaphoreZirconHandleFUCHSIA");
		staticPfn_vkImportSemaphoreZirconHandleFUCHSIA = (PFN_vkImportSemaphoreZirconHandleFUCHSIA)vulkanLib.LoadFunc("vkImportSemaphoreZirconHandleFUCHSIA");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkGetPhysicalDeviceExternalFenceProperties = (PFN_vkGetPhysicalDeviceExternalFenceProperties)vulkanLib.LoadFunc("vkGetPhysicalDeviceExternalFenceProperties");
#endif
#if defined(VK_KHR_external_fence_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkGetPhysicalDeviceExternalFencePropertiesKHR = (PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceExternalFencePropertiesKHR");
#endif
#if defined(VK_KHR_external_fence_win32) && (defined(VK_KHR_external_fence))
		staticPfn_vkGetFenceWin32HandleKHR = (PFN_vkGetFenceWin32HandleKHR)vulkanLib.LoadFunc("vkGetFenceWin32HandleKHR");
		staticPfn_vkImportFenceWin32HandleKHR = (PFN_vkImportFenceWin32HandleKHR)vulkanLib.LoadFunc("vkImportFenceWin32HandleKHR");
#endif
#if defined(VK_KHR_external_fence_fd) && (defined(VK_KHR_external_fence) || defined(VK_VERSION_1_1))
		staticPfn_vkGetFenceFdKHR = (PFN_vkGetFenceFdKHR)vulkanLib.LoadFunc("vkGetFenceFdKHR");
		staticPfn_vkImportFenceFdKHR = (PFN_vkImportFenceFdKHR)vulkanLib.LoadFunc("vkImportFenceFdKHR");
#endif
#if (defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))) || (defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1)))
		staticPfn_vkGetFenceSciSyncFenceNV = (PFN_vkGetFenceSciSyncFenceNV)vulkanLib.LoadFunc("vkGetFenceSciSyncFenceNV");
		staticPfn_vkGetFenceSciSyncObjNV = (PFN_vkGetFenceSciSyncObjNV)vulkanLib.LoadFunc("vkGetFenceSciSyncObjNV");
		staticPfn_vkImportFenceSciSyncFenceNV = (PFN_vkImportFenceSciSyncFenceNV)vulkanLib.LoadFunc("vkImportFenceSciSyncFenceNV");
		staticPfn_vkImportFenceSciSyncObjNV = (PFN_vkImportFenceSciSyncObjNV)vulkanLib.LoadFunc("vkImportFenceSciSyncObjNV");
#endif
#if defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))
		staticPfn_vkGetSemaphoreSciSyncObjNV = (PFN_vkGetSemaphoreSciSyncObjNV)vulkanLib.LoadFunc("vkGetSemaphoreSciSyncObjNV");
		staticPfn_vkImportSemaphoreSciSyncObjNV = (PFN_vkImportSemaphoreSciSyncObjNV)vulkanLib.LoadFunc("vkImportSemaphoreSciSyncObjNV");
#endif
#if (defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))) || (defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1)))
		staticPfn_vkGetPhysicalDeviceSciSyncAttributesNV = (PFN_vkGetPhysicalDeviceSciSyncAttributesNV)vulkanLib.LoadFunc("vkGetPhysicalDeviceSciSyncAttributesNV");
#endif
#if defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1))
		staticPfn_vkCreateSemaphoreSciSyncPoolNV = (PFN_vkCreateSemaphoreSciSyncPoolNV)vulkanLib.LoadFunc("vkCreateSemaphoreSciSyncPoolNV");
		staticPfn_vkDestroySemaphoreSciSyncPoolNV = (PFN_vkDestroySemaphoreSciSyncPoolNV)vulkanLib.LoadFunc("vkDestroySemaphoreSciSyncPoolNV");
#endif
#if defined(VK_EXT_direct_mode_display) && (defined(VK_KHR_display))
		staticPfn_vkReleaseDisplayEXT = (PFN_vkReleaseDisplayEXT)vulkanLib.LoadFunc("vkReleaseDisplayEXT");
#endif
#if defined(VK_EXT_acquire_xlib_display) && (defined(VK_EXT_direct_mode_display))
		staticPfn_vkAcquireXlibDisplayEXT = (PFN_vkAcquireXlibDisplayEXT)vulkanLib.LoadFunc("vkAcquireXlibDisplayEXT");
		staticPfn_vkGetRandROutputDisplayEXT = (PFN_vkGetRandROutputDisplayEXT)vulkanLib.LoadFunc("vkGetRandROutputDisplayEXT");
#endif
#if defined(VK_NV_acquire_winrt_display) && (defined(VK_EXT_direct_mode_display))
		staticPfn_vkAcquireWinrtDisplayNV = (PFN_vkAcquireWinrtDisplayNV)vulkanLib.LoadFunc("vkAcquireWinrtDisplayNV");
		staticPfn_vkGetWinrtDisplayNV = (PFN_vkGetWinrtDisplayNV)vulkanLib.LoadFunc("vkGetWinrtDisplayNV");
#endif
#if defined(VK_EXT_display_control) && (defined(VK_EXT_display_surface_counter) && defined(VK_KHR_swapchain))
		staticPfn_vkDisplayPowerControlEXT = (PFN_vkDisplayPowerControlEXT)vulkanLib.LoadFunc("vkDisplayPowerControlEXT");
		staticPfn_vkRegisterDeviceEventEXT = (PFN_vkRegisterDeviceEventEXT)vulkanLib.LoadFunc("vkRegisterDeviceEventEXT");
		staticPfn_vkRegisterDisplayEventEXT = (PFN_vkRegisterDisplayEventEXT)vulkanLib.LoadFunc("vkRegisterDisplayEventEXT");
		staticPfn_vkGetSwapchainCounterEXT = (PFN_vkGetSwapchainCounterEXT)vulkanLib.LoadFunc("vkGetSwapchainCounterEXT");
#endif
#if defined(VK_EXT_display_surface_counter) && (defined(VK_KHR_display))
		staticPfn_vkGetPhysicalDeviceSurfaceCapabilities2EXT = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT)vulkanLib.LoadFunc("vkGetPhysicalDeviceSurfaceCapabilities2EXT");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkEnumeratePhysicalDeviceGroups = (PFN_vkEnumeratePhysicalDeviceGroups)vulkanLib.LoadFunc("vkEnumeratePhysicalDeviceGroups");
#endif
#if defined(VK_KHR_device_group_creation)
		staticPfn_vkEnumeratePhysicalDeviceGroupsKHR = (PFN_vkEnumeratePhysicalDeviceGroupsKHR)vulkanLib.LoadFunc("vkEnumeratePhysicalDeviceGroupsKHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkGetDeviceGroupPeerMemoryFeatures = (PFN_vkGetDeviceGroupPeerMemoryFeatures)vulkanLib.LoadFunc("vkGetDeviceGroupPeerMemoryFeatures");
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
		staticPfn_vkGetDeviceGroupPeerMemoryFeaturesKHR = (PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR)vulkanLib.LoadFunc("vkGetDeviceGroupPeerMemoryFeaturesKHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkBindBufferMemory2 = (PFN_vkBindBufferMemory2)vulkanLib.LoadFunc("vkBindBufferMemory2");
#endif
#if defined(VK_KHR_bind_memory2)
		staticPfn_vkBindBufferMemory2KHR = (PFN_vkBindBufferMemory2KHR)vulkanLib.LoadFunc("vkBindBufferMemory2KHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkBindImageMemory2 = (PFN_vkBindImageMemory2)vulkanLib.LoadFunc("vkBindImageMemory2");
#endif
#if defined(VK_KHR_bind_memory2)
		staticPfn_vkBindImageMemory2KHR = (PFN_vkBindImageMemory2KHR)vulkanLib.LoadFunc("vkBindImageMemory2KHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkCmdSetDeviceMask = (PFN_vkCmdSetDeviceMask)vulkanLib.LoadFunc("vkCmdSetDeviceMask");
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
		staticPfn_vkCmdSetDeviceMaskKHR = (PFN_vkCmdSetDeviceMaskKHR)vulkanLib.LoadFunc("vkCmdSetDeviceMaskKHR");
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_surface)))
		staticPfn_vkGetDeviceGroupPresentCapabilitiesKHR = (PFN_vkGetDeviceGroupPresentCapabilitiesKHR)vulkanLib.LoadFunc("vkGetDeviceGroupPresentCapabilitiesKHR");
		staticPfn_vkGetDeviceGroupSurfacePresentModesKHR = (PFN_vkGetDeviceGroupSurfacePresentModesKHR)vulkanLib.LoadFunc("vkGetDeviceGroupSurfacePresentModesKHR");
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_swapchain)))
		staticPfn_vkAcquireNextImage2KHR = (PFN_vkAcquireNextImage2KHR)vulkanLib.LoadFunc("vkAcquireNextImage2KHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkCmdDispatchBase = (PFN_vkCmdDispatchBase)vulkanLib.LoadFunc("vkCmdDispatchBase");
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
		staticPfn_vkCmdDispatchBaseKHR = (PFN_vkCmdDispatchBaseKHR)vulkanLib.LoadFunc("vkCmdDispatchBaseKHR");
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_surface)))
		staticPfn_vkGetPhysicalDevicePresentRectanglesKHR = (PFN_vkGetPhysicalDevicePresentRectanglesKHR)vulkanLib.LoadFunc("vkGetPhysicalDevicePresentRectanglesKHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkCreateDescriptorUpdateTemplate = (PFN_vkCreateDescriptorUpdateTemplate)vulkanLib.LoadFunc("vkCreateDescriptorUpdateTemplate");
#endif
#if defined(VK_KHR_descriptor_update_template)
		staticPfn_vkCreateDescriptorUpdateTemplateKHR = (PFN_vkCreateDescriptorUpdateTemplateKHR)vulkanLib.LoadFunc("vkCreateDescriptorUpdateTemplateKHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkDestroyDescriptorUpdateTemplate = (PFN_vkDestroyDescriptorUpdateTemplate)vulkanLib.LoadFunc("vkDestroyDescriptorUpdateTemplate");
#endif
#if defined(VK_KHR_descriptor_update_template)
		staticPfn_vkDestroyDescriptorUpdateTemplateKHR = (PFN_vkDestroyDescriptorUpdateTemplateKHR)vulkanLib.LoadFunc("vkDestroyDescriptorUpdateTemplateKHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkUpdateDescriptorSetWithTemplate = (PFN_vkUpdateDescriptorSetWithTemplate)vulkanLib.LoadFunc("vkUpdateDescriptorSetWithTemplate");
#endif
#if defined(VK_KHR_descriptor_update_template)
		staticPfn_vkUpdateDescriptorSetWithTemplateKHR = (PFN_vkUpdateDescriptorSetWithTemplateKHR)vulkanLib.LoadFunc("vkUpdateDescriptorSetWithTemplateKHR");
#endif
#if (((defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_KHR_descriptor_update_template)))) || ((defined(VK_KHR_descriptor_update_template)) && (defined(VK_KHR_push_descriptor)))
		staticPfn_vkCmdPushDescriptorSetWithTemplateKHR = (PFN_vkCmdPushDescriptorSetWithTemplateKHR)vulkanLib.LoadFunc("vkCmdPushDescriptorSetWithTemplateKHR");
#endif
#if defined(VK_EXT_hdr_metadata) && (defined(VK_KHR_swapchain))
		staticPfn_vkSetHdrMetadataEXT = (PFN_vkSetHdrMetadataEXT)vulkanLib.LoadFunc("vkSetHdrMetadataEXT");
#endif
#if defined(VK_KHR_shared_presentable_image) && (defined(VK_KHR_swapchain) && defined(VK_KHR_get_surface_capabilities2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)))
		staticPfn_vkGetSwapchainStatusKHR = (PFN_vkGetSwapchainStatusKHR)vulkanLib.LoadFunc("vkGetSwapchainStatusKHR");
#endif
#if defined(VK_GOOGLE_display_timing) && (defined(VK_KHR_swapchain))
		staticPfn_vkGetRefreshCycleDurationGOOGLE = (PFN_vkGetRefreshCycleDurationGOOGLE)vulkanLib.LoadFunc("vkGetRefreshCycleDurationGOOGLE");
		staticPfn_vkGetPastPresentationTimingGOOGLE = (PFN_vkGetPastPresentationTimingGOOGLE)vulkanLib.LoadFunc("vkGetPastPresentationTimingGOOGLE");
#endif
#if defined(VK_MVK_ios_surface) && (defined(VK_KHR_surface))
		staticPfn_vkCreateIOSSurfaceMVK = (PFN_vkCreateIOSSurfaceMVK)vulkanLib.LoadFunc("vkCreateIOSSurfaceMVK");
#endif
#if defined(VK_MVK_macos_surface) && (defined(VK_KHR_surface))
		staticPfn_vkCreateMacOSSurfaceMVK = (PFN_vkCreateMacOSSurfaceMVK)vulkanLib.LoadFunc("vkCreateMacOSSurfaceMVK");
#endif
#if defined(VK_EXT_metal_surface) && (defined(VK_KHR_surface))
		staticPfn_vkCreateMetalSurfaceEXT = (PFN_vkCreateMetalSurfaceEXT)vulkanLib.LoadFunc("vkCreateMetalSurfaceEXT");
#endif
#if defined(VK_NV_clip_space_w_scaling)
		staticPfn_vkCmdSetViewportWScalingNV = (PFN_vkCmdSetViewportWScalingNV)vulkanLib.LoadFunc("vkCmdSetViewportWScalingNV");
#endif
#if defined(VK_EXT_discard_rectangles) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkCmdSetDiscardRectangleEXT = (PFN_vkCmdSetDiscardRectangleEXT)vulkanLib.LoadFunc("vkCmdSetDiscardRectangleEXT");
		staticPfn_vkCmdSetDiscardRectangleEnableEXT = (PFN_vkCmdSetDiscardRectangleEnableEXT)vulkanLib.LoadFunc("vkCmdSetDiscardRectangleEnableEXT");
		staticPfn_vkCmdSetDiscardRectangleModeEXT = (PFN_vkCmdSetDiscardRectangleModeEXT)vulkanLib.LoadFunc("vkCmdSetDiscardRectangleModeEXT");
#endif
#if defined(VK_EXT_sample_locations) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkCmdSetSampleLocationsEXT = (PFN_vkCmdSetSampleLocationsEXT)vulkanLib.LoadFunc("vkCmdSetSampleLocationsEXT");
		staticPfn_vkGetPhysicalDeviceMultisamplePropertiesEXT = (PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT)vulkanLib.LoadFunc("vkGetPhysicalDeviceMultisamplePropertiesEXT");
#endif
#if defined(VK_KHR_get_surface_capabilities2) && (defined(VK_KHR_surface))
		staticPfn_vkGetPhysicalDeviceSurfaceCapabilities2KHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceSurfaceCapabilities2KHR");
		staticPfn_vkGetPhysicalDeviceSurfaceFormats2KHR = (PFN_vkGetPhysicalDeviceSurfaceFormats2KHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceSurfaceFormats2KHR");
#endif
#if defined(VK_KHR_get_display_properties2) && (defined(VK_KHR_display))
		staticPfn_vkGetPhysicalDeviceDisplayProperties2KHR = (PFN_vkGetPhysicalDeviceDisplayProperties2KHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceDisplayProperties2KHR");
		staticPfn_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = (PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
		staticPfn_vkGetDisplayModeProperties2KHR = (PFN_vkGetDisplayModeProperties2KHR)vulkanLib.LoadFunc("vkGetDisplayModeProperties2KHR");
		staticPfn_vkGetDisplayPlaneCapabilities2KHR = (PFN_vkGetDisplayPlaneCapabilities2KHR)vulkanLib.LoadFunc("vkGetDisplayPlaneCapabilities2KHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkGetBufferMemoryRequirements2 = (PFN_vkGetBufferMemoryRequirements2)vulkanLib.LoadFunc("vkGetBufferMemoryRequirements2");
#endif
#if defined(VK_KHR_get_memory_requirements2)
		staticPfn_vkGetBufferMemoryRequirements2KHR = (PFN_vkGetBufferMemoryRequirements2KHR)vulkanLib.LoadFunc("vkGetBufferMemoryRequirements2KHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkGetImageMemoryRequirements2 = (PFN_vkGetImageMemoryRequirements2)vulkanLib.LoadFunc("vkGetImageMemoryRequirements2");
#endif
#if defined(VK_KHR_get_memory_requirements2)
		staticPfn_vkGetImageMemoryRequirements2KHR = (PFN_vkGetImageMemoryRequirements2KHR)vulkanLib.LoadFunc("vkGetImageMemoryRequirements2KHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkGetImageSparseMemoryRequirements2 = (PFN_vkGetImageSparseMemoryRequirements2)vulkanLib.LoadFunc("vkGetImageSparseMemoryRequirements2");
#endif
#if defined(VK_KHR_get_memory_requirements2)
		staticPfn_vkGetImageSparseMemoryRequirements2KHR = (PFN_vkGetImageSparseMemoryRequirements2KHR)vulkanLib.LoadFunc("vkGetImageSparseMemoryRequirements2KHR");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkGetDeviceBufferMemoryRequirements = (PFN_vkGetDeviceBufferMemoryRequirements)vulkanLib.LoadFunc("vkGetDeviceBufferMemoryRequirements");
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
		staticPfn_vkGetDeviceBufferMemoryRequirementsKHR = (PFN_vkGetDeviceBufferMemoryRequirementsKHR)vulkanLib.LoadFunc("vkGetDeviceBufferMemoryRequirementsKHR");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkGetDeviceImageMemoryRequirements = (PFN_vkGetDeviceImageMemoryRequirements)vulkanLib.LoadFunc("vkGetDeviceImageMemoryRequirements");
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
		staticPfn_vkGetDeviceImageMemoryRequirementsKHR = (PFN_vkGetDeviceImageMemoryRequirementsKHR)vulkanLib.LoadFunc("vkGetDeviceImageMemoryRequirementsKHR");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkGetDeviceImageSparseMemoryRequirements = (PFN_vkGetDeviceImageSparseMemoryRequirements)vulkanLib.LoadFunc("vkGetDeviceImageSparseMemoryRequirements");
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
		staticPfn_vkGetDeviceImageSparseMemoryRequirementsKHR = (PFN_vkGetDeviceImageSparseMemoryRequirementsKHR)vulkanLib.LoadFunc("vkGetDeviceImageSparseMemoryRequirementsKHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkCreateSamplerYcbcrConversion = (PFN_vkCreateSamplerYcbcrConversion)vulkanLib.LoadFunc("vkCreateSamplerYcbcrConversion");
#endif
#if defined(VK_KHR_sampler_ycbcr_conversion) && (defined(VK_KHR_maintenance1) && defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_memory_requirements2) && defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkCreateSamplerYcbcrConversionKHR = (PFN_vkCreateSamplerYcbcrConversionKHR)vulkanLib.LoadFunc("vkCreateSamplerYcbcrConversionKHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkDestroySamplerYcbcrConversion = (PFN_vkDestroySamplerYcbcrConversion)vulkanLib.LoadFunc("vkDestroySamplerYcbcrConversion");
#endif
#if defined(VK_KHR_sampler_ycbcr_conversion) && (defined(VK_KHR_maintenance1) && defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_memory_requirements2) && defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkDestroySamplerYcbcrConversionKHR = (PFN_vkDestroySamplerYcbcrConversionKHR)vulkanLib.LoadFunc("vkDestroySamplerYcbcrConversionKHR");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkGetDeviceQueue2 = (PFN_vkGetDeviceQueue2)vulkanLib.LoadFunc("vkGetDeviceQueue2");
#endif
#if defined(VK_EXT_validation_cache)
		staticPfn_vkCreateValidationCacheEXT = (PFN_vkCreateValidationCacheEXT)vulkanLib.LoadFunc("vkCreateValidationCacheEXT");
		staticPfn_vkDestroyValidationCacheEXT = (PFN_vkDestroyValidationCacheEXT)vulkanLib.LoadFunc("vkDestroyValidationCacheEXT");
		staticPfn_vkGetValidationCacheDataEXT = (PFN_vkGetValidationCacheDataEXT)vulkanLib.LoadFunc("vkGetValidationCacheDataEXT");
		staticPfn_vkMergeValidationCachesEXT = (PFN_vkMergeValidationCachesEXT)vulkanLib.LoadFunc("vkMergeValidationCachesEXT");
#endif
#if defined(VK_VERSION_1_1)
		staticPfn_vkGetDescriptorSetLayoutSupport = (PFN_vkGetDescriptorSetLayoutSupport)vulkanLib.LoadFunc("vkGetDescriptorSetLayoutSupport");
#endif
#if defined(VK_KHR_maintenance3) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkGetDescriptorSetLayoutSupportKHR = (PFN_vkGetDescriptorSetLayoutSupportKHR)vulkanLib.LoadFunc("vkGetDescriptorSetLayoutSupportKHR");
#endif
#if defined(VK_ANDROID_native_buffer)
		staticPfn_vkGetSwapchainGrallocUsageANDROID = (PFN_vkGetSwapchainGrallocUsageANDROID)vulkanLib.LoadFunc("vkGetSwapchainGrallocUsageANDROID");
		staticPfn_vkGetSwapchainGrallocUsage2ANDROID = (PFN_vkGetSwapchainGrallocUsage2ANDROID)vulkanLib.LoadFunc("vkGetSwapchainGrallocUsage2ANDROID");
		staticPfn_vkAcquireImageANDROID = (PFN_vkAcquireImageANDROID)vulkanLib.LoadFunc("vkAcquireImageANDROID");
		staticPfn_vkQueueSignalReleaseImageANDROID = (PFN_vkQueueSignalReleaseImageANDROID)vulkanLib.LoadFunc("vkQueueSignalReleaseImageANDROID");
#endif
#if defined(VK_AMD_shader_info)
		staticPfn_vkGetShaderInfoAMD = (PFN_vkGetShaderInfoAMD)vulkanLib.LoadFunc("vkGetShaderInfoAMD");
#endif
#if defined(VK_AMD_display_native_hdr) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
		staticPfn_vkSetLocalDimmingAMD = (PFN_vkSetLocalDimmingAMD)vulkanLib.LoadFunc("vkSetLocalDimmingAMD");
#endif
#if defined(VK_KHR_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = (PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceCalibrateableTimeDomainsKHR");
#endif
#if defined(VK_EXT_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = (PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT)vulkanLib.LoadFunc("vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
#endif
#if defined(VK_KHR_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkGetCalibratedTimestampsKHR = (PFN_vkGetCalibratedTimestampsKHR)vulkanLib.LoadFunc("vkGetCalibratedTimestampsKHR");
#endif
#if defined(VK_EXT_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkGetCalibratedTimestampsEXT = (PFN_vkGetCalibratedTimestampsEXT)vulkanLib.LoadFunc("vkGetCalibratedTimestampsEXT");
#endif
#if defined(VK_EXT_debug_utils)
		staticPfn_vkSetDebugUtilsObjectNameEXT = (PFN_vkSetDebugUtilsObjectNameEXT)vulkanLib.LoadFunc("vkSetDebugUtilsObjectNameEXT");
		staticPfn_vkSetDebugUtilsObjectTagEXT = (PFN_vkSetDebugUtilsObjectTagEXT)vulkanLib.LoadFunc("vkSetDebugUtilsObjectTagEXT");
		staticPfn_vkQueueBeginDebugUtilsLabelEXT = (PFN_vkQueueBeginDebugUtilsLabelEXT)vulkanLib.LoadFunc("vkQueueBeginDebugUtilsLabelEXT");
		staticPfn_vkQueueEndDebugUtilsLabelEXT = (PFN_vkQueueEndDebugUtilsLabelEXT)vulkanLib.LoadFunc("vkQueueEndDebugUtilsLabelEXT");
		staticPfn_vkQueueInsertDebugUtilsLabelEXT = (PFN_vkQueueInsertDebugUtilsLabelEXT)vulkanLib.LoadFunc("vkQueueInsertDebugUtilsLabelEXT");
		staticPfn_vkCmdBeginDebugUtilsLabelEXT = (PFN_vkCmdBeginDebugUtilsLabelEXT)vulkanLib.LoadFunc("vkCmdBeginDebugUtilsLabelEXT");
		staticPfn_vkCmdEndDebugUtilsLabelEXT = (PFN_vkCmdEndDebugUtilsLabelEXT)vulkanLib.LoadFunc("vkCmdEndDebugUtilsLabelEXT");
		staticPfn_vkCmdInsertDebugUtilsLabelEXT = (PFN_vkCmdInsertDebugUtilsLabelEXT)vulkanLib.LoadFunc("vkCmdInsertDebugUtilsLabelEXT");
		staticPfn_vkCreateDebugUtilsMessengerEXT = (PFN_vkCreateDebugUtilsMessengerEXT)vulkanLib.LoadFunc("vkCreateDebugUtilsMessengerEXT");
		staticPfn_vkDestroyDebugUtilsMessengerEXT = (PFN_vkDestroyDebugUtilsMessengerEXT)vulkanLib.LoadFunc("vkDestroyDebugUtilsMessengerEXT");
		staticPfn_vkSubmitDebugUtilsMessageEXT = (PFN_vkSubmitDebugUtilsMessageEXT)vulkanLib.LoadFunc("vkSubmitDebugUtilsMessageEXT");
#endif
#if defined(VK_EXT_external_memory_host) && (defined(VK_KHR_external_memory) || defined(VK_VERSION_1_1))
		staticPfn_vkGetMemoryHostPointerPropertiesEXT = (PFN_vkGetMemoryHostPointerPropertiesEXT)vulkanLib.LoadFunc("vkGetMemoryHostPointerPropertiesEXT");
#endif
#if defined(VK_AMD_buffer_marker)
		staticPfn_vkCmdWriteBufferMarkerAMD = (PFN_vkCmdWriteBufferMarkerAMD)vulkanLib.LoadFunc("vkCmdWriteBufferMarkerAMD");
#endif
#if defined(VK_VERSION_1_2)
		staticPfn_vkCreateRenderPass2 = (PFN_vkCreateRenderPass2)vulkanLib.LoadFunc("vkCreateRenderPass2");
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
		staticPfn_vkCreateRenderPass2KHR = (PFN_vkCreateRenderPass2KHR)vulkanLib.LoadFunc("vkCreateRenderPass2KHR");
#endif
#if defined(VK_VERSION_1_2)
		staticPfn_vkCmdBeginRenderPass2 = (PFN_vkCmdBeginRenderPass2)vulkanLib.LoadFunc("vkCmdBeginRenderPass2");
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
		staticPfn_vkCmdBeginRenderPass2KHR = (PFN_vkCmdBeginRenderPass2KHR)vulkanLib.LoadFunc("vkCmdBeginRenderPass2KHR");
#endif
#if defined(VK_VERSION_1_2)
		staticPfn_vkCmdNextSubpass2 = (PFN_vkCmdNextSubpass2)vulkanLib.LoadFunc("vkCmdNextSubpass2");
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
		staticPfn_vkCmdNextSubpass2KHR = (PFN_vkCmdNextSubpass2KHR)vulkanLib.LoadFunc("vkCmdNextSubpass2KHR");
#endif
#if defined(VK_VERSION_1_2)
		staticPfn_vkCmdEndRenderPass2 = (PFN_vkCmdEndRenderPass2)vulkanLib.LoadFunc("vkCmdEndRenderPass2");
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
		staticPfn_vkCmdEndRenderPass2KHR = (PFN_vkCmdEndRenderPass2KHR)vulkanLib.LoadFunc("vkCmdEndRenderPass2KHR");
#endif
#if defined(VK_VERSION_1_2)
		staticPfn_vkGetSemaphoreCounterValue = (PFN_vkGetSemaphoreCounterValue)vulkanLib.LoadFunc("vkGetSemaphoreCounterValue");
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkGetSemaphoreCounterValueKHR = (PFN_vkGetSemaphoreCounterValueKHR)vulkanLib.LoadFunc("vkGetSemaphoreCounterValueKHR");
#endif
#if defined(VK_VERSION_1_2)
		staticPfn_vkWaitSemaphores = (PFN_vkWaitSemaphores)vulkanLib.LoadFunc("vkWaitSemaphores");
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkWaitSemaphoresKHR = (PFN_vkWaitSemaphoresKHR)vulkanLib.LoadFunc("vkWaitSemaphoresKHR");
#endif
#if defined(VK_VERSION_1_2)
		staticPfn_vkSignalSemaphore = (PFN_vkSignalSemaphore)vulkanLib.LoadFunc("vkSignalSemaphore");
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkSignalSemaphoreKHR = (PFN_vkSignalSemaphoreKHR)vulkanLib.LoadFunc("vkSignalSemaphoreKHR");
#endif
#if defined(VK_ANDROID_external_memory_android_hardware_buffer) && (defined(VK_KHR_sampler_ycbcr_conversion) && defined(VK_KHR_external_memory) && defined(VK_EXT_queue_family_foreign) && defined(VK_KHR_dedicated_allocation))
		staticPfn_vkGetAndroidHardwareBufferPropertiesANDROID = (PFN_vkGetAndroidHardwareBufferPropertiesANDROID)vulkanLib.LoadFunc("vkGetAndroidHardwareBufferPropertiesANDROID");
		staticPfn_vkGetMemoryAndroidHardwareBufferANDROID = (PFN_vkGetMemoryAndroidHardwareBufferANDROID)vulkanLib.LoadFunc("vkGetMemoryAndroidHardwareBufferANDROID");
#endif
#if defined(VK_VERSION_1_2)
		staticPfn_vkCmdDrawIndirectCount = (PFN_vkCmdDrawIndirectCount)vulkanLib.LoadFunc("vkCmdDrawIndirectCount");
#endif
#if defined(VK_KHR_draw_indirect_count)
		staticPfn_vkCmdDrawIndirectCountKHR = (PFN_vkCmdDrawIndirectCountKHR)vulkanLib.LoadFunc("vkCmdDrawIndirectCountKHR");
#endif
#if defined(VK_AMD_draw_indirect_count)
		staticPfn_vkCmdDrawIndirectCountAMD = (PFN_vkCmdDrawIndirectCountAMD)vulkanLib.LoadFunc("vkCmdDrawIndirectCountAMD");
#endif
#if defined(VK_VERSION_1_2)
		staticPfn_vkCmdDrawIndexedIndirectCount = (PFN_vkCmdDrawIndexedIndirectCount)vulkanLib.LoadFunc("vkCmdDrawIndexedIndirectCount");
#endif
#if defined(VK_KHR_draw_indirect_count)
		staticPfn_vkCmdDrawIndexedIndirectCountKHR = (PFN_vkCmdDrawIndexedIndirectCountKHR)vulkanLib.LoadFunc("vkCmdDrawIndexedIndirectCountKHR");
#endif
#if defined(VK_AMD_draw_indirect_count)
		staticPfn_vkCmdDrawIndexedIndirectCountAMD = (PFN_vkCmdDrawIndexedIndirectCountAMD)vulkanLib.LoadFunc("vkCmdDrawIndexedIndirectCountAMD");
#endif
#if defined(VK_NV_device_diagnostic_checkpoints) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkCmdSetCheckpointNV = (PFN_vkCmdSetCheckpointNV)vulkanLib.LoadFunc("vkCmdSetCheckpointNV");
		staticPfn_vkGetQueueCheckpointDataNV = (PFN_vkGetQueueCheckpointDataNV)vulkanLib.LoadFunc("vkGetQueueCheckpointDataNV");
#endif
#if defined(VK_EXT_transform_feedback) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkCmdBindTransformFeedbackBuffersEXT = (PFN_vkCmdBindTransformFeedbackBuffersEXT)vulkanLib.LoadFunc("vkCmdBindTransformFeedbackBuffersEXT");
		staticPfn_vkCmdBeginTransformFeedbackEXT = (PFN_vkCmdBeginTransformFeedbackEXT)vulkanLib.LoadFunc("vkCmdBeginTransformFeedbackEXT");
		staticPfn_vkCmdEndTransformFeedbackEXT = (PFN_vkCmdEndTransformFeedbackEXT)vulkanLib.LoadFunc("vkCmdEndTransformFeedbackEXT");
		staticPfn_vkCmdBeginQueryIndexedEXT = (PFN_vkCmdBeginQueryIndexedEXT)vulkanLib.LoadFunc("vkCmdBeginQueryIndexedEXT");
		staticPfn_vkCmdEndQueryIndexedEXT = (PFN_vkCmdEndQueryIndexedEXT)vulkanLib.LoadFunc("vkCmdEndQueryIndexedEXT");
		staticPfn_vkCmdDrawIndirectByteCountEXT = (PFN_vkCmdDrawIndirectByteCountEXT)vulkanLib.LoadFunc("vkCmdDrawIndirectByteCountEXT");
#endif
#if defined(VK_NV_scissor_exclusive) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkCmdSetExclusiveScissorNV = (PFN_vkCmdSetExclusiveScissorNV)vulkanLib.LoadFunc("vkCmdSetExclusiveScissorNV");
		staticPfn_vkCmdSetExclusiveScissorEnableNV = (PFN_vkCmdSetExclusiveScissorEnableNV)vulkanLib.LoadFunc("vkCmdSetExclusiveScissorEnableNV");
#endif
#if defined(VK_NV_shading_rate_image) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkCmdBindShadingRateImageNV = (PFN_vkCmdBindShadingRateImageNV)vulkanLib.LoadFunc("vkCmdBindShadingRateImageNV");
		staticPfn_vkCmdSetViewportShadingRatePaletteNV = (PFN_vkCmdSetViewportShadingRatePaletteNV)vulkanLib.LoadFunc("vkCmdSetViewportShadingRatePaletteNV");
		staticPfn_vkCmdSetCoarseSampleOrderNV = (PFN_vkCmdSetCoarseSampleOrderNV)vulkanLib.LoadFunc("vkCmdSetCoarseSampleOrderNV");
#endif
#if defined(VK_NV_mesh_shader) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkCmdDrawMeshTasksNV = (PFN_vkCmdDrawMeshTasksNV)vulkanLib.LoadFunc("vkCmdDrawMeshTasksNV");
		staticPfn_vkCmdDrawMeshTasksIndirectNV = (PFN_vkCmdDrawMeshTasksIndirectNV)vulkanLib.LoadFunc("vkCmdDrawMeshTasksIndirectNV");
		staticPfn_vkCmdDrawMeshTasksIndirectCountNV = (PFN_vkCmdDrawMeshTasksIndirectCountNV)vulkanLib.LoadFunc("vkCmdDrawMeshTasksIndirectCountNV");
#endif
#if defined(VK_EXT_mesh_shader) && (defined(VK_KHR_spirv_1_4))
		staticPfn_vkCmdDrawMeshTasksEXT = (PFN_vkCmdDrawMeshTasksEXT)vulkanLib.LoadFunc("vkCmdDrawMeshTasksEXT");
		staticPfn_vkCmdDrawMeshTasksIndirectEXT = (PFN_vkCmdDrawMeshTasksIndirectEXT)vulkanLib.LoadFunc("vkCmdDrawMeshTasksIndirectEXT");
		staticPfn_vkCmdDrawMeshTasksIndirectCountEXT = (PFN_vkCmdDrawMeshTasksIndirectCountEXT)vulkanLib.LoadFunc("vkCmdDrawMeshTasksIndirectCountEXT");
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		staticPfn_vkCompileDeferredNV = (PFN_vkCompileDeferredNV)vulkanLib.LoadFunc("vkCompileDeferredNV");
		staticPfn_vkCreateAccelerationStructureNV = (PFN_vkCreateAccelerationStructureNV)vulkanLib.LoadFunc("vkCreateAccelerationStructureNV");
#endif
#if defined(VK_HUAWEI_invocation_mask) && (defined(VK_KHR_ray_tracing_pipeline) && defined(VK_KHR_synchronization2))
		staticPfn_vkCmdBindInvocationMaskHUAWEI = (PFN_vkCmdBindInvocationMaskHUAWEI)vulkanLib.LoadFunc("vkCmdBindInvocationMaskHUAWEI");
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		staticPfn_vkDestroyAccelerationStructureKHR = (PFN_vkDestroyAccelerationStructureKHR)vulkanLib.LoadFunc("vkDestroyAccelerationStructureKHR");
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		staticPfn_vkDestroyAccelerationStructureNV = (PFN_vkDestroyAccelerationStructureNV)vulkanLib.LoadFunc("vkDestroyAccelerationStructureNV");
		staticPfn_vkGetAccelerationStructureMemoryRequirementsNV = (PFN_vkGetAccelerationStructureMemoryRequirementsNV)vulkanLib.LoadFunc("vkGetAccelerationStructureMemoryRequirementsNV");
		staticPfn_vkBindAccelerationStructureMemoryNV = (PFN_vkBindAccelerationStructureMemoryNV)vulkanLib.LoadFunc("vkBindAccelerationStructureMemoryNV");
		staticPfn_vkCmdCopyAccelerationStructureNV = (PFN_vkCmdCopyAccelerationStructureNV)vulkanLib.LoadFunc("vkCmdCopyAccelerationStructureNV");
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		staticPfn_vkCmdCopyAccelerationStructureKHR = (PFN_vkCmdCopyAccelerationStructureKHR)vulkanLib.LoadFunc("vkCmdCopyAccelerationStructureKHR");
		staticPfn_vkCopyAccelerationStructureKHR = (PFN_vkCopyAccelerationStructureKHR)vulkanLib.LoadFunc("vkCopyAccelerationStructureKHR");
		staticPfn_vkCmdCopyAccelerationStructureToMemoryKHR = (PFN_vkCmdCopyAccelerationStructureToMemoryKHR)vulkanLib.LoadFunc("vkCmdCopyAccelerationStructureToMemoryKHR");
		staticPfn_vkCopyAccelerationStructureToMemoryKHR = (PFN_vkCopyAccelerationStructureToMemoryKHR)vulkanLib.LoadFunc("vkCopyAccelerationStructureToMemoryKHR");
		staticPfn_vkCmdCopyMemoryToAccelerationStructureKHR = (PFN_vkCmdCopyMemoryToAccelerationStructureKHR)vulkanLib.LoadFunc("vkCmdCopyMemoryToAccelerationStructureKHR");
		staticPfn_vkCopyMemoryToAccelerationStructureKHR = (PFN_vkCopyMemoryToAccelerationStructureKHR)vulkanLib.LoadFunc("vkCopyMemoryToAccelerationStructureKHR");
		staticPfn_vkCmdWriteAccelerationStructuresPropertiesKHR = (PFN_vkCmdWriteAccelerationStructuresPropertiesKHR)vulkanLib.LoadFunc("vkCmdWriteAccelerationStructuresPropertiesKHR");
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		staticPfn_vkCmdWriteAccelerationStructuresPropertiesNV = (PFN_vkCmdWriteAccelerationStructuresPropertiesNV)vulkanLib.LoadFunc("vkCmdWriteAccelerationStructuresPropertiesNV");
		staticPfn_vkCmdBuildAccelerationStructureNV = (PFN_vkCmdBuildAccelerationStructureNV)vulkanLib.LoadFunc("vkCmdBuildAccelerationStructureNV");
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		staticPfn_vkWriteAccelerationStructuresPropertiesKHR = (PFN_vkWriteAccelerationStructuresPropertiesKHR)vulkanLib.LoadFunc("vkWriteAccelerationStructuresPropertiesKHR");
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		staticPfn_vkCmdTraceRaysKHR = (PFN_vkCmdTraceRaysKHR)vulkanLib.LoadFunc("vkCmdTraceRaysKHR");
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		staticPfn_vkCmdTraceRaysNV = (PFN_vkCmdTraceRaysNV)vulkanLib.LoadFunc("vkCmdTraceRaysNV");
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		staticPfn_vkGetRayTracingShaderGroupHandlesKHR = (PFN_vkGetRayTracingShaderGroupHandlesKHR)vulkanLib.LoadFunc("vkGetRayTracingShaderGroupHandlesKHR");
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		staticPfn_vkGetRayTracingShaderGroupHandlesNV = (PFN_vkGetRayTracingShaderGroupHandlesNV)vulkanLib.LoadFunc("vkGetRayTracingShaderGroupHandlesNV");
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		staticPfn_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = (PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR)vulkanLib.LoadFunc("vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		staticPfn_vkGetAccelerationStructureHandleNV = (PFN_vkGetAccelerationStructureHandleNV)vulkanLib.LoadFunc("vkGetAccelerationStructureHandleNV");
		staticPfn_vkCreateRayTracingPipelinesNV = (PFN_vkCreateRayTracingPipelinesNV)vulkanLib.LoadFunc("vkCreateRayTracingPipelinesNV");
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		staticPfn_vkCreateRayTracingPipelinesKHR = (PFN_vkCreateRayTracingPipelinesKHR)vulkanLib.LoadFunc("vkCreateRayTracingPipelinesKHR");
#endif
#if defined(VK_NV_cooperative_matrix) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = (PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV)vulkanLib.LoadFunc("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		staticPfn_vkCmdTraceRaysIndirectKHR = (PFN_vkCmdTraceRaysIndirectKHR)vulkanLib.LoadFunc("vkCmdTraceRaysIndirectKHR");
#endif
#if (defined(VK_KHR_ray_tracing_maintenance1) && (defined(VK_KHR_acceleration_structure))) && (defined(VK_KHR_ray_tracing_pipeline))
		staticPfn_vkCmdTraceRaysIndirect2KHR = (PFN_vkCmdTraceRaysIndirect2KHR)vulkanLib.LoadFunc("vkCmdTraceRaysIndirect2KHR");
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		staticPfn_vkGetDeviceAccelerationStructureCompatibilityKHR = (PFN_vkGetDeviceAccelerationStructureCompatibilityKHR)vulkanLib.LoadFunc("vkGetDeviceAccelerationStructureCompatibilityKHR");
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		staticPfn_vkGetRayTracingShaderGroupStackSizeKHR = (PFN_vkGetRayTracingShaderGroupStackSizeKHR)vulkanLib.LoadFunc("vkGetRayTracingShaderGroupStackSizeKHR");
		staticPfn_vkCmdSetRayTracingPipelineStackSizeKHR = (PFN_vkCmdSetRayTracingPipelineStackSizeKHR)vulkanLib.LoadFunc("vkCmdSetRayTracingPipelineStackSizeKHR");
#endif
#if defined(VK_NVX_image_view_handle)
		staticPfn_vkGetImageViewHandleNVX = (PFN_vkGetImageViewHandleNVX)vulkanLib.LoadFunc("vkGetImageViewHandleNVX");
		staticPfn_vkGetImageViewAddressNVX = (PFN_vkGetImageViewAddressNVX)vulkanLib.LoadFunc("vkGetImageViewAddressNVX");
#endif
#if defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
		staticPfn_vkGetPhysicalDeviceSurfacePresentModes2EXT = (PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT)vulkanLib.LoadFunc("vkGetPhysicalDeviceSurfacePresentModes2EXT");
#endif
#if ((defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))) && (defined(VK_KHR_device_group))) || ((defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))) && (defined(VK_VERSION_1_1)))
		staticPfn_vkGetDeviceGroupSurfacePresentModes2EXT = (PFN_vkGetDeviceGroupSurfacePresentModes2EXT)vulkanLib.LoadFunc("vkGetDeviceGroupSurfacePresentModes2EXT");
#endif
#if defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
		staticPfn_vkAcquireFullScreenExclusiveModeEXT = (PFN_vkAcquireFullScreenExclusiveModeEXT)vulkanLib.LoadFunc("vkAcquireFullScreenExclusiveModeEXT");
		staticPfn_vkReleaseFullScreenExclusiveModeEXT = (PFN_vkReleaseFullScreenExclusiveModeEXT)vulkanLib.LoadFunc("vkReleaseFullScreenExclusiveModeEXT");
#endif
#if defined(VK_KHR_performance_query) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = (PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR)vulkanLib.LoadFunc("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
		staticPfn_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = (PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
		staticPfn_vkAcquireProfilingLockKHR = (PFN_vkAcquireProfilingLockKHR)vulkanLib.LoadFunc("vkAcquireProfilingLockKHR");
		staticPfn_vkReleaseProfilingLockKHR = (PFN_vkReleaseProfilingLockKHR)vulkanLib.LoadFunc("vkReleaseProfilingLockKHR");
#endif
#if defined(VK_EXT_image_drm_format_modifier) && (((defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_sampler_ycbcr_conversion)) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_image_format_list) || defined(VK_VERSION_1_2)))
		staticPfn_vkGetImageDrmFormatModifierPropertiesEXT = (PFN_vkGetImageDrmFormatModifierPropertiesEXT)vulkanLib.LoadFunc("vkGetImageDrmFormatModifierPropertiesEXT");
#endif
#if defined(VK_VERSION_1_2)
		staticPfn_vkGetBufferOpaqueCaptureAddress = (PFN_vkGetBufferOpaqueCaptureAddress)vulkanLib.LoadFunc("vkGetBufferOpaqueCaptureAddress");
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
		staticPfn_vkGetBufferOpaqueCaptureAddressKHR = (PFN_vkGetBufferOpaqueCaptureAddressKHR)vulkanLib.LoadFunc("vkGetBufferOpaqueCaptureAddressKHR");
#endif
#if defined(VK_VERSION_1_2)
		staticPfn_vkGetBufferDeviceAddress = (PFN_vkGetBufferDeviceAddress)vulkanLib.LoadFunc("vkGetBufferDeviceAddress");
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
		staticPfn_vkGetBufferDeviceAddressKHR = (PFN_vkGetBufferDeviceAddressKHR)vulkanLib.LoadFunc("vkGetBufferDeviceAddressKHR");
#endif
#if defined(VK_EXT_buffer_device_address) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkGetBufferDeviceAddressEXT = (PFN_vkGetBufferDeviceAddressEXT)vulkanLib.LoadFunc("vkGetBufferDeviceAddressEXT");
#endif
#if defined(VK_EXT_headless_surface) && (defined(VK_KHR_surface))
		staticPfn_vkCreateHeadlessSurfaceEXT = (PFN_vkCreateHeadlessSurfaceEXT)vulkanLib.LoadFunc("vkCreateHeadlessSurfaceEXT");
#endif
#if defined(VK_NV_coverage_reduction_mode) && (defined(VK_NV_framebuffer_mixed_samples) && defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = (PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV)vulkanLib.LoadFunc("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
#endif
#if defined(VK_INTEL_performance_query)
		staticPfn_vkInitializePerformanceApiINTEL = (PFN_vkInitializePerformanceApiINTEL)vulkanLib.LoadFunc("vkInitializePerformanceApiINTEL");
		staticPfn_vkUninitializePerformanceApiINTEL = (PFN_vkUninitializePerformanceApiINTEL)vulkanLib.LoadFunc("vkUninitializePerformanceApiINTEL");
		staticPfn_vkCmdSetPerformanceMarkerINTEL = (PFN_vkCmdSetPerformanceMarkerINTEL)vulkanLib.LoadFunc("vkCmdSetPerformanceMarkerINTEL");
		staticPfn_vkCmdSetPerformanceStreamMarkerINTEL = (PFN_vkCmdSetPerformanceStreamMarkerINTEL)vulkanLib.LoadFunc("vkCmdSetPerformanceStreamMarkerINTEL");
		staticPfn_vkCmdSetPerformanceOverrideINTEL = (PFN_vkCmdSetPerformanceOverrideINTEL)vulkanLib.LoadFunc("vkCmdSetPerformanceOverrideINTEL");
		staticPfn_vkAcquirePerformanceConfigurationINTEL = (PFN_vkAcquirePerformanceConfigurationINTEL)vulkanLib.LoadFunc("vkAcquirePerformanceConfigurationINTEL");
		staticPfn_vkReleasePerformanceConfigurationINTEL = (PFN_vkReleasePerformanceConfigurationINTEL)vulkanLib.LoadFunc("vkReleasePerformanceConfigurationINTEL");
		staticPfn_vkQueueSetPerformanceConfigurationINTEL = (PFN_vkQueueSetPerformanceConfigurationINTEL)vulkanLib.LoadFunc("vkQueueSetPerformanceConfigurationINTEL");
		staticPfn_vkGetPerformanceParameterINTEL = (PFN_vkGetPerformanceParameterINTEL)vulkanLib.LoadFunc("vkGetPerformanceParameterINTEL");
#endif
#if defined(VK_VERSION_1_2)
		staticPfn_vkGetDeviceMemoryOpaqueCaptureAddress = (PFN_vkGetDeviceMemoryOpaqueCaptureAddress)vulkanLib.LoadFunc("vkGetDeviceMemoryOpaqueCaptureAddress");
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
		staticPfn_vkGetDeviceMemoryOpaqueCaptureAddressKHR = (PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR)vulkanLib.LoadFunc("vkGetDeviceMemoryOpaqueCaptureAddressKHR");
#endif
#if defined(VK_KHR_pipeline_executable_properties) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkGetPipelineExecutablePropertiesKHR = (PFN_vkGetPipelineExecutablePropertiesKHR)vulkanLib.LoadFunc("vkGetPipelineExecutablePropertiesKHR");
		staticPfn_vkGetPipelineExecutableStatisticsKHR = (PFN_vkGetPipelineExecutableStatisticsKHR)vulkanLib.LoadFunc("vkGetPipelineExecutableStatisticsKHR");
		staticPfn_vkGetPipelineExecutableInternalRepresentationsKHR = (PFN_vkGetPipelineExecutableInternalRepresentationsKHR)vulkanLib.LoadFunc("vkGetPipelineExecutableInternalRepresentationsKHR");
#endif
#if defined(VK_KHR_line_rasterization) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkCmdSetLineStippleKHR = (PFN_vkCmdSetLineStippleKHR)vulkanLib.LoadFunc("vkCmdSetLineStippleKHR");
#endif
#if defined(VK_EXT_line_rasterization) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkCmdSetLineStippleEXT = (PFN_vkCmdSetLineStippleEXT)vulkanLib.LoadFunc("vkCmdSetLineStippleEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkGetPhysicalDeviceToolProperties = (PFN_vkGetPhysicalDeviceToolProperties)vulkanLib.LoadFunc("vkGetPhysicalDeviceToolProperties");
#endif
#if defined(VK_EXT_tooling_info)
		staticPfn_vkGetPhysicalDeviceToolPropertiesEXT = (PFN_vkGetPhysicalDeviceToolPropertiesEXT)vulkanLib.LoadFunc("vkGetPhysicalDeviceToolPropertiesEXT");
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		staticPfn_vkCreateAccelerationStructureKHR = (PFN_vkCreateAccelerationStructureKHR)vulkanLib.LoadFunc("vkCreateAccelerationStructureKHR");
		staticPfn_vkCmdBuildAccelerationStructuresKHR = (PFN_vkCmdBuildAccelerationStructuresKHR)vulkanLib.LoadFunc("vkCmdBuildAccelerationStructuresKHR");
		staticPfn_vkCmdBuildAccelerationStructuresIndirectKHR = (PFN_vkCmdBuildAccelerationStructuresIndirectKHR)vulkanLib.LoadFunc("vkCmdBuildAccelerationStructuresIndirectKHR");
		staticPfn_vkBuildAccelerationStructuresKHR = (PFN_vkBuildAccelerationStructuresKHR)vulkanLib.LoadFunc("vkBuildAccelerationStructuresKHR");
		staticPfn_vkGetAccelerationStructureDeviceAddressKHR = (PFN_vkGetAccelerationStructureDeviceAddressKHR)vulkanLib.LoadFunc("vkGetAccelerationStructureDeviceAddressKHR");
#endif
#if defined(VK_KHR_deferred_host_operations)
		staticPfn_vkCreateDeferredOperationKHR = (PFN_vkCreateDeferredOperationKHR)vulkanLib.LoadFunc("vkCreateDeferredOperationKHR");
		staticPfn_vkDestroyDeferredOperationKHR = (PFN_vkDestroyDeferredOperationKHR)vulkanLib.LoadFunc("vkDestroyDeferredOperationKHR");
		staticPfn_vkGetDeferredOperationMaxConcurrencyKHR = (PFN_vkGetDeferredOperationMaxConcurrencyKHR)vulkanLib.LoadFunc("vkGetDeferredOperationMaxConcurrencyKHR");
		staticPfn_vkGetDeferredOperationResultKHR = (PFN_vkGetDeferredOperationResultKHR)vulkanLib.LoadFunc("vkGetDeferredOperationResultKHR");
		staticPfn_vkDeferredOperationJoinKHR = (PFN_vkDeferredOperationJoinKHR)vulkanLib.LoadFunc("vkDeferredOperationJoinKHR");
#endif
#if defined(VK_NV_device_generated_commands_compute) && (defined(VK_NV_device_generated_commands))
		staticPfn_vkGetPipelineIndirectMemoryRequirementsNV = (PFN_vkGetPipelineIndirectMemoryRequirementsNV)vulkanLib.LoadFunc("vkGetPipelineIndirectMemoryRequirementsNV");
		staticPfn_vkGetPipelineIndirectDeviceAddressNV = (PFN_vkGetPipelineIndirectDeviceAddressNV)vulkanLib.LoadFunc("vkGetPipelineIndirectDeviceAddressNV");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdSetCullMode = (PFN_vkCmdSetCullMode)vulkanLib.LoadFunc("vkCmdSetCullMode");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetCullModeEXT = (PFN_vkCmdSetCullModeEXT)vulkanLib.LoadFunc("vkCmdSetCullModeEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdSetFrontFace = (PFN_vkCmdSetFrontFace)vulkanLib.LoadFunc("vkCmdSetFrontFace");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetFrontFaceEXT = (PFN_vkCmdSetFrontFaceEXT)vulkanLib.LoadFunc("vkCmdSetFrontFaceEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdSetPrimitiveTopology = (PFN_vkCmdSetPrimitiveTopology)vulkanLib.LoadFunc("vkCmdSetPrimitiveTopology");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetPrimitiveTopologyEXT = (PFN_vkCmdSetPrimitiveTopologyEXT)vulkanLib.LoadFunc("vkCmdSetPrimitiveTopologyEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdSetViewportWithCount = (PFN_vkCmdSetViewportWithCount)vulkanLib.LoadFunc("vkCmdSetViewportWithCount");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetViewportWithCountEXT = (PFN_vkCmdSetViewportWithCountEXT)vulkanLib.LoadFunc("vkCmdSetViewportWithCountEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdSetScissorWithCount = (PFN_vkCmdSetScissorWithCount)vulkanLib.LoadFunc("vkCmdSetScissorWithCount");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetScissorWithCountEXT = (PFN_vkCmdSetScissorWithCountEXT)vulkanLib.LoadFunc("vkCmdSetScissorWithCountEXT");
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
		staticPfn_vkCmdBindIndexBuffer2KHR = (PFN_vkCmdBindIndexBuffer2KHR)vulkanLib.LoadFunc("vkCmdBindIndexBuffer2KHR");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdBindVertexBuffers2 = (PFN_vkCmdBindVertexBuffers2)vulkanLib.LoadFunc("vkCmdBindVertexBuffers2");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdBindVertexBuffers2EXT = (PFN_vkCmdBindVertexBuffers2EXT)vulkanLib.LoadFunc("vkCmdBindVertexBuffers2EXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdSetDepthTestEnable = (PFN_vkCmdSetDepthTestEnable)vulkanLib.LoadFunc("vkCmdSetDepthTestEnable");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetDepthTestEnableEXT = (PFN_vkCmdSetDepthTestEnableEXT)vulkanLib.LoadFunc("vkCmdSetDepthTestEnableEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdSetDepthWriteEnable = (PFN_vkCmdSetDepthWriteEnable)vulkanLib.LoadFunc("vkCmdSetDepthWriteEnable");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetDepthWriteEnableEXT = (PFN_vkCmdSetDepthWriteEnableEXT)vulkanLib.LoadFunc("vkCmdSetDepthWriteEnableEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdSetDepthCompareOp = (PFN_vkCmdSetDepthCompareOp)vulkanLib.LoadFunc("vkCmdSetDepthCompareOp");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetDepthCompareOpEXT = (PFN_vkCmdSetDepthCompareOpEXT)vulkanLib.LoadFunc("vkCmdSetDepthCompareOpEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdSetDepthBoundsTestEnable = (PFN_vkCmdSetDepthBoundsTestEnable)vulkanLib.LoadFunc("vkCmdSetDepthBoundsTestEnable");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetDepthBoundsTestEnableEXT = (PFN_vkCmdSetDepthBoundsTestEnableEXT)vulkanLib.LoadFunc("vkCmdSetDepthBoundsTestEnableEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdSetStencilTestEnable = (PFN_vkCmdSetStencilTestEnable)vulkanLib.LoadFunc("vkCmdSetStencilTestEnable");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetStencilTestEnableEXT = (PFN_vkCmdSetStencilTestEnableEXT)vulkanLib.LoadFunc("vkCmdSetStencilTestEnableEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdSetStencilOp = (PFN_vkCmdSetStencilOp)vulkanLib.LoadFunc("vkCmdSetStencilOp");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetStencilOpEXT = (PFN_vkCmdSetStencilOpEXT)vulkanLib.LoadFunc("vkCmdSetStencilOpEXT");
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetPatchControlPointsEXT = (PFN_vkCmdSetPatchControlPointsEXT)vulkanLib.LoadFunc("vkCmdSetPatchControlPointsEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdSetRasterizerDiscardEnable = (PFN_vkCmdSetRasterizerDiscardEnable)vulkanLib.LoadFunc("vkCmdSetRasterizerDiscardEnable");
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetRasterizerDiscardEnableEXT = (PFN_vkCmdSetRasterizerDiscardEnableEXT)vulkanLib.LoadFunc("vkCmdSetRasterizerDiscardEnableEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdSetDepthBiasEnable = (PFN_vkCmdSetDepthBiasEnable)vulkanLib.LoadFunc("vkCmdSetDepthBiasEnable");
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetDepthBiasEnableEXT = (PFN_vkCmdSetDepthBiasEnableEXT)vulkanLib.LoadFunc("vkCmdSetDepthBiasEnableEXT");
		staticPfn_vkCmdSetLogicOpEXT = (PFN_vkCmdSetLogicOpEXT)vulkanLib.LoadFunc("vkCmdSetLogicOpEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdSetPrimitiveRestartEnable = (PFN_vkCmdSetPrimitiveRestartEnable)vulkanLib.LoadFunc("vkCmdSetPrimitiveRestartEnable");
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetPrimitiveRestartEnableEXT = (PFN_vkCmdSetPrimitiveRestartEnableEXT)vulkanLib.LoadFunc("vkCmdSetPrimitiveRestartEnableEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_KHR_maintenance2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetTessellationDomainOriginEXT = (PFN_vkCmdSetTessellationDomainOriginEXT)vulkanLib.LoadFunc("vkCmdSetTessellationDomainOriginEXT");
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetDepthClampEnableEXT = (PFN_vkCmdSetDepthClampEnableEXT)vulkanLib.LoadFunc("vkCmdSetDepthClampEnableEXT");
		staticPfn_vkCmdSetPolygonModeEXT = (PFN_vkCmdSetPolygonModeEXT)vulkanLib.LoadFunc("vkCmdSetPolygonModeEXT");
		staticPfn_vkCmdSetRasterizationSamplesEXT = (PFN_vkCmdSetRasterizationSamplesEXT)vulkanLib.LoadFunc("vkCmdSetRasterizationSamplesEXT");
		staticPfn_vkCmdSetSampleMaskEXT = (PFN_vkCmdSetSampleMaskEXT)vulkanLib.LoadFunc("vkCmdSetSampleMaskEXT");
		staticPfn_vkCmdSetAlphaToCoverageEnableEXT = (PFN_vkCmdSetAlphaToCoverageEnableEXT)vulkanLib.LoadFunc("vkCmdSetAlphaToCoverageEnableEXT");
		staticPfn_vkCmdSetAlphaToOneEnableEXT = (PFN_vkCmdSetAlphaToOneEnableEXT)vulkanLib.LoadFunc("vkCmdSetAlphaToOneEnableEXT");
		staticPfn_vkCmdSetLogicOpEnableEXT = (PFN_vkCmdSetLogicOpEnableEXT)vulkanLib.LoadFunc("vkCmdSetLogicOpEnableEXT");
		staticPfn_vkCmdSetColorBlendEnableEXT = (PFN_vkCmdSetColorBlendEnableEXT)vulkanLib.LoadFunc("vkCmdSetColorBlendEnableEXT");
		staticPfn_vkCmdSetColorBlendEquationEXT = (PFN_vkCmdSetColorBlendEquationEXT)vulkanLib.LoadFunc("vkCmdSetColorBlendEquationEXT");
		staticPfn_vkCmdSetColorWriteMaskEXT = (PFN_vkCmdSetColorWriteMaskEXT)vulkanLib.LoadFunc("vkCmdSetColorWriteMaskEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_transform_feedback))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_transform_feedback)))
		staticPfn_vkCmdSetRasterizationStreamEXT = (PFN_vkCmdSetRasterizationStreamEXT)vulkanLib.LoadFunc("vkCmdSetRasterizationStreamEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_conservative_rasterization))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_conservative_rasterization)))
		staticPfn_vkCmdSetConservativeRasterizationModeEXT = (PFN_vkCmdSetConservativeRasterizationModeEXT)vulkanLib.LoadFunc("vkCmdSetConservativeRasterizationModeEXT");
		staticPfn_vkCmdSetExtraPrimitiveOverestimationSizeEXT = (PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT)vulkanLib.LoadFunc("vkCmdSetExtraPrimitiveOverestimationSizeEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_depth_clip_enable))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_depth_clip_enable)))
		staticPfn_vkCmdSetDepthClipEnableEXT = (PFN_vkCmdSetDepthClipEnableEXT)vulkanLib.LoadFunc("vkCmdSetDepthClipEnableEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_sample_locations))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_sample_locations)))
		staticPfn_vkCmdSetSampleLocationsEnableEXT = (PFN_vkCmdSetSampleLocationsEnableEXT)vulkanLib.LoadFunc("vkCmdSetSampleLocationsEnableEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_blend_operation_advanced))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_blend_operation_advanced)))
		staticPfn_vkCmdSetColorBlendAdvancedEXT = (PFN_vkCmdSetColorBlendAdvancedEXT)vulkanLib.LoadFunc("vkCmdSetColorBlendAdvancedEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_provoking_vertex))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_provoking_vertex)))
		staticPfn_vkCmdSetProvokingVertexModeEXT = (PFN_vkCmdSetProvokingVertexModeEXT)vulkanLib.LoadFunc("vkCmdSetProvokingVertexModeEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_line_rasterization))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_line_rasterization)))
		staticPfn_vkCmdSetLineRasterizationModeEXT = (PFN_vkCmdSetLineRasterizationModeEXT)vulkanLib.LoadFunc("vkCmdSetLineRasterizationModeEXT");
		staticPfn_vkCmdSetLineStippleEnableEXT = (PFN_vkCmdSetLineStippleEnableEXT)vulkanLib.LoadFunc("vkCmdSetLineStippleEnableEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_depth_clip_control))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_depth_clip_control)))
		staticPfn_vkCmdSetDepthClipNegativeOneToOneEXT = (PFN_vkCmdSetDepthClipNegativeOneToOneEXT)vulkanLib.LoadFunc("vkCmdSetDepthClipNegativeOneToOneEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_clip_space_w_scaling))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_clip_space_w_scaling)))
		staticPfn_vkCmdSetViewportWScalingEnableNV = (PFN_vkCmdSetViewportWScalingEnableNV)vulkanLib.LoadFunc("vkCmdSetViewportWScalingEnableNV");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_viewport_swizzle))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_viewport_swizzle)))
		staticPfn_vkCmdSetViewportSwizzleNV = (PFN_vkCmdSetViewportSwizzleNV)vulkanLib.LoadFunc("vkCmdSetViewportSwizzleNV");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_fragment_coverage_to_color))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_fragment_coverage_to_color)))
		staticPfn_vkCmdSetCoverageToColorEnableNV = (PFN_vkCmdSetCoverageToColorEnableNV)vulkanLib.LoadFunc("vkCmdSetCoverageToColorEnableNV");
		staticPfn_vkCmdSetCoverageToColorLocationNV = (PFN_vkCmdSetCoverageToColorLocationNV)vulkanLib.LoadFunc("vkCmdSetCoverageToColorLocationNV");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_framebuffer_mixed_samples))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_framebuffer_mixed_samples)))
		staticPfn_vkCmdSetCoverageModulationModeNV = (PFN_vkCmdSetCoverageModulationModeNV)vulkanLib.LoadFunc("vkCmdSetCoverageModulationModeNV");
		staticPfn_vkCmdSetCoverageModulationTableEnableNV = (PFN_vkCmdSetCoverageModulationTableEnableNV)vulkanLib.LoadFunc("vkCmdSetCoverageModulationTableEnableNV");
		staticPfn_vkCmdSetCoverageModulationTableNV = (PFN_vkCmdSetCoverageModulationTableNV)vulkanLib.LoadFunc("vkCmdSetCoverageModulationTableNV");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_shading_rate_image))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_shading_rate_image)))
		staticPfn_vkCmdSetShadingRateImageEnableNV = (PFN_vkCmdSetShadingRateImageEnableNV)vulkanLib.LoadFunc("vkCmdSetShadingRateImageEnableNV");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_coverage_reduction_mode))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_coverage_reduction_mode)))
		staticPfn_vkCmdSetCoverageReductionModeNV = (PFN_vkCmdSetCoverageReductionModeNV)vulkanLib.LoadFunc("vkCmdSetCoverageReductionModeNV");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_representative_fragment_test))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_representative_fragment_test)))
		staticPfn_vkCmdSetRepresentativeFragmentTestEnableNV = (PFN_vkCmdSetRepresentativeFragmentTestEnableNV)vulkanLib.LoadFunc("vkCmdSetRepresentativeFragmentTestEnableNV");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCreatePrivateDataSlot = (PFN_vkCreatePrivateDataSlot)vulkanLib.LoadFunc("vkCreatePrivateDataSlot");
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkCreatePrivateDataSlotEXT = (PFN_vkCreatePrivateDataSlotEXT)vulkanLib.LoadFunc("vkCreatePrivateDataSlotEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkDestroyPrivateDataSlot = (PFN_vkDestroyPrivateDataSlot)vulkanLib.LoadFunc("vkDestroyPrivateDataSlot");
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkDestroyPrivateDataSlotEXT = (PFN_vkDestroyPrivateDataSlotEXT)vulkanLib.LoadFunc("vkDestroyPrivateDataSlotEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkSetPrivateData = (PFN_vkSetPrivateData)vulkanLib.LoadFunc("vkSetPrivateData");
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkSetPrivateDataEXT = (PFN_vkSetPrivateDataEXT)vulkanLib.LoadFunc("vkSetPrivateDataEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkGetPrivateData = (PFN_vkGetPrivateData)vulkanLib.LoadFunc("vkGetPrivateData");
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkGetPrivateDataEXT = (PFN_vkGetPrivateDataEXT)vulkanLib.LoadFunc("vkGetPrivateDataEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdCopyBuffer2 = (PFN_vkCmdCopyBuffer2)vulkanLib.LoadFunc("vkCmdCopyBuffer2");
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkCmdCopyBuffer2KHR = (PFN_vkCmdCopyBuffer2KHR)vulkanLib.LoadFunc("vkCmdCopyBuffer2KHR");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdCopyImage2 = (PFN_vkCmdCopyImage2)vulkanLib.LoadFunc("vkCmdCopyImage2");
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkCmdCopyImage2KHR = (PFN_vkCmdCopyImage2KHR)vulkanLib.LoadFunc("vkCmdCopyImage2KHR");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdBlitImage2 = (PFN_vkCmdBlitImage2)vulkanLib.LoadFunc("vkCmdBlitImage2");
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkCmdBlitImage2KHR = (PFN_vkCmdBlitImage2KHR)vulkanLib.LoadFunc("vkCmdBlitImage2KHR");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdCopyBufferToImage2 = (PFN_vkCmdCopyBufferToImage2)vulkanLib.LoadFunc("vkCmdCopyBufferToImage2");
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkCmdCopyBufferToImage2KHR = (PFN_vkCmdCopyBufferToImage2KHR)vulkanLib.LoadFunc("vkCmdCopyBufferToImage2KHR");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdCopyImageToBuffer2 = (PFN_vkCmdCopyImageToBuffer2)vulkanLib.LoadFunc("vkCmdCopyImageToBuffer2");
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkCmdCopyImageToBuffer2KHR = (PFN_vkCmdCopyImageToBuffer2KHR)vulkanLib.LoadFunc("vkCmdCopyImageToBuffer2KHR");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdResolveImage2 = (PFN_vkCmdResolveImage2)vulkanLib.LoadFunc("vkCmdResolveImage2");
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkCmdResolveImage2KHR = (PFN_vkCmdResolveImage2KHR)vulkanLib.LoadFunc("vkCmdResolveImage2KHR");
#endif
#if defined(VK_KHR_object_refresh)
		staticPfn_vkCmdRefreshObjectsKHR = (PFN_vkCmdRefreshObjectsKHR)vulkanLib.LoadFunc("vkCmdRefreshObjectsKHR");
		staticPfn_vkGetPhysicalDeviceRefreshableObjectTypesKHR = (PFN_vkGetPhysicalDeviceRefreshableObjectTypesKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceRefreshableObjectTypesKHR");
#endif
#if defined(VK_KHR_fragment_shading_rate) && ((defined(VK_KHR_create_renderpass2) || defined(VK_VERSION_1_2)) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)))
		staticPfn_vkCmdSetFragmentShadingRateKHR = (PFN_vkCmdSetFragmentShadingRateKHR)vulkanLib.LoadFunc("vkCmdSetFragmentShadingRateKHR");
		staticPfn_vkGetPhysicalDeviceFragmentShadingRatesKHR = (PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceFragmentShadingRatesKHR");
#endif
#if defined(VK_NV_fragment_shading_rate_enums) && (defined(VK_KHR_fragment_shading_rate))
		staticPfn_vkCmdSetFragmentShadingRateEnumNV = (PFN_vkCmdSetFragmentShadingRateEnumNV)vulkanLib.LoadFunc("vkCmdSetFragmentShadingRateEnumNV");
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		staticPfn_vkGetAccelerationStructureBuildSizesKHR = (PFN_vkGetAccelerationStructureBuildSizesKHR)vulkanLib.LoadFunc("vkGetAccelerationStructureBuildSizesKHR");
#endif
#if (defined(VK_EXT_vertex_input_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		staticPfn_vkCmdSetVertexInputEXT = (PFN_vkCmdSetVertexInputEXT)vulkanLib.LoadFunc("vkCmdSetVertexInputEXT");
#endif
#if defined(VK_EXT_color_write_enable) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkCmdSetColorWriteEnableEXT = (PFN_vkCmdSetColorWriteEnableEXT)vulkanLib.LoadFunc("vkCmdSetColorWriteEnableEXT");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdSetEvent2 = (PFN_vkCmdSetEvent2)vulkanLib.LoadFunc("vkCmdSetEvent2");
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkCmdSetEvent2KHR = (PFN_vkCmdSetEvent2KHR)vulkanLib.LoadFunc("vkCmdSetEvent2KHR");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdResetEvent2 = (PFN_vkCmdResetEvent2)vulkanLib.LoadFunc("vkCmdResetEvent2");
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkCmdResetEvent2KHR = (PFN_vkCmdResetEvent2KHR)vulkanLib.LoadFunc("vkCmdResetEvent2KHR");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdWaitEvents2 = (PFN_vkCmdWaitEvents2)vulkanLib.LoadFunc("vkCmdWaitEvents2");
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkCmdWaitEvents2KHR = (PFN_vkCmdWaitEvents2KHR)vulkanLib.LoadFunc("vkCmdWaitEvents2KHR");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdPipelineBarrier2 = (PFN_vkCmdPipelineBarrier2)vulkanLib.LoadFunc("vkCmdPipelineBarrier2");
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkCmdPipelineBarrier2KHR = (PFN_vkCmdPipelineBarrier2KHR)vulkanLib.LoadFunc("vkCmdPipelineBarrier2KHR");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkQueueSubmit2 = (PFN_vkQueueSubmit2)vulkanLib.LoadFunc("vkQueueSubmit2");
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkQueueSubmit2KHR = (PFN_vkQueueSubmit2KHR)vulkanLib.LoadFunc("vkQueueSubmit2KHR");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdWriteTimestamp2 = (PFN_vkCmdWriteTimestamp2)vulkanLib.LoadFunc("vkCmdWriteTimestamp2");
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		staticPfn_vkCmdWriteTimestamp2KHR = (PFN_vkCmdWriteTimestamp2KHR)vulkanLib.LoadFunc("vkCmdWriteTimestamp2KHR");
#endif
#if (defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) && (defined(VK_AMD_buffer_marker))
		staticPfn_vkCmdWriteBufferMarker2AMD = (PFN_vkCmdWriteBufferMarker2AMD)vulkanLib.LoadFunc("vkCmdWriteBufferMarker2AMD");
#endif
#if (defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) && (defined(VK_NV_device_diagnostic_checkpoints))
		staticPfn_vkGetQueueCheckpointData2NV = (PFN_vkGetQueueCheckpointData2NV)vulkanLib.LoadFunc("vkGetQueueCheckpointData2NV");
#endif
#if defined(VK_EXT_host_image_copy) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_copy_commands2) && defined(VK_KHR_format_feature_flags2))
		staticPfn_vkCopyMemoryToImageEXT = (PFN_vkCopyMemoryToImageEXT)vulkanLib.LoadFunc("vkCopyMemoryToImageEXT");
		staticPfn_vkCopyImageToMemoryEXT = (PFN_vkCopyImageToMemoryEXT)vulkanLib.LoadFunc("vkCopyImageToMemoryEXT");
		staticPfn_vkCopyImageToImageEXT = (PFN_vkCopyImageToImageEXT)vulkanLib.LoadFunc("vkCopyImageToImageEXT");
		staticPfn_vkTransitionImageLayoutEXT = (PFN_vkTransitionImageLayoutEXT)vulkanLib.LoadFunc("vkTransitionImageLayoutEXT");
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
		staticPfn_vkGetPhysicalDeviceVideoCapabilitiesKHR = (PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceVideoCapabilitiesKHR");
		staticPfn_vkGetPhysicalDeviceVideoFormatPropertiesKHR = (PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceVideoFormatPropertiesKHR");
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
		staticPfn_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = (PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR");
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
		staticPfn_vkCreateVideoSessionKHR = (PFN_vkCreateVideoSessionKHR)vulkanLib.LoadFunc("vkCreateVideoSessionKHR");
		staticPfn_vkDestroyVideoSessionKHR = (PFN_vkDestroyVideoSessionKHR)vulkanLib.LoadFunc("vkDestroyVideoSessionKHR");
		staticPfn_vkCreateVideoSessionParametersKHR = (PFN_vkCreateVideoSessionParametersKHR)vulkanLib.LoadFunc("vkCreateVideoSessionParametersKHR");
		staticPfn_vkUpdateVideoSessionParametersKHR = (PFN_vkUpdateVideoSessionParametersKHR)vulkanLib.LoadFunc("vkUpdateVideoSessionParametersKHR");
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
		staticPfn_vkGetEncodedVideoSessionParametersKHR = (PFN_vkGetEncodedVideoSessionParametersKHR)vulkanLib.LoadFunc("vkGetEncodedVideoSessionParametersKHR");
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
		staticPfn_vkDestroyVideoSessionParametersKHR = (PFN_vkDestroyVideoSessionParametersKHR)vulkanLib.LoadFunc("vkDestroyVideoSessionParametersKHR");
		staticPfn_vkGetVideoSessionMemoryRequirementsKHR = (PFN_vkGetVideoSessionMemoryRequirementsKHR)vulkanLib.LoadFunc("vkGetVideoSessionMemoryRequirementsKHR");
		staticPfn_vkBindVideoSessionMemoryKHR = (PFN_vkBindVideoSessionMemoryKHR)vulkanLib.LoadFunc("vkBindVideoSessionMemoryKHR");
#endif
#if defined(VK_KHR_video_decode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
		staticPfn_vkCmdDecodeVideoKHR = (PFN_vkCmdDecodeVideoKHR)vulkanLib.LoadFunc("vkCmdDecodeVideoKHR");
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
		staticPfn_vkCmdBeginVideoCodingKHR = (PFN_vkCmdBeginVideoCodingKHR)vulkanLib.LoadFunc("vkCmdBeginVideoCodingKHR");
		staticPfn_vkCmdControlVideoCodingKHR = (PFN_vkCmdControlVideoCodingKHR)vulkanLib.LoadFunc("vkCmdControlVideoCodingKHR");
		staticPfn_vkCmdEndVideoCodingKHR = (PFN_vkCmdEndVideoCodingKHR)vulkanLib.LoadFunc("vkCmdEndVideoCodingKHR");
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
		staticPfn_vkCmdEncodeVideoKHR = (PFN_vkCmdEncodeVideoKHR)vulkanLib.LoadFunc("vkCmdEncodeVideoKHR");
#endif
#if defined(VK_NV_memory_decompression) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address))
		staticPfn_vkCmdDecompressMemoryNV = (PFN_vkCmdDecompressMemoryNV)vulkanLib.LoadFunc("vkCmdDecompressMemoryNV");
		staticPfn_vkCmdDecompressMemoryIndirectCountNV = (PFN_vkCmdDecompressMemoryIndirectCountNV)vulkanLib.LoadFunc("vkCmdDecompressMemoryIndirectCountNV");
#endif
#if defined(VK_NVX_binary_import)
		staticPfn_vkCreateCuModuleNVX = (PFN_vkCreateCuModuleNVX)vulkanLib.LoadFunc("vkCreateCuModuleNVX");
		staticPfn_vkCreateCuFunctionNVX = (PFN_vkCreateCuFunctionNVX)vulkanLib.LoadFunc("vkCreateCuFunctionNVX");
		staticPfn_vkDestroyCuModuleNVX = (PFN_vkDestroyCuModuleNVX)vulkanLib.LoadFunc("vkDestroyCuModuleNVX");
		staticPfn_vkDestroyCuFunctionNVX = (PFN_vkDestroyCuFunctionNVX)vulkanLib.LoadFunc("vkDestroyCuFunctionNVX");
		staticPfn_vkCmdCuLaunchKernelNVX = (PFN_vkCmdCuLaunchKernelNVX)vulkanLib.LoadFunc("vkCmdCuLaunchKernelNVX");
#endif
#if defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_synchronization2) && defined(VK_EXT_descriptor_indexing))
		staticPfn_vkGetDescriptorSetLayoutSizeEXT = (PFN_vkGetDescriptorSetLayoutSizeEXT)vulkanLib.LoadFunc("vkGetDescriptorSetLayoutSizeEXT");
		staticPfn_vkGetDescriptorSetLayoutBindingOffsetEXT = (PFN_vkGetDescriptorSetLayoutBindingOffsetEXT)vulkanLib.LoadFunc("vkGetDescriptorSetLayoutBindingOffsetEXT");
		staticPfn_vkGetDescriptorEXT = (PFN_vkGetDescriptorEXT)vulkanLib.LoadFunc("vkGetDescriptorEXT");
		staticPfn_vkCmdBindDescriptorBuffersEXT = (PFN_vkCmdBindDescriptorBuffersEXT)vulkanLib.LoadFunc("vkCmdBindDescriptorBuffersEXT");
		staticPfn_vkCmdSetDescriptorBufferOffsetsEXT = (PFN_vkCmdSetDescriptorBufferOffsetsEXT)vulkanLib.LoadFunc("vkCmdSetDescriptorBufferOffsetsEXT");
		staticPfn_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = (PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT)vulkanLib.LoadFunc("vkCmdBindDescriptorBufferEmbeddedSamplersEXT");
		staticPfn_vkGetBufferOpaqueCaptureDescriptorDataEXT = (PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT)vulkanLib.LoadFunc("vkGetBufferOpaqueCaptureDescriptorDataEXT");
		staticPfn_vkGetImageOpaqueCaptureDescriptorDataEXT = (PFN_vkGetImageOpaqueCaptureDescriptorDataEXT)vulkanLib.LoadFunc("vkGetImageOpaqueCaptureDescriptorDataEXT");
		staticPfn_vkGetImageViewOpaqueCaptureDescriptorDataEXT = (PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT)vulkanLib.LoadFunc("vkGetImageViewOpaqueCaptureDescriptorDataEXT");
		staticPfn_vkGetSamplerOpaqueCaptureDescriptorDataEXT = (PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT)vulkanLib.LoadFunc("vkGetSamplerOpaqueCaptureDescriptorDataEXT");
#endif
#if (defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_synchronization2) && defined(VK_EXT_descriptor_indexing))) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing))
		staticPfn_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = (PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT)vulkanLib.LoadFunc("vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT");
#endif
#if defined(VK_EXT_pageable_device_local_memory) && (defined(VK_EXT_memory_priority))
		staticPfn_vkSetDeviceMemoryPriorityEXT = (PFN_vkSetDeviceMemoryPriorityEXT)vulkanLib.LoadFunc("vkSetDeviceMemoryPriorityEXT");
#endif
#if defined(VK_EXT_acquire_drm_display) && (defined(VK_EXT_direct_mode_display))
		staticPfn_vkAcquireDrmDisplayEXT = (PFN_vkAcquireDrmDisplayEXT)vulkanLib.LoadFunc("vkAcquireDrmDisplayEXT");
		staticPfn_vkGetDrmDisplayEXT = (PFN_vkGetDrmDisplayEXT)vulkanLib.LoadFunc("vkGetDrmDisplayEXT");
#endif
#if defined(VK_KHR_present_wait) && (defined(VK_KHR_swapchain) && defined(VK_KHR_present_id))
		staticPfn_vkWaitForPresentKHR = (PFN_vkWaitForPresentKHR)vulkanLib.LoadFunc("vkWaitForPresentKHR");
#endif
#if defined(VK_FUCHSIA_buffer_collection) && (defined(VK_FUCHSIA_external_memory) && defined(VK_KHR_sampler_ycbcr_conversion))
		staticPfn_vkCreateBufferCollectionFUCHSIA = (PFN_vkCreateBufferCollectionFUCHSIA)vulkanLib.LoadFunc("vkCreateBufferCollectionFUCHSIA");
		staticPfn_vkSetBufferCollectionBufferConstraintsFUCHSIA = (PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA)vulkanLib.LoadFunc("vkSetBufferCollectionBufferConstraintsFUCHSIA");
		staticPfn_vkSetBufferCollectionImageConstraintsFUCHSIA = (PFN_vkSetBufferCollectionImageConstraintsFUCHSIA)vulkanLib.LoadFunc("vkSetBufferCollectionImageConstraintsFUCHSIA");
		staticPfn_vkDestroyBufferCollectionFUCHSIA = (PFN_vkDestroyBufferCollectionFUCHSIA)vulkanLib.LoadFunc("vkDestroyBufferCollectionFUCHSIA");
		staticPfn_vkGetBufferCollectionPropertiesFUCHSIA = (PFN_vkGetBufferCollectionPropertiesFUCHSIA)vulkanLib.LoadFunc("vkGetBufferCollectionPropertiesFUCHSIA");
#endif
#if defined(VK_NV_cuda_kernel_launch)
		staticPfn_vkCreateCudaModuleNV = (PFN_vkCreateCudaModuleNV)vulkanLib.LoadFunc("vkCreateCudaModuleNV");
		staticPfn_vkGetCudaModuleCacheNV = (PFN_vkGetCudaModuleCacheNV)vulkanLib.LoadFunc("vkGetCudaModuleCacheNV");
		staticPfn_vkCreateCudaFunctionNV = (PFN_vkCreateCudaFunctionNV)vulkanLib.LoadFunc("vkCreateCudaFunctionNV");
		staticPfn_vkDestroyCudaModuleNV = (PFN_vkDestroyCudaModuleNV)vulkanLib.LoadFunc("vkDestroyCudaModuleNV");
		staticPfn_vkDestroyCudaFunctionNV = (PFN_vkDestroyCudaFunctionNV)vulkanLib.LoadFunc("vkDestroyCudaFunctionNV");
		staticPfn_vkCmdCudaLaunchKernelNV = (PFN_vkCmdCudaLaunchKernelNV)vulkanLib.LoadFunc("vkCmdCudaLaunchKernelNV");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdBeginRendering = (PFN_vkCmdBeginRendering)vulkanLib.LoadFunc("vkCmdBeginRendering");
#endif
#if defined(VK_KHR_dynamic_rendering) && (defined(VK_KHR_depth_stencil_resolve) && defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkCmdBeginRenderingKHR = (PFN_vkCmdBeginRenderingKHR)vulkanLib.LoadFunc("vkCmdBeginRenderingKHR");
#endif
#if defined(VK_VERSION_1_3)
		staticPfn_vkCmdEndRendering = (PFN_vkCmdEndRendering)vulkanLib.LoadFunc("vkCmdEndRendering");
#endif
#if defined(VK_KHR_dynamic_rendering) && (defined(VK_KHR_depth_stencil_resolve) && defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkCmdEndRenderingKHR = (PFN_vkCmdEndRenderingKHR)vulkanLib.LoadFunc("vkCmdEndRenderingKHR");
#endif
#if defined(VK_VALVE_descriptor_set_host_mapping) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkGetDescriptorSetLayoutHostMappingInfoVALVE = (PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE)vulkanLib.LoadFunc("vkGetDescriptorSetLayoutHostMappingInfoVALVE");
		staticPfn_vkGetDescriptorSetHostMappingVALVE = (PFN_vkGetDescriptorSetHostMappingVALVE)vulkanLib.LoadFunc("vkGetDescriptorSetHostMappingVALVE");
#endif
#if defined(VK_EXT_opacity_micromap) && (defined(VK_KHR_acceleration_structure) && defined(VK_KHR_synchronization2))
		staticPfn_vkCreateMicromapEXT = (PFN_vkCreateMicromapEXT)vulkanLib.LoadFunc("vkCreateMicromapEXT");
		staticPfn_vkCmdBuildMicromapsEXT = (PFN_vkCmdBuildMicromapsEXT)vulkanLib.LoadFunc("vkCmdBuildMicromapsEXT");
		staticPfn_vkBuildMicromapsEXT = (PFN_vkBuildMicromapsEXT)vulkanLib.LoadFunc("vkBuildMicromapsEXT");
		staticPfn_vkDestroyMicromapEXT = (PFN_vkDestroyMicromapEXT)vulkanLib.LoadFunc("vkDestroyMicromapEXT");
		staticPfn_vkCmdCopyMicromapEXT = (PFN_vkCmdCopyMicromapEXT)vulkanLib.LoadFunc("vkCmdCopyMicromapEXT");
		staticPfn_vkCopyMicromapEXT = (PFN_vkCopyMicromapEXT)vulkanLib.LoadFunc("vkCopyMicromapEXT");
		staticPfn_vkCmdCopyMicromapToMemoryEXT = (PFN_vkCmdCopyMicromapToMemoryEXT)vulkanLib.LoadFunc("vkCmdCopyMicromapToMemoryEXT");
		staticPfn_vkCopyMicromapToMemoryEXT = (PFN_vkCopyMicromapToMemoryEXT)vulkanLib.LoadFunc("vkCopyMicromapToMemoryEXT");
		staticPfn_vkCmdCopyMemoryToMicromapEXT = (PFN_vkCmdCopyMemoryToMicromapEXT)vulkanLib.LoadFunc("vkCmdCopyMemoryToMicromapEXT");
		staticPfn_vkCopyMemoryToMicromapEXT = (PFN_vkCopyMemoryToMicromapEXT)vulkanLib.LoadFunc("vkCopyMemoryToMicromapEXT");
		staticPfn_vkCmdWriteMicromapsPropertiesEXT = (PFN_vkCmdWriteMicromapsPropertiesEXT)vulkanLib.LoadFunc("vkCmdWriteMicromapsPropertiesEXT");
		staticPfn_vkWriteMicromapsPropertiesEXT = (PFN_vkWriteMicromapsPropertiesEXT)vulkanLib.LoadFunc("vkWriteMicromapsPropertiesEXT");
		staticPfn_vkGetDeviceMicromapCompatibilityEXT = (PFN_vkGetDeviceMicromapCompatibilityEXT)vulkanLib.LoadFunc("vkGetDeviceMicromapCompatibilityEXT");
		staticPfn_vkGetMicromapBuildSizesEXT = (PFN_vkGetMicromapBuildSizesEXT)vulkanLib.LoadFunc("vkGetMicromapBuildSizesEXT");
#endif
#if defined(VK_EXT_shader_module_identifier) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_EXT_pipeline_creation_cache_control))
		staticPfn_vkGetShaderModuleIdentifierEXT = (PFN_vkGetShaderModuleIdentifierEXT)vulkanLib.LoadFunc("vkGetShaderModuleIdentifierEXT");
		staticPfn_vkGetShaderModuleCreateInfoIdentifierEXT = (PFN_vkGetShaderModuleCreateInfoIdentifierEXT)vulkanLib.LoadFunc("vkGetShaderModuleCreateInfoIdentifierEXT");
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
		staticPfn_vkGetImageSubresourceLayout2KHR = (PFN_vkGetImageSubresourceLayout2KHR)vulkanLib.LoadFunc("vkGetImageSubresourceLayout2KHR");
#endif
#if (defined(VK_EXT_host_image_copy) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_copy_commands2) && defined(VK_KHR_format_feature_flags2))) || (defined(VK_EXT_image_compression_control) && (defined(VK_KHR_get_physical_device_properties2)))
		staticPfn_vkGetImageSubresourceLayout2EXT = (PFN_vkGetImageSubresourceLayout2EXT)vulkanLib.LoadFunc("vkGetImageSubresourceLayout2EXT");
#endif
#if defined(VK_EXT_pipeline_properties) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkGetPipelinePropertiesEXT = (PFN_vkGetPipelinePropertiesEXT)vulkanLib.LoadFunc("vkGetPipelinePropertiesEXT");
#endif
#if defined(VK_EXT_metal_objects)
		staticPfn_vkExportMetalObjectsEXT = (PFN_vkExportMetalObjectsEXT)vulkanLib.LoadFunc("vkExportMetalObjectsEXT");
#endif
#if defined(VK_QCOM_tile_properties) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkGetFramebufferTilePropertiesQCOM = (PFN_vkGetFramebufferTilePropertiesQCOM)vulkanLib.LoadFunc("vkGetFramebufferTilePropertiesQCOM");
		staticPfn_vkGetDynamicRenderingTilePropertiesQCOM = (PFN_vkGetDynamicRenderingTilePropertiesQCOM)vulkanLib.LoadFunc("vkGetDynamicRenderingTilePropertiesQCOM");
#endif
#if defined(VK_NV_optical_flow) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_format_feature_flags2) && defined(VK_KHR_synchronization2))
		staticPfn_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = (PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV)vulkanLib.LoadFunc("vkGetPhysicalDeviceOpticalFlowImageFormatsNV");
		staticPfn_vkCreateOpticalFlowSessionNV = (PFN_vkCreateOpticalFlowSessionNV)vulkanLib.LoadFunc("vkCreateOpticalFlowSessionNV");
		staticPfn_vkDestroyOpticalFlowSessionNV = (PFN_vkDestroyOpticalFlowSessionNV)vulkanLib.LoadFunc("vkDestroyOpticalFlowSessionNV");
		staticPfn_vkBindOpticalFlowSessionImageNV = (PFN_vkBindOpticalFlowSessionImageNV)vulkanLib.LoadFunc("vkBindOpticalFlowSessionImageNV");
		staticPfn_vkCmdOpticalFlowExecuteNV = (PFN_vkCmdOpticalFlowExecuteNV)vulkanLib.LoadFunc("vkCmdOpticalFlowExecuteNV");
#endif
#if defined(VK_EXT_device_fault) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkGetDeviceFaultInfoEXT = (PFN_vkGetDeviceFaultInfoEXT)vulkanLib.LoadFunc("vkGetDeviceFaultInfoEXT");
#endif
#if defined(VK_EXT_depth_bias_control) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkCmdSetDepthBias2EXT = (PFN_vkCmdSetDepthBias2EXT)vulkanLib.LoadFunc("vkCmdSetDepthBias2EXT");
#endif
#if defined(VK_EXT_swapchain_maintenance1) && (defined(VK_KHR_swapchain) && defined(VK_EXT_surface_maintenance1) && defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkReleaseSwapchainImagesEXT = (PFN_vkReleaseSwapchainImagesEXT)vulkanLib.LoadFunc("vkReleaseSwapchainImagesEXT");
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
		staticPfn_vkGetDeviceImageSubresourceLayoutKHR = (PFN_vkGetDeviceImageSubresourceLayoutKHR)vulkanLib.LoadFunc("vkGetDeviceImageSubresourceLayoutKHR");
#endif
#if defined(VK_KHR_map_memory2)
		staticPfn_vkMapMemory2KHR = (PFN_vkMapMemory2KHR)vulkanLib.LoadFunc("vkMapMemory2KHR");
		staticPfn_vkUnmapMemory2KHR = (PFN_vkUnmapMemory2KHR)vulkanLib.LoadFunc("vkUnmapMemory2KHR");
#endif
#if defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))
		staticPfn_vkCreateShadersEXT = (PFN_vkCreateShadersEXT)vulkanLib.LoadFunc("vkCreateShadersEXT");
		staticPfn_vkDestroyShaderEXT = (PFN_vkDestroyShaderEXT)vulkanLib.LoadFunc("vkDestroyShaderEXT");
		staticPfn_vkGetShaderBinaryDataEXT = (PFN_vkGetShaderBinaryDataEXT)vulkanLib.LoadFunc("vkGetShaderBinaryDataEXT");
		staticPfn_vkCmdBindShadersEXT = (PFN_vkCmdBindShadersEXT)vulkanLib.LoadFunc("vkCmdBindShadersEXT");
#endif
#if defined(VK_QNX_external_memory_screen_buffer) && (((defined(VK_KHR_sampler_ycbcr_conversion) && defined(VK_KHR_external_memory) && defined(VK_KHR_dedicated_allocation)) || defined(VK_VERSION_1_1)) && defined(VK_EXT_queue_family_foreign))
		staticPfn_vkGetScreenBufferPropertiesQNX = (PFN_vkGetScreenBufferPropertiesQNX)vulkanLib.LoadFunc("vkGetScreenBufferPropertiesQNX");
#endif
#if defined(VK_KHR_cooperative_matrix) && (defined(VK_KHR_get_physical_device_properties2))
		staticPfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = (PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR)vulkanLib.LoadFunc("vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR");
#endif
#if defined(VK_AMDX_shader_enqueue) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_synchronization2) && defined(VK_KHR_pipeline_library) && defined(VK_KHR_spirv_1_4))
		staticPfn_vkGetExecutionGraphPipelineScratchSizeAMDX = (PFN_vkGetExecutionGraphPipelineScratchSizeAMDX)vulkanLib.LoadFunc("vkGetExecutionGraphPipelineScratchSizeAMDX");
		staticPfn_vkGetExecutionGraphPipelineNodeIndexAMDX = (PFN_vkGetExecutionGraphPipelineNodeIndexAMDX)vulkanLib.LoadFunc("vkGetExecutionGraphPipelineNodeIndexAMDX");
		staticPfn_vkCreateExecutionGraphPipelinesAMDX = (PFN_vkCreateExecutionGraphPipelinesAMDX)vulkanLib.LoadFunc("vkCreateExecutionGraphPipelinesAMDX");
		staticPfn_vkCmdInitializeGraphScratchMemoryAMDX = (PFN_vkCmdInitializeGraphScratchMemoryAMDX)vulkanLib.LoadFunc("vkCmdInitializeGraphScratchMemoryAMDX");
		staticPfn_vkCmdDispatchGraphAMDX = (PFN_vkCmdDispatchGraphAMDX)vulkanLib.LoadFunc("vkCmdDispatchGraphAMDX");
		staticPfn_vkCmdDispatchGraphIndirectAMDX = (PFN_vkCmdDispatchGraphIndirectAMDX)vulkanLib.LoadFunc("vkCmdDispatchGraphIndirectAMDX");
		staticPfn_vkCmdDispatchGraphIndirectCountAMDX = (PFN_vkCmdDispatchGraphIndirectCountAMDX)vulkanLib.LoadFunc("vkCmdDispatchGraphIndirectCountAMDX");
#endif
#if defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))
		staticPfn_vkCmdBindDescriptorSets2KHR = (PFN_vkCmdBindDescriptorSets2KHR)vulkanLib.LoadFunc("vkCmdBindDescriptorSets2KHR");
		staticPfn_vkCmdPushConstants2KHR = (PFN_vkCmdPushConstants2KHR)vulkanLib.LoadFunc("vkCmdPushConstants2KHR");
#endif
#if (defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))) && (defined(VK_KHR_push_descriptor))
		staticPfn_vkCmdPushDescriptorSet2KHR = (PFN_vkCmdPushDescriptorSet2KHR)vulkanLib.LoadFunc("vkCmdPushDescriptorSet2KHR");
		staticPfn_vkCmdPushDescriptorSetWithTemplate2KHR = (PFN_vkCmdPushDescriptorSetWithTemplate2KHR)vulkanLib.LoadFunc("vkCmdPushDescriptorSetWithTemplate2KHR");
#endif
#if (defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))) && (defined(VK_EXT_descriptor_buffer))
		staticPfn_vkCmdSetDescriptorBufferOffsets2EXT = (PFN_vkCmdSetDescriptorBufferOffsets2EXT)vulkanLib.LoadFunc("vkCmdSetDescriptorBufferOffsets2EXT");
		staticPfn_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = (PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT)vulkanLib.LoadFunc("vkCmdBindDescriptorBufferEmbeddedSamplers2EXT");
#endif
#if defined(VK_NV_low_latency2) && (defined(VK_VERSION_1_2) || defined(VK_KHR_timeline_semaphore))
		staticPfn_vkSetLatencySleepModeNV = (PFN_vkSetLatencySleepModeNV)vulkanLib.LoadFunc("vkSetLatencySleepModeNV");
		staticPfn_vkLatencySleepNV = (PFN_vkLatencySleepNV)vulkanLib.LoadFunc("vkLatencySleepNV");
		staticPfn_vkSetLatencyMarkerNV = (PFN_vkSetLatencyMarkerNV)vulkanLib.LoadFunc("vkSetLatencyMarkerNV");
		staticPfn_vkGetLatencyTimingsNV = (PFN_vkGetLatencyTimingsNV)vulkanLib.LoadFunc("vkGetLatencyTimingsNV");
		staticPfn_vkQueueNotifyOutOfBandNV = (PFN_vkQueueNotifyOutOfBandNV)vulkanLib.LoadFunc("vkQueueNotifyOutOfBandNV");
#endif
#if defined(VK_KHR_dynamic_rendering_local_read) && (defined(VK_KHR_dynamic_rendering))
		staticPfn_vkCmdSetRenderingAttachmentLocationsKHR = (PFN_vkCmdSetRenderingAttachmentLocationsKHR)vulkanLib.LoadFunc("vkCmdSetRenderingAttachmentLocationsKHR");
		staticPfn_vkCmdSetRenderingInputAttachmentIndicesKHR = (PFN_vkCmdSetRenderingInputAttachmentIndicesKHR)vulkanLib.LoadFunc("vkCmdSetRenderingInputAttachmentIndicesKHR");
#endif
	}

	// Public functions
	VulkanLoader::VulkanLoader() {
		// Load the static function pointers if no loaders were previously created
		if(!loaderCount++)
			LoadStaticFunctionPointers();
		
		// Set the function pointers
#if defined(VK_VERSION_1_0)
		pfn_vkCreateInstance = staticPfn_vkCreateInstance;
		pfn_vkDestroyInstance = staticPfn_vkDestroyInstance;
		pfn_vkEnumeratePhysicalDevices = staticPfn_vkEnumeratePhysicalDevices;
		pfn_vkGetDeviceProcAddr = staticPfn_vkGetDeviceProcAddr;
		pfn_vkGetInstanceProcAddr = staticPfn_vkGetInstanceProcAddr;
		pfn_vkGetPhysicalDeviceProperties = staticPfn_vkGetPhysicalDeviceProperties;
		pfn_vkGetPhysicalDeviceQueueFamilyProperties = staticPfn_vkGetPhysicalDeviceQueueFamilyProperties;
		pfn_vkGetPhysicalDeviceMemoryProperties = staticPfn_vkGetPhysicalDeviceMemoryProperties;
		pfn_vkGetPhysicalDeviceFeatures = staticPfn_vkGetPhysicalDeviceFeatures;
		pfn_vkGetPhysicalDeviceFormatProperties = staticPfn_vkGetPhysicalDeviceFormatProperties;
		pfn_vkGetPhysicalDeviceImageFormatProperties = staticPfn_vkGetPhysicalDeviceImageFormatProperties;
		pfn_vkCreateDevice = staticPfn_vkCreateDevice;
		pfn_vkDestroyDevice = staticPfn_vkDestroyDevice;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkEnumerateInstanceVersion = staticPfn_vkEnumerateInstanceVersion;
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkEnumerateInstanceLayerProperties = staticPfn_vkEnumerateInstanceLayerProperties;
		pfn_vkEnumerateInstanceExtensionProperties = staticPfn_vkEnumerateInstanceExtensionProperties;
		pfn_vkEnumerateDeviceLayerProperties = staticPfn_vkEnumerateDeviceLayerProperties;
		pfn_vkEnumerateDeviceExtensionProperties = staticPfn_vkEnumerateDeviceExtensionProperties;
		pfn_vkGetDeviceQueue = staticPfn_vkGetDeviceQueue;
		pfn_vkQueueSubmit = staticPfn_vkQueueSubmit;
		pfn_vkQueueWaitIdle = staticPfn_vkQueueWaitIdle;
		pfn_vkDeviceWaitIdle = staticPfn_vkDeviceWaitIdle;
		pfn_vkAllocateMemory = staticPfn_vkAllocateMemory;
		pfn_vkFreeMemory = staticPfn_vkFreeMemory;
		pfn_vkMapMemory = staticPfn_vkMapMemory;
		pfn_vkUnmapMemory = staticPfn_vkUnmapMemory;
		pfn_vkFlushMappedMemoryRanges = staticPfn_vkFlushMappedMemoryRanges;
		pfn_vkInvalidateMappedMemoryRanges = staticPfn_vkInvalidateMappedMemoryRanges;
		pfn_vkGetDeviceMemoryCommitment = staticPfn_vkGetDeviceMemoryCommitment;
		pfn_vkGetBufferMemoryRequirements = staticPfn_vkGetBufferMemoryRequirements;
		pfn_vkBindBufferMemory = staticPfn_vkBindBufferMemory;
		pfn_vkGetImageMemoryRequirements = staticPfn_vkGetImageMemoryRequirements;
		pfn_vkBindImageMemory = staticPfn_vkBindImageMemory;
		pfn_vkGetImageSparseMemoryRequirements = staticPfn_vkGetImageSparseMemoryRequirements;
		pfn_vkGetPhysicalDeviceSparseImageFormatProperties = staticPfn_vkGetPhysicalDeviceSparseImageFormatProperties;
		pfn_vkQueueBindSparse = staticPfn_vkQueueBindSparse;
		pfn_vkCreateFence = staticPfn_vkCreateFence;
		pfn_vkDestroyFence = staticPfn_vkDestroyFence;
		pfn_vkResetFences = staticPfn_vkResetFences;
		pfn_vkGetFenceStatus = staticPfn_vkGetFenceStatus;
		pfn_vkWaitForFences = staticPfn_vkWaitForFences;
		pfn_vkCreateSemaphore = staticPfn_vkCreateSemaphore;
		pfn_vkDestroySemaphore = staticPfn_vkDestroySemaphore;
		pfn_vkCreateEvent = staticPfn_vkCreateEvent;
		pfn_vkDestroyEvent = staticPfn_vkDestroyEvent;
		pfn_vkGetEventStatus = staticPfn_vkGetEventStatus;
		pfn_vkSetEvent = staticPfn_vkSetEvent;
		pfn_vkResetEvent = staticPfn_vkResetEvent;
		pfn_vkCreateQueryPool = staticPfn_vkCreateQueryPool;
		pfn_vkDestroyQueryPool = staticPfn_vkDestroyQueryPool;
		pfn_vkGetQueryPoolResults = staticPfn_vkGetQueryPoolResults;
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkResetQueryPool = staticPfn_vkResetQueryPool;
#endif
#if defined(VK_EXT_host_query_reset) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkResetQueryPoolEXT = staticPfn_vkResetQueryPoolEXT;
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkCreateBuffer = staticPfn_vkCreateBuffer;
		pfn_vkDestroyBuffer = staticPfn_vkDestroyBuffer;
		pfn_vkCreateBufferView = staticPfn_vkCreateBufferView;
		pfn_vkDestroyBufferView = staticPfn_vkDestroyBufferView;
		pfn_vkCreateImage = staticPfn_vkCreateImage;
		pfn_vkDestroyImage = staticPfn_vkDestroyImage;
		pfn_vkGetImageSubresourceLayout = staticPfn_vkGetImageSubresourceLayout;
		pfn_vkCreateImageView = staticPfn_vkCreateImageView;
		pfn_vkDestroyImageView = staticPfn_vkDestroyImageView;
		pfn_vkCreateShaderModule = staticPfn_vkCreateShaderModule;
		pfn_vkDestroyShaderModule = staticPfn_vkDestroyShaderModule;
		pfn_vkCreatePipelineCache = staticPfn_vkCreatePipelineCache;
		pfn_vkDestroyPipelineCache = staticPfn_vkDestroyPipelineCache;
		pfn_vkGetPipelineCacheData = staticPfn_vkGetPipelineCacheData;
		pfn_vkMergePipelineCaches = staticPfn_vkMergePipelineCaches;
		pfn_vkCreateGraphicsPipelines = staticPfn_vkCreateGraphicsPipelines;
		pfn_vkCreateComputePipelines = staticPfn_vkCreateComputePipelines;
#endif
#if defined(VK_HUAWEI_subpass_shading) && (defined(VK_KHR_create_renderpass2) && defined(VK_KHR_synchronization2))
		pfn_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = staticPfn_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkDestroyPipeline = staticPfn_vkDestroyPipeline;
		pfn_vkCreatePipelineLayout = staticPfn_vkCreatePipelineLayout;
		pfn_vkDestroyPipelineLayout = staticPfn_vkDestroyPipelineLayout;
		pfn_vkCreateSampler = staticPfn_vkCreateSampler;
		pfn_vkDestroySampler = staticPfn_vkDestroySampler;
		pfn_vkCreateDescriptorSetLayout = staticPfn_vkCreateDescriptorSetLayout;
		pfn_vkDestroyDescriptorSetLayout = staticPfn_vkDestroyDescriptorSetLayout;
		pfn_vkCreateDescriptorPool = staticPfn_vkCreateDescriptorPool;
		pfn_vkDestroyDescriptorPool = staticPfn_vkDestroyDescriptorPool;
		pfn_vkResetDescriptorPool = staticPfn_vkResetDescriptorPool;
		pfn_vkAllocateDescriptorSets = staticPfn_vkAllocateDescriptorSets;
		pfn_vkFreeDescriptorSets = staticPfn_vkFreeDescriptorSets;
		pfn_vkUpdateDescriptorSets = staticPfn_vkUpdateDescriptorSets;
		pfn_vkCreateFramebuffer = staticPfn_vkCreateFramebuffer;
		pfn_vkDestroyFramebuffer = staticPfn_vkDestroyFramebuffer;
		pfn_vkCreateRenderPass = staticPfn_vkCreateRenderPass;
		pfn_vkDestroyRenderPass = staticPfn_vkDestroyRenderPass;
		pfn_vkGetRenderAreaGranularity = staticPfn_vkGetRenderAreaGranularity;
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
		pfn_vkGetRenderingAreaGranularityKHR = staticPfn_vkGetRenderingAreaGranularityKHR;
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkCreateCommandPool = staticPfn_vkCreateCommandPool;
		pfn_vkDestroyCommandPool = staticPfn_vkDestroyCommandPool;
		pfn_vkResetCommandPool = staticPfn_vkResetCommandPool;
		pfn_vkAllocateCommandBuffers = staticPfn_vkAllocateCommandBuffers;
		pfn_vkFreeCommandBuffers = staticPfn_vkFreeCommandBuffers;
		pfn_vkBeginCommandBuffer = staticPfn_vkBeginCommandBuffer;
		pfn_vkEndCommandBuffer = staticPfn_vkEndCommandBuffer;
		pfn_vkResetCommandBuffer = staticPfn_vkResetCommandBuffer;
		pfn_vkCmdBindPipeline = staticPfn_vkCmdBindPipeline;
#endif
#if defined(VK_EXT_attachment_feedback_loop_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_EXT_attachment_feedback_loop_layout))
		pfn_vkCmdSetAttachmentFeedbackLoopEnableEXT = staticPfn_vkCmdSetAttachmentFeedbackLoopEnableEXT;
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkCmdSetViewport = staticPfn_vkCmdSetViewport;
		pfn_vkCmdSetScissor = staticPfn_vkCmdSetScissor;
		pfn_vkCmdSetLineWidth = staticPfn_vkCmdSetLineWidth;
		pfn_vkCmdSetDepthBias = staticPfn_vkCmdSetDepthBias;
		pfn_vkCmdSetBlendConstants = staticPfn_vkCmdSetBlendConstants;
		pfn_vkCmdSetDepthBounds = staticPfn_vkCmdSetDepthBounds;
		pfn_vkCmdSetStencilCompareMask = staticPfn_vkCmdSetStencilCompareMask;
		pfn_vkCmdSetStencilWriteMask = staticPfn_vkCmdSetStencilWriteMask;
		pfn_vkCmdSetStencilReference = staticPfn_vkCmdSetStencilReference;
		pfn_vkCmdBindDescriptorSets = staticPfn_vkCmdBindDescriptorSets;
		pfn_vkCmdBindIndexBuffer = staticPfn_vkCmdBindIndexBuffer;
		pfn_vkCmdBindVertexBuffers = staticPfn_vkCmdBindVertexBuffers;
		pfn_vkCmdDraw = staticPfn_vkCmdDraw;
		pfn_vkCmdDrawIndexed = staticPfn_vkCmdDrawIndexed;
#endif
#if defined(VK_EXT_multi_draw) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdDrawMultiEXT = staticPfn_vkCmdDrawMultiEXT;
		pfn_vkCmdDrawMultiIndexedEXT = staticPfn_vkCmdDrawMultiIndexedEXT;
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkCmdDrawIndirect = staticPfn_vkCmdDrawIndirect;
		pfn_vkCmdDrawIndexedIndirect = staticPfn_vkCmdDrawIndexedIndirect;
		pfn_vkCmdDispatch = staticPfn_vkCmdDispatch;
		pfn_vkCmdDispatchIndirect = staticPfn_vkCmdDispatchIndirect;
#endif
#if defined(VK_HUAWEI_subpass_shading) && (defined(VK_KHR_create_renderpass2) && defined(VK_KHR_synchronization2))
		pfn_vkCmdSubpassShadingHUAWEI = staticPfn_vkCmdSubpassShadingHUAWEI;
#endif
#if defined(VK_HUAWEI_cluster_culling_shader) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdDrawClusterHUAWEI = staticPfn_vkCmdDrawClusterHUAWEI;
		pfn_vkCmdDrawClusterIndirectHUAWEI = staticPfn_vkCmdDrawClusterIndirectHUAWEI;
#endif
#if defined(VK_NV_device_generated_commands_compute) && (defined(VK_NV_device_generated_commands))
		pfn_vkCmdUpdatePipelineIndirectBufferNV = staticPfn_vkCmdUpdatePipelineIndirectBufferNV;
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkCmdCopyBuffer = staticPfn_vkCmdCopyBuffer;
		pfn_vkCmdCopyImage = staticPfn_vkCmdCopyImage;
		pfn_vkCmdBlitImage = staticPfn_vkCmdBlitImage;
		pfn_vkCmdCopyBufferToImage = staticPfn_vkCmdCopyBufferToImage;
		pfn_vkCmdCopyImageToBuffer = staticPfn_vkCmdCopyImageToBuffer;
#endif
#if defined(VK_NV_copy_memory_indirect) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address))
		pfn_vkCmdCopyMemoryIndirectNV = staticPfn_vkCmdCopyMemoryIndirectNV;
		pfn_vkCmdCopyMemoryToImageIndirectNV = staticPfn_vkCmdCopyMemoryToImageIndirectNV;
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkCmdUpdateBuffer = staticPfn_vkCmdUpdateBuffer;
		pfn_vkCmdFillBuffer = staticPfn_vkCmdFillBuffer;
		pfn_vkCmdClearColorImage = staticPfn_vkCmdClearColorImage;
		pfn_vkCmdClearDepthStencilImage = staticPfn_vkCmdClearDepthStencilImage;
		pfn_vkCmdClearAttachments = staticPfn_vkCmdClearAttachments;
		pfn_vkCmdResolveImage = staticPfn_vkCmdResolveImage;
		pfn_vkCmdSetEvent = staticPfn_vkCmdSetEvent;
		pfn_vkCmdResetEvent = staticPfn_vkCmdResetEvent;
		pfn_vkCmdWaitEvents = staticPfn_vkCmdWaitEvents;
		pfn_vkCmdPipelineBarrier = staticPfn_vkCmdPipelineBarrier;
		pfn_vkCmdBeginQuery = staticPfn_vkCmdBeginQuery;
		pfn_vkCmdEndQuery = staticPfn_vkCmdEndQuery;
#endif
#if defined(VK_EXT_conditional_rendering) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdBeginConditionalRenderingEXT = staticPfn_vkCmdBeginConditionalRenderingEXT;
		pfn_vkCmdEndConditionalRenderingEXT = staticPfn_vkCmdEndConditionalRenderingEXT;
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkCmdResetQueryPool = staticPfn_vkCmdResetQueryPool;
		pfn_vkCmdWriteTimestamp = staticPfn_vkCmdWriteTimestamp;
		pfn_vkCmdCopyQueryPoolResults = staticPfn_vkCmdCopyQueryPoolResults;
		pfn_vkCmdPushConstants = staticPfn_vkCmdPushConstants;
		pfn_vkCmdBeginRenderPass = staticPfn_vkCmdBeginRenderPass;
		pfn_vkCmdNextSubpass = staticPfn_vkCmdNextSubpass;
		pfn_vkCmdEndRenderPass = staticPfn_vkCmdEndRenderPass;
		pfn_vkCmdExecuteCommands = staticPfn_vkCmdExecuteCommands;
#endif
#if defined(VK_KHR_android_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateAndroidSurfaceKHR = staticPfn_vkCreateAndroidSurfaceKHR;
#endif
#if defined(VK_KHR_display) && (defined(VK_KHR_surface))
		pfn_vkGetPhysicalDeviceDisplayPropertiesKHR = staticPfn_vkGetPhysicalDeviceDisplayPropertiesKHR;
		pfn_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = staticPfn_vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
		pfn_vkGetDisplayPlaneSupportedDisplaysKHR = staticPfn_vkGetDisplayPlaneSupportedDisplaysKHR;
		pfn_vkGetDisplayModePropertiesKHR = staticPfn_vkGetDisplayModePropertiesKHR;
		pfn_vkCreateDisplayModeKHR = staticPfn_vkCreateDisplayModeKHR;
		pfn_vkGetDisplayPlaneCapabilitiesKHR = staticPfn_vkGetDisplayPlaneCapabilitiesKHR;
		pfn_vkCreateDisplayPlaneSurfaceKHR = staticPfn_vkCreateDisplayPlaneSurfaceKHR;
#endif
#if defined(VK_KHR_display_swapchain) && (defined(VK_KHR_swapchain) && defined(VK_KHR_display))
		pfn_vkCreateSharedSwapchainsKHR = staticPfn_vkCreateSharedSwapchainsKHR;
#endif
#if defined(VK_KHR_surface)
		pfn_vkDestroySurfaceKHR = staticPfn_vkDestroySurfaceKHR;
		pfn_vkGetPhysicalDeviceSurfaceSupportKHR = staticPfn_vkGetPhysicalDeviceSurfaceSupportKHR;
		pfn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = staticPfn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
		pfn_vkGetPhysicalDeviceSurfaceFormatsKHR = staticPfn_vkGetPhysicalDeviceSurfaceFormatsKHR;
		pfn_vkGetPhysicalDeviceSurfacePresentModesKHR = staticPfn_vkGetPhysicalDeviceSurfacePresentModesKHR;
#endif
#if defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))
		pfn_vkCreateSwapchainKHR = staticPfn_vkCreateSwapchainKHR;
		pfn_vkDestroySwapchainKHR = staticPfn_vkDestroySwapchainKHR;
		pfn_vkGetSwapchainImagesKHR = staticPfn_vkGetSwapchainImagesKHR;
		pfn_vkAcquireNextImageKHR = staticPfn_vkAcquireNextImageKHR;
		pfn_vkQueuePresentKHR = staticPfn_vkQueuePresentKHR;
#endif
#if defined(VK_NN_vi_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateViSurfaceNN = staticPfn_vkCreateViSurfaceNN;
#endif
#if defined(VK_KHR_wayland_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateWaylandSurfaceKHR = staticPfn_vkCreateWaylandSurfaceKHR;
		pfn_vkGetPhysicalDeviceWaylandPresentationSupportKHR = staticPfn_vkGetPhysicalDeviceWaylandPresentationSupportKHR;
#endif
#if defined(VK_KHR_win32_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateWin32SurfaceKHR = staticPfn_vkCreateWin32SurfaceKHR;
		pfn_vkGetPhysicalDeviceWin32PresentationSupportKHR = staticPfn_vkGetPhysicalDeviceWin32PresentationSupportKHR;
#endif
#if defined(VK_KHR_xlib_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateXlibSurfaceKHR = staticPfn_vkCreateXlibSurfaceKHR;
		pfn_vkGetPhysicalDeviceXlibPresentationSupportKHR = staticPfn_vkGetPhysicalDeviceXlibPresentationSupportKHR;
#endif
#if defined(VK_KHR_xcb_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateXcbSurfaceKHR = staticPfn_vkCreateXcbSurfaceKHR;
		pfn_vkGetPhysicalDeviceXcbPresentationSupportKHR = staticPfn_vkGetPhysicalDeviceXcbPresentationSupportKHR;
#endif
#if defined(VK_EXT_directfb_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateDirectFBSurfaceEXT = staticPfn_vkCreateDirectFBSurfaceEXT;
		pfn_vkGetPhysicalDeviceDirectFBPresentationSupportEXT = staticPfn_vkGetPhysicalDeviceDirectFBPresentationSupportEXT;
#endif
#if defined(VK_FUCHSIA_imagepipe_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateImagePipeSurfaceFUCHSIA = staticPfn_vkCreateImagePipeSurfaceFUCHSIA;
#endif
#if defined(VK_GGP_stream_descriptor_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateStreamDescriptorSurfaceGGP = staticPfn_vkCreateStreamDescriptorSurfaceGGP;
#endif
#if defined(VK_QNX_screen_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateScreenSurfaceQNX = staticPfn_vkCreateScreenSurfaceQNX;
		pfn_vkGetPhysicalDeviceScreenPresentationSupportQNX = staticPfn_vkGetPhysicalDeviceScreenPresentationSupportQNX;
#endif
#if defined(VK_EXT_debug_report)
		pfn_vkCreateDebugReportCallbackEXT = staticPfn_vkCreateDebugReportCallbackEXT;
		pfn_vkDestroyDebugReportCallbackEXT = staticPfn_vkDestroyDebugReportCallbackEXT;
		pfn_vkDebugReportMessageEXT = staticPfn_vkDebugReportMessageEXT;
#endif
#if defined(VK_EXT_debug_marker) && (defined(VK_EXT_debug_report))
		pfn_vkDebugMarkerSetObjectNameEXT = staticPfn_vkDebugMarkerSetObjectNameEXT;
		pfn_vkDebugMarkerSetObjectTagEXT = staticPfn_vkDebugMarkerSetObjectTagEXT;
		pfn_vkCmdDebugMarkerBeginEXT = staticPfn_vkCmdDebugMarkerBeginEXT;
		pfn_vkCmdDebugMarkerEndEXT = staticPfn_vkCmdDebugMarkerEndEXT;
		pfn_vkCmdDebugMarkerInsertEXT = staticPfn_vkCmdDebugMarkerInsertEXT;
#endif
#if defined(VK_NV_external_memory_capabilities)
		pfn_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = staticPfn_vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
#endif
#if defined(VK_NV_external_memory_win32) && (defined(VK_NV_external_memory))
		pfn_vkGetMemoryWin32HandleNV = staticPfn_vkGetMemoryWin32HandleNV;
#endif
#if defined(VK_NV_device_generated_commands) && (defined(VK_VERSION_1_1) && defined(VK_KHR_buffer_device_address))
		pfn_vkCmdExecuteGeneratedCommandsNV = staticPfn_vkCmdExecuteGeneratedCommandsNV;
		pfn_vkCmdPreprocessGeneratedCommandsNV = staticPfn_vkCmdPreprocessGeneratedCommandsNV;
		pfn_vkCmdBindPipelineShaderGroupNV = staticPfn_vkCmdBindPipelineShaderGroupNV;
		pfn_vkGetGeneratedCommandsMemoryRequirementsNV = staticPfn_vkGetGeneratedCommandsMemoryRequirementsNV;
		pfn_vkCreateIndirectCommandsLayoutNV = staticPfn_vkCreateIndirectCommandsLayoutNV;
		pfn_vkDestroyIndirectCommandsLayoutNV = staticPfn_vkDestroyIndirectCommandsLayoutNV;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceFeatures2 = staticPfn_vkGetPhysicalDeviceFeatures2;
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		pfn_vkGetPhysicalDeviceFeatures2KHR = staticPfn_vkGetPhysicalDeviceFeatures2KHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceProperties2 = staticPfn_vkGetPhysicalDeviceProperties2;
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		pfn_vkGetPhysicalDeviceProperties2KHR = staticPfn_vkGetPhysicalDeviceProperties2KHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceFormatProperties2 = staticPfn_vkGetPhysicalDeviceFormatProperties2;
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		pfn_vkGetPhysicalDeviceFormatProperties2KHR = staticPfn_vkGetPhysicalDeviceFormatProperties2KHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceImageFormatProperties2 = staticPfn_vkGetPhysicalDeviceImageFormatProperties2;
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		pfn_vkGetPhysicalDeviceImageFormatProperties2KHR = staticPfn_vkGetPhysicalDeviceImageFormatProperties2KHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceQueueFamilyProperties2 = staticPfn_vkGetPhysicalDeviceQueueFamilyProperties2;
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		pfn_vkGetPhysicalDeviceQueueFamilyProperties2KHR = staticPfn_vkGetPhysicalDeviceQueueFamilyProperties2KHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceMemoryProperties2 = staticPfn_vkGetPhysicalDeviceMemoryProperties2;
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		pfn_vkGetPhysicalDeviceMemoryProperties2KHR = staticPfn_vkGetPhysicalDeviceMemoryProperties2KHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceSparseImageFormatProperties2 = staticPfn_vkGetPhysicalDeviceSparseImageFormatProperties2;
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		pfn_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = staticPfn_vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
#endif
#if defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdPushDescriptorSetKHR = staticPfn_vkCmdPushDescriptorSetKHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkTrimCommandPool = staticPfn_vkTrimCommandPool;
#endif
#if defined(VK_KHR_maintenance1)
		pfn_vkTrimCommandPoolKHR = staticPfn_vkTrimCommandPoolKHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceExternalBufferProperties = staticPfn_vkGetPhysicalDeviceExternalBufferProperties;
#endif
#if defined(VK_KHR_external_memory_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPhysicalDeviceExternalBufferPropertiesKHR = staticPfn_vkGetPhysicalDeviceExternalBufferPropertiesKHR;
#endif
#if defined(VK_KHR_external_memory_win32) && (defined(VK_KHR_external_memory))
		pfn_vkGetMemoryWin32HandleKHR = staticPfn_vkGetMemoryWin32HandleKHR;
		pfn_vkGetMemoryWin32HandlePropertiesKHR = staticPfn_vkGetMemoryWin32HandlePropertiesKHR;
#endif
#if defined(VK_KHR_external_memory_fd) && (defined(VK_KHR_external_memory) || defined(VK_VERSION_1_1))
		pfn_vkGetMemoryFdKHR = staticPfn_vkGetMemoryFdKHR;
		pfn_vkGetMemoryFdPropertiesKHR = staticPfn_vkGetMemoryFdPropertiesKHR;
#endif
#if defined(VK_FUCHSIA_external_memory) && (defined(VK_KHR_external_memory_capabilities) && defined(VK_KHR_external_memory))
		pfn_vkGetMemoryZirconHandleFUCHSIA = staticPfn_vkGetMemoryZirconHandleFUCHSIA;
		pfn_vkGetMemoryZirconHandlePropertiesFUCHSIA = staticPfn_vkGetMemoryZirconHandlePropertiesFUCHSIA;
#endif
#if defined(VK_NV_external_memory_rdma) && (defined(VK_KHR_external_memory))
		pfn_vkGetMemoryRemoteAddressNV = staticPfn_vkGetMemoryRemoteAddressNV;
#endif
#if defined(VK_NV_external_memory_sci_buf) && (defined(VK_VERSION_1_1))
		pfn_vkGetMemorySciBufNV = staticPfn_vkGetMemorySciBufNV;
		pfn_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = staticPfn_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV;
		pfn_vkGetPhysicalDeviceSciBufAttributesNV = staticPfn_vkGetPhysicalDeviceSciBufAttributesNV;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceExternalSemaphoreProperties = staticPfn_vkGetPhysicalDeviceExternalSemaphoreProperties;
#endif
#if defined(VK_KHR_external_semaphore_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = staticPfn_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
#endif
#if defined(VK_KHR_external_semaphore_win32) && (defined(VK_KHR_external_semaphore))
		pfn_vkGetSemaphoreWin32HandleKHR = staticPfn_vkGetSemaphoreWin32HandleKHR;
		pfn_vkImportSemaphoreWin32HandleKHR = staticPfn_vkImportSemaphoreWin32HandleKHR;
#endif
#if defined(VK_KHR_external_semaphore_fd) && (defined(VK_KHR_external_semaphore) || defined(VK_VERSION_1_1))
		pfn_vkGetSemaphoreFdKHR = staticPfn_vkGetSemaphoreFdKHR;
		pfn_vkImportSemaphoreFdKHR = staticPfn_vkImportSemaphoreFdKHR;
#endif
#if defined(VK_FUCHSIA_external_semaphore) && (defined(VK_KHR_external_semaphore_capabilities) && defined(VK_KHR_external_semaphore))
		pfn_vkGetSemaphoreZirconHandleFUCHSIA = staticPfn_vkGetSemaphoreZirconHandleFUCHSIA;
		pfn_vkImportSemaphoreZirconHandleFUCHSIA = staticPfn_vkImportSemaphoreZirconHandleFUCHSIA;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceExternalFenceProperties = staticPfn_vkGetPhysicalDeviceExternalFenceProperties;
#endif
#if defined(VK_KHR_external_fence_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPhysicalDeviceExternalFencePropertiesKHR = staticPfn_vkGetPhysicalDeviceExternalFencePropertiesKHR;
#endif
#if defined(VK_KHR_external_fence_win32) && (defined(VK_KHR_external_fence))
		pfn_vkGetFenceWin32HandleKHR = staticPfn_vkGetFenceWin32HandleKHR;
		pfn_vkImportFenceWin32HandleKHR = staticPfn_vkImportFenceWin32HandleKHR;
#endif
#if defined(VK_KHR_external_fence_fd) && (defined(VK_KHR_external_fence) || defined(VK_VERSION_1_1))
		pfn_vkGetFenceFdKHR = staticPfn_vkGetFenceFdKHR;
		pfn_vkImportFenceFdKHR = staticPfn_vkImportFenceFdKHR;
#endif
#if (defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))) || (defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1)))
		pfn_vkGetFenceSciSyncFenceNV = staticPfn_vkGetFenceSciSyncFenceNV;
		pfn_vkGetFenceSciSyncObjNV = staticPfn_vkGetFenceSciSyncObjNV;
		pfn_vkImportFenceSciSyncFenceNV = staticPfn_vkImportFenceSciSyncFenceNV;
		pfn_vkImportFenceSciSyncObjNV = staticPfn_vkImportFenceSciSyncObjNV;
#endif
#if defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))
		pfn_vkGetSemaphoreSciSyncObjNV = staticPfn_vkGetSemaphoreSciSyncObjNV;
		pfn_vkImportSemaphoreSciSyncObjNV = staticPfn_vkImportSemaphoreSciSyncObjNV;
#endif
#if (defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))) || (defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1)))
		pfn_vkGetPhysicalDeviceSciSyncAttributesNV = staticPfn_vkGetPhysicalDeviceSciSyncAttributesNV;
#endif
#if defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1))
		pfn_vkCreateSemaphoreSciSyncPoolNV = staticPfn_vkCreateSemaphoreSciSyncPoolNV;
		pfn_vkDestroySemaphoreSciSyncPoolNV = staticPfn_vkDestroySemaphoreSciSyncPoolNV;
#endif
#if defined(VK_EXT_direct_mode_display) && (defined(VK_KHR_display))
		pfn_vkReleaseDisplayEXT = staticPfn_vkReleaseDisplayEXT;
#endif
#if defined(VK_EXT_acquire_xlib_display) && (defined(VK_EXT_direct_mode_display))
		pfn_vkAcquireXlibDisplayEXT = staticPfn_vkAcquireXlibDisplayEXT;
		pfn_vkGetRandROutputDisplayEXT = staticPfn_vkGetRandROutputDisplayEXT;
#endif
#if defined(VK_NV_acquire_winrt_display) && (defined(VK_EXT_direct_mode_display))
		pfn_vkAcquireWinrtDisplayNV = staticPfn_vkAcquireWinrtDisplayNV;
		pfn_vkGetWinrtDisplayNV = staticPfn_vkGetWinrtDisplayNV;
#endif
#if defined(VK_EXT_display_control) && (defined(VK_EXT_display_surface_counter) && defined(VK_KHR_swapchain))
		pfn_vkDisplayPowerControlEXT = staticPfn_vkDisplayPowerControlEXT;
		pfn_vkRegisterDeviceEventEXT = staticPfn_vkRegisterDeviceEventEXT;
		pfn_vkRegisterDisplayEventEXT = staticPfn_vkRegisterDisplayEventEXT;
		pfn_vkGetSwapchainCounterEXT = staticPfn_vkGetSwapchainCounterEXT;
#endif
#if defined(VK_EXT_display_surface_counter) && (defined(VK_KHR_display))
		pfn_vkGetPhysicalDeviceSurfaceCapabilities2EXT = staticPfn_vkGetPhysicalDeviceSurfaceCapabilities2EXT;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkEnumeratePhysicalDeviceGroups = staticPfn_vkEnumeratePhysicalDeviceGroups;
#endif
#if defined(VK_KHR_device_group_creation)
		pfn_vkEnumeratePhysicalDeviceGroupsKHR = staticPfn_vkEnumeratePhysicalDeviceGroupsKHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetDeviceGroupPeerMemoryFeatures = staticPfn_vkGetDeviceGroupPeerMemoryFeatures;
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
		pfn_vkGetDeviceGroupPeerMemoryFeaturesKHR = staticPfn_vkGetDeviceGroupPeerMemoryFeaturesKHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkBindBufferMemory2 = staticPfn_vkBindBufferMemory2;
#endif
#if defined(VK_KHR_bind_memory2)
		pfn_vkBindBufferMemory2KHR = staticPfn_vkBindBufferMemory2KHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkBindImageMemory2 = staticPfn_vkBindImageMemory2;
#endif
#if defined(VK_KHR_bind_memory2)
		pfn_vkBindImageMemory2KHR = staticPfn_vkBindImageMemory2KHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkCmdSetDeviceMask = staticPfn_vkCmdSetDeviceMask;
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
		pfn_vkCmdSetDeviceMaskKHR = staticPfn_vkCmdSetDeviceMaskKHR;
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_surface)))
		pfn_vkGetDeviceGroupPresentCapabilitiesKHR = staticPfn_vkGetDeviceGroupPresentCapabilitiesKHR;
		pfn_vkGetDeviceGroupSurfacePresentModesKHR = staticPfn_vkGetDeviceGroupSurfacePresentModesKHR;
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_swapchain)))
		pfn_vkAcquireNextImage2KHR = staticPfn_vkAcquireNextImage2KHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkCmdDispatchBase = staticPfn_vkCmdDispatchBase;
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
		pfn_vkCmdDispatchBaseKHR = staticPfn_vkCmdDispatchBaseKHR;
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_surface)))
		pfn_vkGetPhysicalDevicePresentRectanglesKHR = staticPfn_vkGetPhysicalDevicePresentRectanglesKHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkCreateDescriptorUpdateTemplate = staticPfn_vkCreateDescriptorUpdateTemplate;
#endif
#if defined(VK_KHR_descriptor_update_template)
		pfn_vkCreateDescriptorUpdateTemplateKHR = staticPfn_vkCreateDescriptorUpdateTemplateKHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkDestroyDescriptorUpdateTemplate = staticPfn_vkDestroyDescriptorUpdateTemplate;
#endif
#if defined(VK_KHR_descriptor_update_template)
		pfn_vkDestroyDescriptorUpdateTemplateKHR = staticPfn_vkDestroyDescriptorUpdateTemplateKHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkUpdateDescriptorSetWithTemplate = staticPfn_vkUpdateDescriptorSetWithTemplate;
#endif
#if defined(VK_KHR_descriptor_update_template)
		pfn_vkUpdateDescriptorSetWithTemplateKHR = staticPfn_vkUpdateDescriptorSetWithTemplateKHR;
#endif
#if (((defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_KHR_descriptor_update_template)))) || ((defined(VK_KHR_descriptor_update_template)) && (defined(VK_KHR_push_descriptor)))
		pfn_vkCmdPushDescriptorSetWithTemplateKHR = staticPfn_vkCmdPushDescriptorSetWithTemplateKHR;
#endif
#if defined(VK_EXT_hdr_metadata) && (defined(VK_KHR_swapchain))
		pfn_vkSetHdrMetadataEXT = staticPfn_vkSetHdrMetadataEXT;
#endif
#if defined(VK_KHR_shared_presentable_image) && (defined(VK_KHR_swapchain) && defined(VK_KHR_get_surface_capabilities2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)))
		pfn_vkGetSwapchainStatusKHR = staticPfn_vkGetSwapchainStatusKHR;
#endif
#if defined(VK_GOOGLE_display_timing) && (defined(VK_KHR_swapchain))
		pfn_vkGetRefreshCycleDurationGOOGLE = staticPfn_vkGetRefreshCycleDurationGOOGLE;
		pfn_vkGetPastPresentationTimingGOOGLE = staticPfn_vkGetPastPresentationTimingGOOGLE;
#endif
#if defined(VK_MVK_ios_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateIOSSurfaceMVK = staticPfn_vkCreateIOSSurfaceMVK;
#endif
#if defined(VK_MVK_macos_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateMacOSSurfaceMVK = staticPfn_vkCreateMacOSSurfaceMVK;
#endif
#if defined(VK_EXT_metal_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateMetalSurfaceEXT = staticPfn_vkCreateMetalSurfaceEXT;
#endif
#if defined(VK_NV_clip_space_w_scaling)
		pfn_vkCmdSetViewportWScalingNV = staticPfn_vkCmdSetViewportWScalingNV;
#endif
#if defined(VK_EXT_discard_rectangles) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdSetDiscardRectangleEXT = staticPfn_vkCmdSetDiscardRectangleEXT;
		pfn_vkCmdSetDiscardRectangleEnableEXT = staticPfn_vkCmdSetDiscardRectangleEnableEXT;
		pfn_vkCmdSetDiscardRectangleModeEXT = staticPfn_vkCmdSetDiscardRectangleModeEXT;
#endif
#if defined(VK_EXT_sample_locations) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdSetSampleLocationsEXT = staticPfn_vkCmdSetSampleLocationsEXT;
		pfn_vkGetPhysicalDeviceMultisamplePropertiesEXT = staticPfn_vkGetPhysicalDeviceMultisamplePropertiesEXT;
#endif
#if defined(VK_KHR_get_surface_capabilities2) && (defined(VK_KHR_surface))
		pfn_vkGetPhysicalDeviceSurfaceCapabilities2KHR = staticPfn_vkGetPhysicalDeviceSurfaceCapabilities2KHR;
		pfn_vkGetPhysicalDeviceSurfaceFormats2KHR = staticPfn_vkGetPhysicalDeviceSurfaceFormats2KHR;
#endif
#if defined(VK_KHR_get_display_properties2) && (defined(VK_KHR_display))
		pfn_vkGetPhysicalDeviceDisplayProperties2KHR = staticPfn_vkGetPhysicalDeviceDisplayProperties2KHR;
		pfn_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = staticPfn_vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
		pfn_vkGetDisplayModeProperties2KHR = staticPfn_vkGetDisplayModeProperties2KHR;
		pfn_vkGetDisplayPlaneCapabilities2KHR = staticPfn_vkGetDisplayPlaneCapabilities2KHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetBufferMemoryRequirements2 = staticPfn_vkGetBufferMemoryRequirements2;
#endif
#if defined(VK_KHR_get_memory_requirements2)
		pfn_vkGetBufferMemoryRequirements2KHR = staticPfn_vkGetBufferMemoryRequirements2KHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetImageMemoryRequirements2 = staticPfn_vkGetImageMemoryRequirements2;
#endif
#if defined(VK_KHR_get_memory_requirements2)
		pfn_vkGetImageMemoryRequirements2KHR = staticPfn_vkGetImageMemoryRequirements2KHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetImageSparseMemoryRequirements2 = staticPfn_vkGetImageSparseMemoryRequirements2;
#endif
#if defined(VK_KHR_get_memory_requirements2)
		pfn_vkGetImageSparseMemoryRequirements2KHR = staticPfn_vkGetImageSparseMemoryRequirements2KHR;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkGetDeviceBufferMemoryRequirements = staticPfn_vkGetDeviceBufferMemoryRequirements;
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
		pfn_vkGetDeviceBufferMemoryRequirementsKHR = staticPfn_vkGetDeviceBufferMemoryRequirementsKHR;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkGetDeviceImageMemoryRequirements = staticPfn_vkGetDeviceImageMemoryRequirements;
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
		pfn_vkGetDeviceImageMemoryRequirementsKHR = staticPfn_vkGetDeviceImageMemoryRequirementsKHR;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkGetDeviceImageSparseMemoryRequirements = staticPfn_vkGetDeviceImageSparseMemoryRequirements;
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
		pfn_vkGetDeviceImageSparseMemoryRequirementsKHR = staticPfn_vkGetDeviceImageSparseMemoryRequirementsKHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkCreateSamplerYcbcrConversion = staticPfn_vkCreateSamplerYcbcrConversion;
#endif
#if defined(VK_KHR_sampler_ycbcr_conversion) && (defined(VK_KHR_maintenance1) && defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_memory_requirements2) && defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCreateSamplerYcbcrConversionKHR = staticPfn_vkCreateSamplerYcbcrConversionKHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkDestroySamplerYcbcrConversion = staticPfn_vkDestroySamplerYcbcrConversion;
#endif
#if defined(VK_KHR_sampler_ycbcr_conversion) && (defined(VK_KHR_maintenance1) && defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_memory_requirements2) && defined(VK_KHR_get_physical_device_properties2))
		pfn_vkDestroySamplerYcbcrConversionKHR = staticPfn_vkDestroySamplerYcbcrConversionKHR;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetDeviceQueue2 = staticPfn_vkGetDeviceQueue2;
#endif
#if defined(VK_EXT_validation_cache)
		pfn_vkCreateValidationCacheEXT = staticPfn_vkCreateValidationCacheEXT;
		pfn_vkDestroyValidationCacheEXT = staticPfn_vkDestroyValidationCacheEXT;
		pfn_vkGetValidationCacheDataEXT = staticPfn_vkGetValidationCacheDataEXT;
		pfn_vkMergeValidationCachesEXT = staticPfn_vkMergeValidationCachesEXT;
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetDescriptorSetLayoutSupport = staticPfn_vkGetDescriptorSetLayoutSupport;
#endif
#if defined(VK_KHR_maintenance3) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetDescriptorSetLayoutSupportKHR = staticPfn_vkGetDescriptorSetLayoutSupportKHR;
#endif
#if defined(VK_ANDROID_native_buffer)
		pfn_vkGetSwapchainGrallocUsageANDROID = staticPfn_vkGetSwapchainGrallocUsageANDROID;
		pfn_vkGetSwapchainGrallocUsage2ANDROID = staticPfn_vkGetSwapchainGrallocUsage2ANDROID;
		pfn_vkAcquireImageANDROID = staticPfn_vkAcquireImageANDROID;
		pfn_vkQueueSignalReleaseImageANDROID = staticPfn_vkQueueSignalReleaseImageANDROID;
#endif
#if defined(VK_AMD_shader_info)
		pfn_vkGetShaderInfoAMD = staticPfn_vkGetShaderInfoAMD;
#endif
#if defined(VK_AMD_display_native_hdr) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
		pfn_vkSetLocalDimmingAMD = staticPfn_vkSetLocalDimmingAMD;
#endif
#if defined(VK_KHR_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = staticPfn_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR;
#endif
#if defined(VK_EXT_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = staticPfn_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
#endif
#if defined(VK_KHR_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkGetCalibratedTimestampsKHR = staticPfn_vkGetCalibratedTimestampsKHR;
#endif
#if defined(VK_EXT_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkGetCalibratedTimestampsEXT = staticPfn_vkGetCalibratedTimestampsEXT;
#endif
#if defined(VK_EXT_debug_utils)
		pfn_vkSetDebugUtilsObjectNameEXT = staticPfn_vkSetDebugUtilsObjectNameEXT;
		pfn_vkSetDebugUtilsObjectTagEXT = staticPfn_vkSetDebugUtilsObjectTagEXT;
		pfn_vkQueueBeginDebugUtilsLabelEXT = staticPfn_vkQueueBeginDebugUtilsLabelEXT;
		pfn_vkQueueEndDebugUtilsLabelEXT = staticPfn_vkQueueEndDebugUtilsLabelEXT;
		pfn_vkQueueInsertDebugUtilsLabelEXT = staticPfn_vkQueueInsertDebugUtilsLabelEXT;
		pfn_vkCmdBeginDebugUtilsLabelEXT = staticPfn_vkCmdBeginDebugUtilsLabelEXT;
		pfn_vkCmdEndDebugUtilsLabelEXT = staticPfn_vkCmdEndDebugUtilsLabelEXT;
		pfn_vkCmdInsertDebugUtilsLabelEXT = staticPfn_vkCmdInsertDebugUtilsLabelEXT;
		pfn_vkCreateDebugUtilsMessengerEXT = staticPfn_vkCreateDebugUtilsMessengerEXT;
		pfn_vkDestroyDebugUtilsMessengerEXT = staticPfn_vkDestroyDebugUtilsMessengerEXT;
		pfn_vkSubmitDebugUtilsMessageEXT = staticPfn_vkSubmitDebugUtilsMessageEXT;
#endif
#if defined(VK_EXT_external_memory_host) && (defined(VK_KHR_external_memory) || defined(VK_VERSION_1_1))
		pfn_vkGetMemoryHostPointerPropertiesEXT = staticPfn_vkGetMemoryHostPointerPropertiesEXT;
#endif
#if defined(VK_AMD_buffer_marker)
		pfn_vkCmdWriteBufferMarkerAMD = staticPfn_vkCmdWriteBufferMarkerAMD;
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkCreateRenderPass2 = staticPfn_vkCreateRenderPass2;
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
		pfn_vkCreateRenderPass2KHR = staticPfn_vkCreateRenderPass2KHR;
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkCmdBeginRenderPass2 = staticPfn_vkCmdBeginRenderPass2;
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
		pfn_vkCmdBeginRenderPass2KHR = staticPfn_vkCmdBeginRenderPass2KHR;
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkCmdNextSubpass2 = staticPfn_vkCmdNextSubpass2;
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
		pfn_vkCmdNextSubpass2KHR = staticPfn_vkCmdNextSubpass2KHR;
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkCmdEndRenderPass2 = staticPfn_vkCmdEndRenderPass2;
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
		pfn_vkCmdEndRenderPass2KHR = staticPfn_vkCmdEndRenderPass2KHR;
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkGetSemaphoreCounterValue = staticPfn_vkGetSemaphoreCounterValue;
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetSemaphoreCounterValueKHR = staticPfn_vkGetSemaphoreCounterValueKHR;
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkWaitSemaphores = staticPfn_vkWaitSemaphores;
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkWaitSemaphoresKHR = staticPfn_vkWaitSemaphoresKHR;
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkSignalSemaphore = staticPfn_vkSignalSemaphore;
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkSignalSemaphoreKHR = staticPfn_vkSignalSemaphoreKHR;
#endif
#if defined(VK_ANDROID_external_memory_android_hardware_buffer) && (defined(VK_KHR_sampler_ycbcr_conversion) && defined(VK_KHR_external_memory) && defined(VK_EXT_queue_family_foreign) && defined(VK_KHR_dedicated_allocation))
		pfn_vkGetAndroidHardwareBufferPropertiesANDROID = staticPfn_vkGetAndroidHardwareBufferPropertiesANDROID;
		pfn_vkGetMemoryAndroidHardwareBufferANDROID = staticPfn_vkGetMemoryAndroidHardwareBufferANDROID;
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkCmdDrawIndirectCount = staticPfn_vkCmdDrawIndirectCount;
#endif
#if defined(VK_KHR_draw_indirect_count)
		pfn_vkCmdDrawIndirectCountKHR = staticPfn_vkCmdDrawIndirectCountKHR;
#endif
#if defined(VK_AMD_draw_indirect_count)
		pfn_vkCmdDrawIndirectCountAMD = staticPfn_vkCmdDrawIndirectCountAMD;
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkCmdDrawIndexedIndirectCount = staticPfn_vkCmdDrawIndexedIndirectCount;
#endif
#if defined(VK_KHR_draw_indirect_count)
		pfn_vkCmdDrawIndexedIndirectCountKHR = staticPfn_vkCmdDrawIndexedIndirectCountKHR;
#endif
#if defined(VK_AMD_draw_indirect_count)
		pfn_vkCmdDrawIndexedIndirectCountAMD = staticPfn_vkCmdDrawIndexedIndirectCountAMD;
#endif
#if defined(VK_NV_device_diagnostic_checkpoints) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdSetCheckpointNV = staticPfn_vkCmdSetCheckpointNV;
		pfn_vkGetQueueCheckpointDataNV = staticPfn_vkGetQueueCheckpointDataNV;
#endif
#if defined(VK_EXT_transform_feedback) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdBindTransformFeedbackBuffersEXT = staticPfn_vkCmdBindTransformFeedbackBuffersEXT;
		pfn_vkCmdBeginTransformFeedbackEXT = staticPfn_vkCmdBeginTransformFeedbackEXT;
		pfn_vkCmdEndTransformFeedbackEXT = staticPfn_vkCmdEndTransformFeedbackEXT;
		pfn_vkCmdBeginQueryIndexedEXT = staticPfn_vkCmdBeginQueryIndexedEXT;
		pfn_vkCmdEndQueryIndexedEXT = staticPfn_vkCmdEndQueryIndexedEXT;
		pfn_vkCmdDrawIndirectByteCountEXT = staticPfn_vkCmdDrawIndirectByteCountEXT;
#endif
#if defined(VK_NV_scissor_exclusive) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdSetExclusiveScissorNV = staticPfn_vkCmdSetExclusiveScissorNV;
		pfn_vkCmdSetExclusiveScissorEnableNV = staticPfn_vkCmdSetExclusiveScissorEnableNV;
#endif
#if defined(VK_NV_shading_rate_image) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdBindShadingRateImageNV = staticPfn_vkCmdBindShadingRateImageNV;
		pfn_vkCmdSetViewportShadingRatePaletteNV = staticPfn_vkCmdSetViewportShadingRatePaletteNV;
		pfn_vkCmdSetCoarseSampleOrderNV = staticPfn_vkCmdSetCoarseSampleOrderNV;
#endif
#if defined(VK_NV_mesh_shader) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdDrawMeshTasksNV = staticPfn_vkCmdDrawMeshTasksNV;
		pfn_vkCmdDrawMeshTasksIndirectNV = staticPfn_vkCmdDrawMeshTasksIndirectNV;
		pfn_vkCmdDrawMeshTasksIndirectCountNV = staticPfn_vkCmdDrawMeshTasksIndirectCountNV;
#endif
#if defined(VK_EXT_mesh_shader) && (defined(VK_KHR_spirv_1_4))
		pfn_vkCmdDrawMeshTasksEXT = staticPfn_vkCmdDrawMeshTasksEXT;
		pfn_vkCmdDrawMeshTasksIndirectEXT = staticPfn_vkCmdDrawMeshTasksIndirectEXT;
		pfn_vkCmdDrawMeshTasksIndirectCountEXT = staticPfn_vkCmdDrawMeshTasksIndirectCountEXT;
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		pfn_vkCompileDeferredNV = staticPfn_vkCompileDeferredNV;
		pfn_vkCreateAccelerationStructureNV = staticPfn_vkCreateAccelerationStructureNV;
#endif
#if defined(VK_HUAWEI_invocation_mask) && (defined(VK_KHR_ray_tracing_pipeline) && defined(VK_KHR_synchronization2))
		pfn_vkCmdBindInvocationMaskHUAWEI = staticPfn_vkCmdBindInvocationMaskHUAWEI;
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		pfn_vkDestroyAccelerationStructureKHR = staticPfn_vkDestroyAccelerationStructureKHR;
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		pfn_vkDestroyAccelerationStructureNV = staticPfn_vkDestroyAccelerationStructureNV;
		pfn_vkGetAccelerationStructureMemoryRequirementsNV = staticPfn_vkGetAccelerationStructureMemoryRequirementsNV;
		pfn_vkBindAccelerationStructureMemoryNV = staticPfn_vkBindAccelerationStructureMemoryNV;
		pfn_vkCmdCopyAccelerationStructureNV = staticPfn_vkCmdCopyAccelerationStructureNV;
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		pfn_vkCmdCopyAccelerationStructureKHR = staticPfn_vkCmdCopyAccelerationStructureKHR;
		pfn_vkCopyAccelerationStructureKHR = staticPfn_vkCopyAccelerationStructureKHR;
		pfn_vkCmdCopyAccelerationStructureToMemoryKHR = staticPfn_vkCmdCopyAccelerationStructureToMemoryKHR;
		pfn_vkCopyAccelerationStructureToMemoryKHR = staticPfn_vkCopyAccelerationStructureToMemoryKHR;
		pfn_vkCmdCopyMemoryToAccelerationStructureKHR = staticPfn_vkCmdCopyMemoryToAccelerationStructureKHR;
		pfn_vkCopyMemoryToAccelerationStructureKHR = staticPfn_vkCopyMemoryToAccelerationStructureKHR;
		pfn_vkCmdWriteAccelerationStructuresPropertiesKHR = staticPfn_vkCmdWriteAccelerationStructuresPropertiesKHR;
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		pfn_vkCmdWriteAccelerationStructuresPropertiesNV = staticPfn_vkCmdWriteAccelerationStructuresPropertiesNV;
		pfn_vkCmdBuildAccelerationStructureNV = staticPfn_vkCmdBuildAccelerationStructureNV;
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		pfn_vkWriteAccelerationStructuresPropertiesKHR = staticPfn_vkWriteAccelerationStructuresPropertiesKHR;
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		pfn_vkCmdTraceRaysKHR = staticPfn_vkCmdTraceRaysKHR;
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		pfn_vkCmdTraceRaysNV = staticPfn_vkCmdTraceRaysNV;
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		pfn_vkGetRayTracingShaderGroupHandlesKHR = staticPfn_vkGetRayTracingShaderGroupHandlesKHR;
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		pfn_vkGetRayTracingShaderGroupHandlesNV = staticPfn_vkGetRayTracingShaderGroupHandlesNV;
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		pfn_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = staticPfn_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		pfn_vkGetAccelerationStructureHandleNV = staticPfn_vkGetAccelerationStructureHandleNV;
		pfn_vkCreateRayTracingPipelinesNV = staticPfn_vkCreateRayTracingPipelinesNV;
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		pfn_vkCreateRayTracingPipelinesKHR = staticPfn_vkCreateRayTracingPipelinesKHR;
#endif
#if defined(VK_NV_cooperative_matrix) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = staticPfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		pfn_vkCmdTraceRaysIndirectKHR = staticPfn_vkCmdTraceRaysIndirectKHR;
#endif
#if (defined(VK_KHR_ray_tracing_maintenance1) && (defined(VK_KHR_acceleration_structure))) && (defined(VK_KHR_ray_tracing_pipeline))
		pfn_vkCmdTraceRaysIndirect2KHR = staticPfn_vkCmdTraceRaysIndirect2KHR;
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		pfn_vkGetDeviceAccelerationStructureCompatibilityKHR = staticPfn_vkGetDeviceAccelerationStructureCompatibilityKHR;
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		pfn_vkGetRayTracingShaderGroupStackSizeKHR = staticPfn_vkGetRayTracingShaderGroupStackSizeKHR;
		pfn_vkCmdSetRayTracingPipelineStackSizeKHR = staticPfn_vkCmdSetRayTracingPipelineStackSizeKHR;
#endif
#if defined(VK_NVX_image_view_handle)
		pfn_vkGetImageViewHandleNVX = staticPfn_vkGetImageViewHandleNVX;
		pfn_vkGetImageViewAddressNVX = staticPfn_vkGetImageViewAddressNVX;
#endif
#if defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
		pfn_vkGetPhysicalDeviceSurfacePresentModes2EXT = staticPfn_vkGetPhysicalDeviceSurfacePresentModes2EXT;
#endif
#if ((defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))) && (defined(VK_KHR_device_group))) || ((defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))) && (defined(VK_VERSION_1_1)))
		pfn_vkGetDeviceGroupSurfacePresentModes2EXT = staticPfn_vkGetDeviceGroupSurfacePresentModes2EXT;
#endif
#if defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
		pfn_vkAcquireFullScreenExclusiveModeEXT = staticPfn_vkAcquireFullScreenExclusiveModeEXT;
		pfn_vkReleaseFullScreenExclusiveModeEXT = staticPfn_vkReleaseFullScreenExclusiveModeEXT;
#endif
#if defined(VK_KHR_performance_query) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = staticPfn_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
		pfn_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = staticPfn_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
		pfn_vkAcquireProfilingLockKHR = staticPfn_vkAcquireProfilingLockKHR;
		pfn_vkReleaseProfilingLockKHR = staticPfn_vkReleaseProfilingLockKHR;
#endif
#if defined(VK_EXT_image_drm_format_modifier) && (((defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_sampler_ycbcr_conversion)) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_image_format_list) || defined(VK_VERSION_1_2)))
		pfn_vkGetImageDrmFormatModifierPropertiesEXT = staticPfn_vkGetImageDrmFormatModifierPropertiesEXT;
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkGetBufferOpaqueCaptureAddress = staticPfn_vkGetBufferOpaqueCaptureAddress;
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
		pfn_vkGetBufferOpaqueCaptureAddressKHR = staticPfn_vkGetBufferOpaqueCaptureAddressKHR;
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkGetBufferDeviceAddress = staticPfn_vkGetBufferDeviceAddress;
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
		pfn_vkGetBufferDeviceAddressKHR = staticPfn_vkGetBufferDeviceAddressKHR;
#endif
#if defined(VK_EXT_buffer_device_address) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetBufferDeviceAddressEXT = staticPfn_vkGetBufferDeviceAddressEXT;
#endif
#if defined(VK_EXT_headless_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateHeadlessSurfaceEXT = staticPfn_vkCreateHeadlessSurfaceEXT;
#endif
#if defined(VK_NV_coverage_reduction_mode) && (defined(VK_NV_framebuffer_mixed_samples) && defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = staticPfn_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
#endif
#if defined(VK_INTEL_performance_query)
		pfn_vkInitializePerformanceApiINTEL = staticPfn_vkInitializePerformanceApiINTEL;
		pfn_vkUninitializePerformanceApiINTEL = staticPfn_vkUninitializePerformanceApiINTEL;
		pfn_vkCmdSetPerformanceMarkerINTEL = staticPfn_vkCmdSetPerformanceMarkerINTEL;
		pfn_vkCmdSetPerformanceStreamMarkerINTEL = staticPfn_vkCmdSetPerformanceStreamMarkerINTEL;
		pfn_vkCmdSetPerformanceOverrideINTEL = staticPfn_vkCmdSetPerformanceOverrideINTEL;
		pfn_vkAcquirePerformanceConfigurationINTEL = staticPfn_vkAcquirePerformanceConfigurationINTEL;
		pfn_vkReleasePerformanceConfigurationINTEL = staticPfn_vkReleasePerformanceConfigurationINTEL;
		pfn_vkQueueSetPerformanceConfigurationINTEL = staticPfn_vkQueueSetPerformanceConfigurationINTEL;
		pfn_vkGetPerformanceParameterINTEL = staticPfn_vkGetPerformanceParameterINTEL;
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkGetDeviceMemoryOpaqueCaptureAddress = staticPfn_vkGetDeviceMemoryOpaqueCaptureAddress;
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
		pfn_vkGetDeviceMemoryOpaqueCaptureAddressKHR = staticPfn_vkGetDeviceMemoryOpaqueCaptureAddressKHR;
#endif
#if defined(VK_KHR_pipeline_executable_properties) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPipelineExecutablePropertiesKHR = staticPfn_vkGetPipelineExecutablePropertiesKHR;
		pfn_vkGetPipelineExecutableStatisticsKHR = staticPfn_vkGetPipelineExecutableStatisticsKHR;
		pfn_vkGetPipelineExecutableInternalRepresentationsKHR = staticPfn_vkGetPipelineExecutableInternalRepresentationsKHR;
#endif
#if defined(VK_KHR_line_rasterization) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdSetLineStippleKHR = staticPfn_vkCmdSetLineStippleKHR;
#endif
#if defined(VK_EXT_line_rasterization) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdSetLineStippleEXT = staticPfn_vkCmdSetLineStippleEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkGetPhysicalDeviceToolProperties = staticPfn_vkGetPhysicalDeviceToolProperties;
#endif
#if defined(VK_EXT_tooling_info)
		pfn_vkGetPhysicalDeviceToolPropertiesEXT = staticPfn_vkGetPhysicalDeviceToolPropertiesEXT;
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		pfn_vkCreateAccelerationStructureKHR = staticPfn_vkCreateAccelerationStructureKHR;
		pfn_vkCmdBuildAccelerationStructuresKHR = staticPfn_vkCmdBuildAccelerationStructuresKHR;
		pfn_vkCmdBuildAccelerationStructuresIndirectKHR = staticPfn_vkCmdBuildAccelerationStructuresIndirectKHR;
		pfn_vkBuildAccelerationStructuresKHR = staticPfn_vkBuildAccelerationStructuresKHR;
		pfn_vkGetAccelerationStructureDeviceAddressKHR = staticPfn_vkGetAccelerationStructureDeviceAddressKHR;
#endif
#if defined(VK_KHR_deferred_host_operations)
		pfn_vkCreateDeferredOperationKHR = staticPfn_vkCreateDeferredOperationKHR;
		pfn_vkDestroyDeferredOperationKHR = staticPfn_vkDestroyDeferredOperationKHR;
		pfn_vkGetDeferredOperationMaxConcurrencyKHR = staticPfn_vkGetDeferredOperationMaxConcurrencyKHR;
		pfn_vkGetDeferredOperationResultKHR = staticPfn_vkGetDeferredOperationResultKHR;
		pfn_vkDeferredOperationJoinKHR = staticPfn_vkDeferredOperationJoinKHR;
#endif
#if defined(VK_NV_device_generated_commands_compute) && (defined(VK_NV_device_generated_commands))
		pfn_vkGetPipelineIndirectMemoryRequirementsNV = staticPfn_vkGetPipelineIndirectMemoryRequirementsNV;
		pfn_vkGetPipelineIndirectDeviceAddressNV = staticPfn_vkGetPipelineIndirectDeviceAddressNV;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetCullMode = staticPfn_vkCmdSetCullMode;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetCullModeEXT = staticPfn_vkCmdSetCullModeEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetFrontFace = staticPfn_vkCmdSetFrontFace;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetFrontFaceEXT = staticPfn_vkCmdSetFrontFaceEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetPrimitiveTopology = staticPfn_vkCmdSetPrimitiveTopology;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetPrimitiveTopologyEXT = staticPfn_vkCmdSetPrimitiveTopologyEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetViewportWithCount = staticPfn_vkCmdSetViewportWithCount;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetViewportWithCountEXT = staticPfn_vkCmdSetViewportWithCountEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetScissorWithCount = staticPfn_vkCmdSetScissorWithCount;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetScissorWithCountEXT = staticPfn_vkCmdSetScissorWithCountEXT;
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
		pfn_vkCmdBindIndexBuffer2KHR = staticPfn_vkCmdBindIndexBuffer2KHR;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdBindVertexBuffers2 = staticPfn_vkCmdBindVertexBuffers2;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdBindVertexBuffers2EXT = staticPfn_vkCmdBindVertexBuffers2EXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetDepthTestEnable = staticPfn_vkCmdSetDepthTestEnable;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetDepthTestEnableEXT = staticPfn_vkCmdSetDepthTestEnableEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetDepthWriteEnable = staticPfn_vkCmdSetDepthWriteEnable;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetDepthWriteEnableEXT = staticPfn_vkCmdSetDepthWriteEnableEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetDepthCompareOp = staticPfn_vkCmdSetDepthCompareOp;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetDepthCompareOpEXT = staticPfn_vkCmdSetDepthCompareOpEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetDepthBoundsTestEnable = staticPfn_vkCmdSetDepthBoundsTestEnable;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetDepthBoundsTestEnableEXT = staticPfn_vkCmdSetDepthBoundsTestEnableEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetStencilTestEnable = staticPfn_vkCmdSetStencilTestEnable;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetStencilTestEnableEXT = staticPfn_vkCmdSetStencilTestEnableEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetStencilOp = staticPfn_vkCmdSetStencilOp;
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetStencilOpEXT = staticPfn_vkCmdSetStencilOpEXT;
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetPatchControlPointsEXT = staticPfn_vkCmdSetPatchControlPointsEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetRasterizerDiscardEnable = staticPfn_vkCmdSetRasterizerDiscardEnable;
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetRasterizerDiscardEnableEXT = staticPfn_vkCmdSetRasterizerDiscardEnableEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetDepthBiasEnable = staticPfn_vkCmdSetDepthBiasEnable;
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetDepthBiasEnableEXT = staticPfn_vkCmdSetDepthBiasEnableEXT;
		pfn_vkCmdSetLogicOpEXT = staticPfn_vkCmdSetLogicOpEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetPrimitiveRestartEnable = staticPfn_vkCmdSetPrimitiveRestartEnable;
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetPrimitiveRestartEnableEXT = staticPfn_vkCmdSetPrimitiveRestartEnableEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_KHR_maintenance2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetTessellationDomainOriginEXT = staticPfn_vkCmdSetTessellationDomainOriginEXT;
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetDepthClampEnableEXT = staticPfn_vkCmdSetDepthClampEnableEXT;
		pfn_vkCmdSetPolygonModeEXT = staticPfn_vkCmdSetPolygonModeEXT;
		pfn_vkCmdSetRasterizationSamplesEXT = staticPfn_vkCmdSetRasterizationSamplesEXT;
		pfn_vkCmdSetSampleMaskEXT = staticPfn_vkCmdSetSampleMaskEXT;
		pfn_vkCmdSetAlphaToCoverageEnableEXT = staticPfn_vkCmdSetAlphaToCoverageEnableEXT;
		pfn_vkCmdSetAlphaToOneEnableEXT = staticPfn_vkCmdSetAlphaToOneEnableEXT;
		pfn_vkCmdSetLogicOpEnableEXT = staticPfn_vkCmdSetLogicOpEnableEXT;
		pfn_vkCmdSetColorBlendEnableEXT = staticPfn_vkCmdSetColorBlendEnableEXT;
		pfn_vkCmdSetColorBlendEquationEXT = staticPfn_vkCmdSetColorBlendEquationEXT;
		pfn_vkCmdSetColorWriteMaskEXT = staticPfn_vkCmdSetColorWriteMaskEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_transform_feedback))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_transform_feedback)))
		pfn_vkCmdSetRasterizationStreamEXT = staticPfn_vkCmdSetRasterizationStreamEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_conservative_rasterization))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_conservative_rasterization)))
		pfn_vkCmdSetConservativeRasterizationModeEXT = staticPfn_vkCmdSetConservativeRasterizationModeEXT;
		pfn_vkCmdSetExtraPrimitiveOverestimationSizeEXT = staticPfn_vkCmdSetExtraPrimitiveOverestimationSizeEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_depth_clip_enable))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_depth_clip_enable)))
		pfn_vkCmdSetDepthClipEnableEXT = staticPfn_vkCmdSetDepthClipEnableEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_sample_locations))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_sample_locations)))
		pfn_vkCmdSetSampleLocationsEnableEXT = staticPfn_vkCmdSetSampleLocationsEnableEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_blend_operation_advanced))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_blend_operation_advanced)))
		pfn_vkCmdSetColorBlendAdvancedEXT = staticPfn_vkCmdSetColorBlendAdvancedEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_provoking_vertex))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_provoking_vertex)))
		pfn_vkCmdSetProvokingVertexModeEXT = staticPfn_vkCmdSetProvokingVertexModeEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_line_rasterization))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_line_rasterization)))
		pfn_vkCmdSetLineRasterizationModeEXT = staticPfn_vkCmdSetLineRasterizationModeEXT;
		pfn_vkCmdSetLineStippleEnableEXT = staticPfn_vkCmdSetLineStippleEnableEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_depth_clip_control))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_depth_clip_control)))
		pfn_vkCmdSetDepthClipNegativeOneToOneEXT = staticPfn_vkCmdSetDepthClipNegativeOneToOneEXT;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_clip_space_w_scaling))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_clip_space_w_scaling)))
		pfn_vkCmdSetViewportWScalingEnableNV = staticPfn_vkCmdSetViewportWScalingEnableNV;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_viewport_swizzle))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_viewport_swizzle)))
		pfn_vkCmdSetViewportSwizzleNV = staticPfn_vkCmdSetViewportSwizzleNV;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_fragment_coverage_to_color))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_fragment_coverage_to_color)))
		pfn_vkCmdSetCoverageToColorEnableNV = staticPfn_vkCmdSetCoverageToColorEnableNV;
		pfn_vkCmdSetCoverageToColorLocationNV = staticPfn_vkCmdSetCoverageToColorLocationNV;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_framebuffer_mixed_samples))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_framebuffer_mixed_samples)))
		pfn_vkCmdSetCoverageModulationModeNV = staticPfn_vkCmdSetCoverageModulationModeNV;
		pfn_vkCmdSetCoverageModulationTableEnableNV = staticPfn_vkCmdSetCoverageModulationTableEnableNV;
		pfn_vkCmdSetCoverageModulationTableNV = staticPfn_vkCmdSetCoverageModulationTableNV;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_shading_rate_image))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_shading_rate_image)))
		pfn_vkCmdSetShadingRateImageEnableNV = staticPfn_vkCmdSetShadingRateImageEnableNV;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_coverage_reduction_mode))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_coverage_reduction_mode)))
		pfn_vkCmdSetCoverageReductionModeNV = staticPfn_vkCmdSetCoverageReductionModeNV;
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_representative_fragment_test))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_representative_fragment_test)))
		pfn_vkCmdSetRepresentativeFragmentTestEnableNV = staticPfn_vkCmdSetRepresentativeFragmentTestEnableNV;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCreatePrivateDataSlot = staticPfn_vkCreatePrivateDataSlot;
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCreatePrivateDataSlotEXT = staticPfn_vkCreatePrivateDataSlotEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkDestroyPrivateDataSlot = staticPfn_vkDestroyPrivateDataSlot;
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkDestroyPrivateDataSlotEXT = staticPfn_vkDestroyPrivateDataSlotEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkSetPrivateData = staticPfn_vkSetPrivateData;
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkSetPrivateDataEXT = staticPfn_vkSetPrivateDataEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkGetPrivateData = staticPfn_vkGetPrivateData;
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPrivateDataEXT = staticPfn_vkGetPrivateDataEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdCopyBuffer2 = staticPfn_vkCmdCopyBuffer2;
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdCopyBuffer2KHR = staticPfn_vkCmdCopyBuffer2KHR;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdCopyImage2 = staticPfn_vkCmdCopyImage2;
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdCopyImage2KHR = staticPfn_vkCmdCopyImage2KHR;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdBlitImage2 = staticPfn_vkCmdBlitImage2;
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdBlitImage2KHR = staticPfn_vkCmdBlitImage2KHR;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdCopyBufferToImage2 = staticPfn_vkCmdCopyBufferToImage2;
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdCopyBufferToImage2KHR = staticPfn_vkCmdCopyBufferToImage2KHR;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdCopyImageToBuffer2 = staticPfn_vkCmdCopyImageToBuffer2;
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdCopyImageToBuffer2KHR = staticPfn_vkCmdCopyImageToBuffer2KHR;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdResolveImage2 = staticPfn_vkCmdResolveImage2;
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdResolveImage2KHR = staticPfn_vkCmdResolveImage2KHR;
#endif
#if defined(VK_KHR_object_refresh)
		pfn_vkCmdRefreshObjectsKHR = staticPfn_vkCmdRefreshObjectsKHR;
		pfn_vkGetPhysicalDeviceRefreshableObjectTypesKHR = staticPfn_vkGetPhysicalDeviceRefreshableObjectTypesKHR;
#endif
#if defined(VK_KHR_fragment_shading_rate) && ((defined(VK_KHR_create_renderpass2) || defined(VK_VERSION_1_2)) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)))
		pfn_vkCmdSetFragmentShadingRateKHR = staticPfn_vkCmdSetFragmentShadingRateKHR;
		pfn_vkGetPhysicalDeviceFragmentShadingRatesKHR = staticPfn_vkGetPhysicalDeviceFragmentShadingRatesKHR;
#endif
#if defined(VK_NV_fragment_shading_rate_enums) && (defined(VK_KHR_fragment_shading_rate))
		pfn_vkCmdSetFragmentShadingRateEnumNV = staticPfn_vkCmdSetFragmentShadingRateEnumNV;
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		pfn_vkGetAccelerationStructureBuildSizesKHR = staticPfn_vkGetAccelerationStructureBuildSizesKHR;
#endif
#if (defined(VK_EXT_vertex_input_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetVertexInputEXT = staticPfn_vkCmdSetVertexInputEXT;
#endif
#if defined(VK_EXT_color_write_enable) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdSetColorWriteEnableEXT = staticPfn_vkCmdSetColorWriteEnableEXT;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetEvent2 = staticPfn_vkCmdSetEvent2;
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdSetEvent2KHR = staticPfn_vkCmdSetEvent2KHR;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdResetEvent2 = staticPfn_vkCmdResetEvent2;
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdResetEvent2KHR = staticPfn_vkCmdResetEvent2KHR;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdWaitEvents2 = staticPfn_vkCmdWaitEvents2;
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdWaitEvents2KHR = staticPfn_vkCmdWaitEvents2KHR;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdPipelineBarrier2 = staticPfn_vkCmdPipelineBarrier2;
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdPipelineBarrier2KHR = staticPfn_vkCmdPipelineBarrier2KHR;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkQueueSubmit2 = staticPfn_vkQueueSubmit2;
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkQueueSubmit2KHR = staticPfn_vkQueueSubmit2KHR;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdWriteTimestamp2 = staticPfn_vkCmdWriteTimestamp2;
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdWriteTimestamp2KHR = staticPfn_vkCmdWriteTimestamp2KHR;
#endif
#if (defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) && (defined(VK_AMD_buffer_marker))
		pfn_vkCmdWriteBufferMarker2AMD = staticPfn_vkCmdWriteBufferMarker2AMD;
#endif
#if (defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) && (defined(VK_NV_device_diagnostic_checkpoints))
		pfn_vkGetQueueCheckpointData2NV = staticPfn_vkGetQueueCheckpointData2NV;
#endif
#if defined(VK_EXT_host_image_copy) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_copy_commands2) && defined(VK_KHR_format_feature_flags2))
		pfn_vkCopyMemoryToImageEXT = staticPfn_vkCopyMemoryToImageEXT;
		pfn_vkCopyImageToMemoryEXT = staticPfn_vkCopyImageToMemoryEXT;
		pfn_vkCopyImageToImageEXT = staticPfn_vkCopyImageToImageEXT;
		pfn_vkTransitionImageLayoutEXT = staticPfn_vkTransitionImageLayoutEXT;
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
		pfn_vkGetPhysicalDeviceVideoCapabilitiesKHR = staticPfn_vkGetPhysicalDeviceVideoCapabilitiesKHR;
		pfn_vkGetPhysicalDeviceVideoFormatPropertiesKHR = staticPfn_vkGetPhysicalDeviceVideoFormatPropertiesKHR;
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
		pfn_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = staticPfn_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
		pfn_vkCreateVideoSessionKHR = staticPfn_vkCreateVideoSessionKHR;
		pfn_vkDestroyVideoSessionKHR = staticPfn_vkDestroyVideoSessionKHR;
		pfn_vkCreateVideoSessionParametersKHR = staticPfn_vkCreateVideoSessionParametersKHR;
		pfn_vkUpdateVideoSessionParametersKHR = staticPfn_vkUpdateVideoSessionParametersKHR;
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
		pfn_vkGetEncodedVideoSessionParametersKHR = staticPfn_vkGetEncodedVideoSessionParametersKHR;
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
		pfn_vkDestroyVideoSessionParametersKHR = staticPfn_vkDestroyVideoSessionParametersKHR;
		pfn_vkGetVideoSessionMemoryRequirementsKHR = staticPfn_vkGetVideoSessionMemoryRequirementsKHR;
		pfn_vkBindVideoSessionMemoryKHR = staticPfn_vkBindVideoSessionMemoryKHR;
#endif
#if defined(VK_KHR_video_decode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
		pfn_vkCmdDecodeVideoKHR = staticPfn_vkCmdDecodeVideoKHR;
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
		pfn_vkCmdBeginVideoCodingKHR = staticPfn_vkCmdBeginVideoCodingKHR;
		pfn_vkCmdControlVideoCodingKHR = staticPfn_vkCmdControlVideoCodingKHR;
		pfn_vkCmdEndVideoCodingKHR = staticPfn_vkCmdEndVideoCodingKHR;
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
		pfn_vkCmdEncodeVideoKHR = staticPfn_vkCmdEncodeVideoKHR;
#endif
#if defined(VK_NV_memory_decompression) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address))
		pfn_vkCmdDecompressMemoryNV = staticPfn_vkCmdDecompressMemoryNV;
		pfn_vkCmdDecompressMemoryIndirectCountNV = staticPfn_vkCmdDecompressMemoryIndirectCountNV;
#endif
#if defined(VK_NVX_binary_import)
		pfn_vkCreateCuModuleNVX = staticPfn_vkCreateCuModuleNVX;
		pfn_vkCreateCuFunctionNVX = staticPfn_vkCreateCuFunctionNVX;
		pfn_vkDestroyCuModuleNVX = staticPfn_vkDestroyCuModuleNVX;
		pfn_vkDestroyCuFunctionNVX = staticPfn_vkDestroyCuFunctionNVX;
		pfn_vkCmdCuLaunchKernelNVX = staticPfn_vkCmdCuLaunchKernelNVX;
#endif
#if defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_synchronization2) && defined(VK_EXT_descriptor_indexing))
		pfn_vkGetDescriptorSetLayoutSizeEXT = staticPfn_vkGetDescriptorSetLayoutSizeEXT;
		pfn_vkGetDescriptorSetLayoutBindingOffsetEXT = staticPfn_vkGetDescriptorSetLayoutBindingOffsetEXT;
		pfn_vkGetDescriptorEXT = staticPfn_vkGetDescriptorEXT;
		pfn_vkCmdBindDescriptorBuffersEXT = staticPfn_vkCmdBindDescriptorBuffersEXT;
		pfn_vkCmdSetDescriptorBufferOffsetsEXT = staticPfn_vkCmdSetDescriptorBufferOffsetsEXT;
		pfn_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = staticPfn_vkCmdBindDescriptorBufferEmbeddedSamplersEXT;
		pfn_vkGetBufferOpaqueCaptureDescriptorDataEXT = staticPfn_vkGetBufferOpaqueCaptureDescriptorDataEXT;
		pfn_vkGetImageOpaqueCaptureDescriptorDataEXT = staticPfn_vkGetImageOpaqueCaptureDescriptorDataEXT;
		pfn_vkGetImageViewOpaqueCaptureDescriptorDataEXT = staticPfn_vkGetImageViewOpaqueCaptureDescriptorDataEXT;
		pfn_vkGetSamplerOpaqueCaptureDescriptorDataEXT = staticPfn_vkGetSamplerOpaqueCaptureDescriptorDataEXT;
#endif
#if (defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_synchronization2) && defined(VK_EXT_descriptor_indexing))) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing))
		pfn_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = staticPfn_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT;
#endif
#if defined(VK_EXT_pageable_device_local_memory) && (defined(VK_EXT_memory_priority))
		pfn_vkSetDeviceMemoryPriorityEXT = staticPfn_vkSetDeviceMemoryPriorityEXT;
#endif
#if defined(VK_EXT_acquire_drm_display) && (defined(VK_EXT_direct_mode_display))
		pfn_vkAcquireDrmDisplayEXT = staticPfn_vkAcquireDrmDisplayEXT;
		pfn_vkGetDrmDisplayEXT = staticPfn_vkGetDrmDisplayEXT;
#endif
#if defined(VK_KHR_present_wait) && (defined(VK_KHR_swapchain) && defined(VK_KHR_present_id))
		pfn_vkWaitForPresentKHR = staticPfn_vkWaitForPresentKHR;
#endif
#if defined(VK_FUCHSIA_buffer_collection) && (defined(VK_FUCHSIA_external_memory) && defined(VK_KHR_sampler_ycbcr_conversion))
		pfn_vkCreateBufferCollectionFUCHSIA = staticPfn_vkCreateBufferCollectionFUCHSIA;
		pfn_vkSetBufferCollectionBufferConstraintsFUCHSIA = staticPfn_vkSetBufferCollectionBufferConstraintsFUCHSIA;
		pfn_vkSetBufferCollectionImageConstraintsFUCHSIA = staticPfn_vkSetBufferCollectionImageConstraintsFUCHSIA;
		pfn_vkDestroyBufferCollectionFUCHSIA = staticPfn_vkDestroyBufferCollectionFUCHSIA;
		pfn_vkGetBufferCollectionPropertiesFUCHSIA = staticPfn_vkGetBufferCollectionPropertiesFUCHSIA;
#endif
#if defined(VK_NV_cuda_kernel_launch)
		pfn_vkCreateCudaModuleNV = staticPfn_vkCreateCudaModuleNV;
		pfn_vkGetCudaModuleCacheNV = staticPfn_vkGetCudaModuleCacheNV;
		pfn_vkCreateCudaFunctionNV = staticPfn_vkCreateCudaFunctionNV;
		pfn_vkDestroyCudaModuleNV = staticPfn_vkDestroyCudaModuleNV;
		pfn_vkDestroyCudaFunctionNV = staticPfn_vkDestroyCudaFunctionNV;
		pfn_vkCmdCudaLaunchKernelNV = staticPfn_vkCmdCudaLaunchKernelNV;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdBeginRendering = staticPfn_vkCmdBeginRendering;
#endif
#if defined(VK_KHR_dynamic_rendering) && (defined(VK_KHR_depth_stencil_resolve) && defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdBeginRenderingKHR = staticPfn_vkCmdBeginRenderingKHR;
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdEndRendering = staticPfn_vkCmdEndRendering;
#endif
#if defined(VK_KHR_dynamic_rendering) && (defined(VK_KHR_depth_stencil_resolve) && defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdEndRenderingKHR = staticPfn_vkCmdEndRenderingKHR;
#endif
#if defined(VK_VALVE_descriptor_set_host_mapping) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetDescriptorSetLayoutHostMappingInfoVALVE = staticPfn_vkGetDescriptorSetLayoutHostMappingInfoVALVE;
		pfn_vkGetDescriptorSetHostMappingVALVE = staticPfn_vkGetDescriptorSetHostMappingVALVE;
#endif
#if defined(VK_EXT_opacity_micromap) && (defined(VK_KHR_acceleration_structure) && defined(VK_KHR_synchronization2))
		pfn_vkCreateMicromapEXT = staticPfn_vkCreateMicromapEXT;
		pfn_vkCmdBuildMicromapsEXT = staticPfn_vkCmdBuildMicromapsEXT;
		pfn_vkBuildMicromapsEXT = staticPfn_vkBuildMicromapsEXT;
		pfn_vkDestroyMicromapEXT = staticPfn_vkDestroyMicromapEXT;
		pfn_vkCmdCopyMicromapEXT = staticPfn_vkCmdCopyMicromapEXT;
		pfn_vkCopyMicromapEXT = staticPfn_vkCopyMicromapEXT;
		pfn_vkCmdCopyMicromapToMemoryEXT = staticPfn_vkCmdCopyMicromapToMemoryEXT;
		pfn_vkCopyMicromapToMemoryEXT = staticPfn_vkCopyMicromapToMemoryEXT;
		pfn_vkCmdCopyMemoryToMicromapEXT = staticPfn_vkCmdCopyMemoryToMicromapEXT;
		pfn_vkCopyMemoryToMicromapEXT = staticPfn_vkCopyMemoryToMicromapEXT;
		pfn_vkCmdWriteMicromapsPropertiesEXT = staticPfn_vkCmdWriteMicromapsPropertiesEXT;
		pfn_vkWriteMicromapsPropertiesEXT = staticPfn_vkWriteMicromapsPropertiesEXT;
		pfn_vkGetDeviceMicromapCompatibilityEXT = staticPfn_vkGetDeviceMicromapCompatibilityEXT;
		pfn_vkGetMicromapBuildSizesEXT = staticPfn_vkGetMicromapBuildSizesEXT;
#endif
#if defined(VK_EXT_shader_module_identifier) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_EXT_pipeline_creation_cache_control))
		pfn_vkGetShaderModuleIdentifierEXT = staticPfn_vkGetShaderModuleIdentifierEXT;
		pfn_vkGetShaderModuleCreateInfoIdentifierEXT = staticPfn_vkGetShaderModuleCreateInfoIdentifierEXT;
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
		pfn_vkGetImageSubresourceLayout2KHR = staticPfn_vkGetImageSubresourceLayout2KHR;
#endif
#if (defined(VK_EXT_host_image_copy) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_copy_commands2) && defined(VK_KHR_format_feature_flags2))) || (defined(VK_EXT_image_compression_control) && (defined(VK_KHR_get_physical_device_properties2)))
		pfn_vkGetImageSubresourceLayout2EXT = staticPfn_vkGetImageSubresourceLayout2EXT;
#endif
#if defined(VK_EXT_pipeline_properties) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPipelinePropertiesEXT = staticPfn_vkGetPipelinePropertiesEXT;
#endif
#if defined(VK_EXT_metal_objects)
		pfn_vkExportMetalObjectsEXT = staticPfn_vkExportMetalObjectsEXT;
#endif
#if defined(VK_QCOM_tile_properties) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetFramebufferTilePropertiesQCOM = staticPfn_vkGetFramebufferTilePropertiesQCOM;
		pfn_vkGetDynamicRenderingTilePropertiesQCOM = staticPfn_vkGetDynamicRenderingTilePropertiesQCOM;
#endif
#if defined(VK_NV_optical_flow) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_format_feature_flags2) && defined(VK_KHR_synchronization2))
		pfn_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = staticPfn_vkGetPhysicalDeviceOpticalFlowImageFormatsNV;
		pfn_vkCreateOpticalFlowSessionNV = staticPfn_vkCreateOpticalFlowSessionNV;
		pfn_vkDestroyOpticalFlowSessionNV = staticPfn_vkDestroyOpticalFlowSessionNV;
		pfn_vkBindOpticalFlowSessionImageNV = staticPfn_vkBindOpticalFlowSessionImageNV;
		pfn_vkCmdOpticalFlowExecuteNV = staticPfn_vkCmdOpticalFlowExecuteNV;
#endif
#if defined(VK_EXT_device_fault) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetDeviceFaultInfoEXT = staticPfn_vkGetDeviceFaultInfoEXT;
#endif
#if defined(VK_EXT_depth_bias_control) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdSetDepthBias2EXT = staticPfn_vkCmdSetDepthBias2EXT;
#endif
#if defined(VK_EXT_swapchain_maintenance1) && (defined(VK_KHR_swapchain) && defined(VK_EXT_surface_maintenance1) && defined(VK_KHR_get_physical_device_properties2))
		pfn_vkReleaseSwapchainImagesEXT = staticPfn_vkReleaseSwapchainImagesEXT;
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
		pfn_vkGetDeviceImageSubresourceLayoutKHR = staticPfn_vkGetDeviceImageSubresourceLayoutKHR;
#endif
#if defined(VK_KHR_map_memory2)
		pfn_vkMapMemory2KHR = staticPfn_vkMapMemory2KHR;
		pfn_vkUnmapMemory2KHR = staticPfn_vkUnmapMemory2KHR;
#endif
#if defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))
		pfn_vkCreateShadersEXT = staticPfn_vkCreateShadersEXT;
		pfn_vkDestroyShaderEXT = staticPfn_vkDestroyShaderEXT;
		pfn_vkGetShaderBinaryDataEXT = staticPfn_vkGetShaderBinaryDataEXT;
		pfn_vkCmdBindShadersEXT = staticPfn_vkCmdBindShadersEXT;
#endif
#if defined(VK_QNX_external_memory_screen_buffer) && (((defined(VK_KHR_sampler_ycbcr_conversion) && defined(VK_KHR_external_memory) && defined(VK_KHR_dedicated_allocation)) || defined(VK_VERSION_1_1)) && defined(VK_EXT_queue_family_foreign))
		pfn_vkGetScreenBufferPropertiesQNX = staticPfn_vkGetScreenBufferPropertiesQNX;
#endif
#if defined(VK_KHR_cooperative_matrix) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = staticPfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR;
#endif
#if defined(VK_AMDX_shader_enqueue) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_synchronization2) && defined(VK_KHR_pipeline_library) && defined(VK_KHR_spirv_1_4))
		pfn_vkGetExecutionGraphPipelineScratchSizeAMDX = staticPfn_vkGetExecutionGraphPipelineScratchSizeAMDX;
		pfn_vkGetExecutionGraphPipelineNodeIndexAMDX = staticPfn_vkGetExecutionGraphPipelineNodeIndexAMDX;
		pfn_vkCreateExecutionGraphPipelinesAMDX = staticPfn_vkCreateExecutionGraphPipelinesAMDX;
		pfn_vkCmdInitializeGraphScratchMemoryAMDX = staticPfn_vkCmdInitializeGraphScratchMemoryAMDX;
		pfn_vkCmdDispatchGraphAMDX = staticPfn_vkCmdDispatchGraphAMDX;
		pfn_vkCmdDispatchGraphIndirectAMDX = staticPfn_vkCmdDispatchGraphIndirectAMDX;
		pfn_vkCmdDispatchGraphIndirectCountAMDX = staticPfn_vkCmdDispatchGraphIndirectCountAMDX;
#endif
#if defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))
		pfn_vkCmdBindDescriptorSets2KHR = staticPfn_vkCmdBindDescriptorSets2KHR;
		pfn_vkCmdPushConstants2KHR = staticPfn_vkCmdPushConstants2KHR;
#endif
#if (defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))) && (defined(VK_KHR_push_descriptor))
		pfn_vkCmdPushDescriptorSet2KHR = staticPfn_vkCmdPushDescriptorSet2KHR;
		pfn_vkCmdPushDescriptorSetWithTemplate2KHR = staticPfn_vkCmdPushDescriptorSetWithTemplate2KHR;
#endif
#if (defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))) && (defined(VK_EXT_descriptor_buffer))
		pfn_vkCmdSetDescriptorBufferOffsets2EXT = staticPfn_vkCmdSetDescriptorBufferOffsets2EXT;
		pfn_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = staticPfn_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT;
#endif
#if defined(VK_NV_low_latency2) && (defined(VK_VERSION_1_2) || defined(VK_KHR_timeline_semaphore))
		pfn_vkSetLatencySleepModeNV = staticPfn_vkSetLatencySleepModeNV;
		pfn_vkLatencySleepNV = staticPfn_vkLatencySleepNV;
		pfn_vkSetLatencyMarkerNV = staticPfn_vkSetLatencyMarkerNV;
		pfn_vkGetLatencyTimingsNV = staticPfn_vkGetLatencyTimingsNV;
		pfn_vkQueueNotifyOutOfBandNV = staticPfn_vkQueueNotifyOutOfBandNV;
#endif
#if defined(VK_KHR_dynamic_rendering_local_read) && (defined(VK_KHR_dynamic_rendering))
		pfn_vkCmdSetRenderingAttachmentLocationsKHR = staticPfn_vkCmdSetRenderingAttachmentLocationsKHR;
		pfn_vkCmdSetRenderingInputAttachmentIndicesKHR = staticPfn_vkCmdSetRenderingInputAttachmentIndicesKHR;
#endif
	}

	void VulkanLoader::LoadInstanceFunctions(VkInstance instance) {
#if defined(VK_VERSION_1_0)
		pfn_vkCreateInstance = (PFN_vkCreateInstance)vkGetInstanceProcAddr(instance, "vkCreateInstance");
		pfn_vkDestroyInstance = (PFN_vkDestroyInstance)vkGetInstanceProcAddr(instance, "vkDestroyInstance");
		pfn_vkEnumeratePhysicalDevices = (PFN_vkEnumeratePhysicalDevices)vkGetInstanceProcAddr(instance, "vkEnumeratePhysicalDevices");
		pfn_vkGetInstanceProcAddr = (PFN_vkGetInstanceProcAddr)vkGetInstanceProcAddr(instance, "vkGetInstanceProcAddr");
		pfn_vkGetPhysicalDeviceProperties = (PFN_vkGetPhysicalDeviceProperties)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceProperties");
		pfn_vkGetPhysicalDeviceQueueFamilyProperties = (PFN_vkGetPhysicalDeviceQueueFamilyProperties)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceQueueFamilyProperties");
		pfn_vkGetPhysicalDeviceMemoryProperties = (PFN_vkGetPhysicalDeviceMemoryProperties)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceMemoryProperties");
		pfn_vkGetPhysicalDeviceFeatures = (PFN_vkGetPhysicalDeviceFeatures)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFeatures");
		pfn_vkGetPhysicalDeviceFormatProperties = (PFN_vkGetPhysicalDeviceFormatProperties)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFormatProperties");
		pfn_vkGetPhysicalDeviceImageFormatProperties = (PFN_vkGetPhysicalDeviceImageFormatProperties)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceImageFormatProperties");
		pfn_vkCreateDevice = (PFN_vkCreateDevice)vkGetInstanceProcAddr(instance, "vkCreateDevice");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkEnumerateInstanceVersion = (PFN_vkEnumerateInstanceVersion)vkGetInstanceProcAddr(instance, "vkEnumerateInstanceVersion");
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkEnumerateInstanceLayerProperties = (PFN_vkEnumerateInstanceLayerProperties)vkGetInstanceProcAddr(instance, "vkEnumerateInstanceLayerProperties");
		pfn_vkEnumerateInstanceExtensionProperties = (PFN_vkEnumerateInstanceExtensionProperties)vkGetInstanceProcAddr(instance, "vkEnumerateInstanceExtensionProperties");
		pfn_vkEnumerateDeviceLayerProperties = (PFN_vkEnumerateDeviceLayerProperties)vkGetInstanceProcAddr(instance, "vkEnumerateDeviceLayerProperties");
		pfn_vkEnumerateDeviceExtensionProperties = (PFN_vkEnumerateDeviceExtensionProperties)vkGetInstanceProcAddr(instance, "vkEnumerateDeviceExtensionProperties");
		pfn_vkQueueSubmit = (PFN_vkQueueSubmit)vkGetInstanceProcAddr(instance, "vkQueueSubmit");
		pfn_vkQueueWaitIdle = (PFN_vkQueueWaitIdle)vkGetInstanceProcAddr(instance, "vkQueueWaitIdle");
		pfn_vkGetPhysicalDeviceSparseImageFormatProperties = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSparseImageFormatProperties");
		pfn_vkQueueBindSparse = (PFN_vkQueueBindSparse)vkGetInstanceProcAddr(instance, "vkQueueBindSparse");
		pfn_vkBeginCommandBuffer = (PFN_vkBeginCommandBuffer)vkGetInstanceProcAddr(instance, "vkBeginCommandBuffer");
		pfn_vkEndCommandBuffer = (PFN_vkEndCommandBuffer)vkGetInstanceProcAddr(instance, "vkEndCommandBuffer");
		pfn_vkResetCommandBuffer = (PFN_vkResetCommandBuffer)vkGetInstanceProcAddr(instance, "vkResetCommandBuffer");
		pfn_vkCmdBindPipeline = (PFN_vkCmdBindPipeline)vkGetInstanceProcAddr(instance, "vkCmdBindPipeline");
#endif
#if defined(VK_EXT_attachment_feedback_loop_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_EXT_attachment_feedback_loop_layout))
		pfn_vkCmdSetAttachmentFeedbackLoopEnableEXT = (PFN_vkCmdSetAttachmentFeedbackLoopEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetAttachmentFeedbackLoopEnableEXT");
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkCmdSetViewport = (PFN_vkCmdSetViewport)vkGetInstanceProcAddr(instance, "vkCmdSetViewport");
		pfn_vkCmdSetScissor = (PFN_vkCmdSetScissor)vkGetInstanceProcAddr(instance, "vkCmdSetScissor");
		pfn_vkCmdSetLineWidth = (PFN_vkCmdSetLineWidth)vkGetInstanceProcAddr(instance, "vkCmdSetLineWidth");
		pfn_vkCmdSetDepthBias = (PFN_vkCmdSetDepthBias)vkGetInstanceProcAddr(instance, "vkCmdSetDepthBias");
		pfn_vkCmdSetBlendConstants = (PFN_vkCmdSetBlendConstants)vkGetInstanceProcAddr(instance, "vkCmdSetBlendConstants");
		pfn_vkCmdSetDepthBounds = (PFN_vkCmdSetDepthBounds)vkGetInstanceProcAddr(instance, "vkCmdSetDepthBounds");
		pfn_vkCmdSetStencilCompareMask = (PFN_vkCmdSetStencilCompareMask)vkGetInstanceProcAddr(instance, "vkCmdSetStencilCompareMask");
		pfn_vkCmdSetStencilWriteMask = (PFN_vkCmdSetStencilWriteMask)vkGetInstanceProcAddr(instance, "vkCmdSetStencilWriteMask");
		pfn_vkCmdSetStencilReference = (PFN_vkCmdSetStencilReference)vkGetInstanceProcAddr(instance, "vkCmdSetStencilReference");
		pfn_vkCmdBindDescriptorSets = (PFN_vkCmdBindDescriptorSets)vkGetInstanceProcAddr(instance, "vkCmdBindDescriptorSets");
		pfn_vkCmdBindIndexBuffer = (PFN_vkCmdBindIndexBuffer)vkGetInstanceProcAddr(instance, "vkCmdBindIndexBuffer");
		pfn_vkCmdBindVertexBuffers = (PFN_vkCmdBindVertexBuffers)vkGetInstanceProcAddr(instance, "vkCmdBindVertexBuffers");
		pfn_vkCmdDraw = (PFN_vkCmdDraw)vkGetInstanceProcAddr(instance, "vkCmdDraw");
		pfn_vkCmdDrawIndexed = (PFN_vkCmdDrawIndexed)vkGetInstanceProcAddr(instance, "vkCmdDrawIndexed");
#endif
#if defined(VK_EXT_multi_draw) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdDrawMultiEXT = (PFN_vkCmdDrawMultiEXT)vkGetInstanceProcAddr(instance, "vkCmdDrawMultiEXT");
		pfn_vkCmdDrawMultiIndexedEXT = (PFN_vkCmdDrawMultiIndexedEXT)vkGetInstanceProcAddr(instance, "vkCmdDrawMultiIndexedEXT");
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkCmdDrawIndirect = (PFN_vkCmdDrawIndirect)vkGetInstanceProcAddr(instance, "vkCmdDrawIndirect");
		pfn_vkCmdDrawIndexedIndirect = (PFN_vkCmdDrawIndexedIndirect)vkGetInstanceProcAddr(instance, "vkCmdDrawIndexedIndirect");
		pfn_vkCmdDispatch = (PFN_vkCmdDispatch)vkGetInstanceProcAddr(instance, "vkCmdDispatch");
		pfn_vkCmdDispatchIndirect = (PFN_vkCmdDispatchIndirect)vkGetInstanceProcAddr(instance, "vkCmdDispatchIndirect");
#endif
#if defined(VK_HUAWEI_subpass_shading) && (defined(VK_KHR_create_renderpass2) && defined(VK_KHR_synchronization2))
		pfn_vkCmdSubpassShadingHUAWEI = (PFN_vkCmdSubpassShadingHUAWEI)vkGetInstanceProcAddr(instance, "vkCmdSubpassShadingHUAWEI");
#endif
#if defined(VK_HUAWEI_cluster_culling_shader) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdDrawClusterHUAWEI = (PFN_vkCmdDrawClusterHUAWEI)vkGetInstanceProcAddr(instance, "vkCmdDrawClusterHUAWEI");
		pfn_vkCmdDrawClusterIndirectHUAWEI = (PFN_vkCmdDrawClusterIndirectHUAWEI)vkGetInstanceProcAddr(instance, "vkCmdDrawClusterIndirectHUAWEI");
#endif
#if defined(VK_NV_device_generated_commands_compute) && (defined(VK_NV_device_generated_commands))
		pfn_vkCmdUpdatePipelineIndirectBufferNV = (PFN_vkCmdUpdatePipelineIndirectBufferNV)vkGetInstanceProcAddr(instance, "vkCmdUpdatePipelineIndirectBufferNV");
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkCmdCopyBuffer = (PFN_vkCmdCopyBuffer)vkGetInstanceProcAddr(instance, "vkCmdCopyBuffer");
		pfn_vkCmdCopyImage = (PFN_vkCmdCopyImage)vkGetInstanceProcAddr(instance, "vkCmdCopyImage");
		pfn_vkCmdBlitImage = (PFN_vkCmdBlitImage)vkGetInstanceProcAddr(instance, "vkCmdBlitImage");
		pfn_vkCmdCopyBufferToImage = (PFN_vkCmdCopyBufferToImage)vkGetInstanceProcAddr(instance, "vkCmdCopyBufferToImage");
		pfn_vkCmdCopyImageToBuffer = (PFN_vkCmdCopyImageToBuffer)vkGetInstanceProcAddr(instance, "vkCmdCopyImageToBuffer");
#endif
#if defined(VK_NV_copy_memory_indirect) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address))
		pfn_vkCmdCopyMemoryIndirectNV = (PFN_vkCmdCopyMemoryIndirectNV)vkGetInstanceProcAddr(instance, "vkCmdCopyMemoryIndirectNV");
		pfn_vkCmdCopyMemoryToImageIndirectNV = (PFN_vkCmdCopyMemoryToImageIndirectNV)vkGetInstanceProcAddr(instance, "vkCmdCopyMemoryToImageIndirectNV");
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkCmdUpdateBuffer = (PFN_vkCmdUpdateBuffer)vkGetInstanceProcAddr(instance, "vkCmdUpdateBuffer");
		pfn_vkCmdFillBuffer = (PFN_vkCmdFillBuffer)vkGetInstanceProcAddr(instance, "vkCmdFillBuffer");
		pfn_vkCmdClearColorImage = (PFN_vkCmdClearColorImage)vkGetInstanceProcAddr(instance, "vkCmdClearColorImage");
		pfn_vkCmdClearDepthStencilImage = (PFN_vkCmdClearDepthStencilImage)vkGetInstanceProcAddr(instance, "vkCmdClearDepthStencilImage");
		pfn_vkCmdClearAttachments = (PFN_vkCmdClearAttachments)vkGetInstanceProcAddr(instance, "vkCmdClearAttachments");
		pfn_vkCmdResolveImage = (PFN_vkCmdResolveImage)vkGetInstanceProcAddr(instance, "vkCmdResolveImage");
		pfn_vkCmdSetEvent = (PFN_vkCmdSetEvent)vkGetInstanceProcAddr(instance, "vkCmdSetEvent");
		pfn_vkCmdResetEvent = (PFN_vkCmdResetEvent)vkGetInstanceProcAddr(instance, "vkCmdResetEvent");
		pfn_vkCmdWaitEvents = (PFN_vkCmdWaitEvents)vkGetInstanceProcAddr(instance, "vkCmdWaitEvents");
		pfn_vkCmdPipelineBarrier = (PFN_vkCmdPipelineBarrier)vkGetInstanceProcAddr(instance, "vkCmdPipelineBarrier");
		pfn_vkCmdBeginQuery = (PFN_vkCmdBeginQuery)vkGetInstanceProcAddr(instance, "vkCmdBeginQuery");
		pfn_vkCmdEndQuery = (PFN_vkCmdEndQuery)vkGetInstanceProcAddr(instance, "vkCmdEndQuery");
#endif
#if defined(VK_EXT_conditional_rendering) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdBeginConditionalRenderingEXT = (PFN_vkCmdBeginConditionalRenderingEXT)vkGetInstanceProcAddr(instance, "vkCmdBeginConditionalRenderingEXT");
		pfn_vkCmdEndConditionalRenderingEXT = (PFN_vkCmdEndConditionalRenderingEXT)vkGetInstanceProcAddr(instance, "vkCmdEndConditionalRenderingEXT");
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkCmdResetQueryPool = (PFN_vkCmdResetQueryPool)vkGetInstanceProcAddr(instance, "vkCmdResetQueryPool");
		pfn_vkCmdWriteTimestamp = (PFN_vkCmdWriteTimestamp)vkGetInstanceProcAddr(instance, "vkCmdWriteTimestamp");
		pfn_vkCmdCopyQueryPoolResults = (PFN_vkCmdCopyQueryPoolResults)vkGetInstanceProcAddr(instance, "vkCmdCopyQueryPoolResults");
		pfn_vkCmdPushConstants = (PFN_vkCmdPushConstants)vkGetInstanceProcAddr(instance, "vkCmdPushConstants");
		pfn_vkCmdBeginRenderPass = (PFN_vkCmdBeginRenderPass)vkGetInstanceProcAddr(instance, "vkCmdBeginRenderPass");
		pfn_vkCmdNextSubpass = (PFN_vkCmdNextSubpass)vkGetInstanceProcAddr(instance, "vkCmdNextSubpass");
		pfn_vkCmdEndRenderPass = (PFN_vkCmdEndRenderPass)vkGetInstanceProcAddr(instance, "vkCmdEndRenderPass");
		pfn_vkCmdExecuteCommands = (PFN_vkCmdExecuteCommands)vkGetInstanceProcAddr(instance, "vkCmdExecuteCommands");
#endif
#if defined(VK_KHR_android_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateAndroidSurfaceKHR = (PFN_vkCreateAndroidSurfaceKHR)vkGetInstanceProcAddr(instance, "vkCreateAndroidSurfaceKHR");
#endif
#if defined(VK_KHR_display) && (defined(VK_KHR_surface))
		pfn_vkGetPhysicalDeviceDisplayPropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPropertiesKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceDisplayPropertiesKHR");
		pfn_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = (PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
		pfn_vkGetDisplayPlaneSupportedDisplaysKHR = (PFN_vkGetDisplayPlaneSupportedDisplaysKHR)vkGetInstanceProcAddr(instance, "vkGetDisplayPlaneSupportedDisplaysKHR");
		pfn_vkGetDisplayModePropertiesKHR = (PFN_vkGetDisplayModePropertiesKHR)vkGetInstanceProcAddr(instance, "vkGetDisplayModePropertiesKHR");
		pfn_vkCreateDisplayModeKHR = (PFN_vkCreateDisplayModeKHR)vkGetInstanceProcAddr(instance, "vkCreateDisplayModeKHR");
		pfn_vkGetDisplayPlaneCapabilitiesKHR = (PFN_vkGetDisplayPlaneCapabilitiesKHR)vkGetInstanceProcAddr(instance, "vkGetDisplayPlaneCapabilitiesKHR");
		pfn_vkCreateDisplayPlaneSurfaceKHR = (PFN_vkCreateDisplayPlaneSurfaceKHR)vkGetInstanceProcAddr(instance, "vkCreateDisplayPlaneSurfaceKHR");
#endif
#if defined(VK_KHR_surface)
		pfn_vkDestroySurfaceKHR = (PFN_vkDestroySurfaceKHR)vkGetInstanceProcAddr(instance, "vkDestroySurfaceKHR");
		pfn_vkGetPhysicalDeviceSurfaceSupportKHR = (PFN_vkGetPhysicalDeviceSurfaceSupportKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceSupportKHR");
		pfn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
		pfn_vkGetPhysicalDeviceSurfaceFormatsKHR = (PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceFormatsKHR");
		pfn_vkGetPhysicalDeviceSurfacePresentModesKHR = (PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfacePresentModesKHR");
#endif
#if defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))
		pfn_vkQueuePresentKHR = (PFN_vkQueuePresentKHR)vkGetInstanceProcAddr(instance, "vkQueuePresentKHR");
#endif
#if defined(VK_NN_vi_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateViSurfaceNN = (PFN_vkCreateViSurfaceNN)vkGetInstanceProcAddr(instance, "vkCreateViSurfaceNN");
#endif
#if defined(VK_KHR_wayland_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateWaylandSurfaceKHR = (PFN_vkCreateWaylandSurfaceKHR)vkGetInstanceProcAddr(instance, "vkCreateWaylandSurfaceKHR");
		pfn_vkGetPhysicalDeviceWaylandPresentationSupportKHR = (PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceWaylandPresentationSupportKHR");
#endif
#if defined(VK_KHR_win32_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateWin32SurfaceKHR = (PFN_vkCreateWin32SurfaceKHR)vkGetInstanceProcAddr(instance, "vkCreateWin32SurfaceKHR");
		pfn_vkGetPhysicalDeviceWin32PresentationSupportKHR = (PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceWin32PresentationSupportKHR");
#endif
#if defined(VK_KHR_xlib_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateXlibSurfaceKHR = (PFN_vkCreateXlibSurfaceKHR)vkGetInstanceProcAddr(instance, "vkCreateXlibSurfaceKHR");
		pfn_vkGetPhysicalDeviceXlibPresentationSupportKHR = (PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceXlibPresentationSupportKHR");
#endif
#if defined(VK_KHR_xcb_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateXcbSurfaceKHR = (PFN_vkCreateXcbSurfaceKHR)vkGetInstanceProcAddr(instance, "vkCreateXcbSurfaceKHR");
		pfn_vkGetPhysicalDeviceXcbPresentationSupportKHR = (PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceXcbPresentationSupportKHR");
#endif
#if defined(VK_EXT_directfb_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateDirectFBSurfaceEXT = (PFN_vkCreateDirectFBSurfaceEXT)vkGetInstanceProcAddr(instance, "vkCreateDirectFBSurfaceEXT");
		pfn_vkGetPhysicalDeviceDirectFBPresentationSupportEXT = (PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceDirectFBPresentationSupportEXT");
#endif
#if defined(VK_FUCHSIA_imagepipe_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateImagePipeSurfaceFUCHSIA = (PFN_vkCreateImagePipeSurfaceFUCHSIA)vkGetInstanceProcAddr(instance, "vkCreateImagePipeSurfaceFUCHSIA");
#endif
#if defined(VK_GGP_stream_descriptor_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateStreamDescriptorSurfaceGGP = (PFN_vkCreateStreamDescriptorSurfaceGGP)vkGetInstanceProcAddr(instance, "vkCreateStreamDescriptorSurfaceGGP");
#endif
#if defined(VK_QNX_screen_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateScreenSurfaceQNX = (PFN_vkCreateScreenSurfaceQNX)vkGetInstanceProcAddr(instance, "vkCreateScreenSurfaceQNX");
		pfn_vkGetPhysicalDeviceScreenPresentationSupportQNX = (PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceScreenPresentationSupportQNX");
#endif
#if defined(VK_EXT_debug_report)
		pfn_vkCreateDebugReportCallbackEXT = (PFN_vkCreateDebugReportCallbackEXT)vkGetInstanceProcAddr(instance, "vkCreateDebugReportCallbackEXT");
		pfn_vkDestroyDebugReportCallbackEXT = (PFN_vkDestroyDebugReportCallbackEXT)vkGetInstanceProcAddr(instance, "vkDestroyDebugReportCallbackEXT");
		pfn_vkDebugReportMessageEXT = (PFN_vkDebugReportMessageEXT)vkGetInstanceProcAddr(instance, "vkDebugReportMessageEXT");
#endif
#if defined(VK_EXT_debug_marker) && (defined(VK_EXT_debug_report))
		pfn_vkCmdDebugMarkerBeginEXT = (PFN_vkCmdDebugMarkerBeginEXT)vkGetInstanceProcAddr(instance, "vkCmdDebugMarkerBeginEXT");
		pfn_vkCmdDebugMarkerEndEXT = (PFN_vkCmdDebugMarkerEndEXT)vkGetInstanceProcAddr(instance, "vkCmdDebugMarkerEndEXT");
		pfn_vkCmdDebugMarkerInsertEXT = (PFN_vkCmdDebugMarkerInsertEXT)vkGetInstanceProcAddr(instance, "vkCmdDebugMarkerInsertEXT");
#endif
#if defined(VK_NV_external_memory_capabilities)
		pfn_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = (PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
#endif
#if defined(VK_NV_device_generated_commands) && (defined(VK_VERSION_1_1) && defined(VK_KHR_buffer_device_address))
		pfn_vkCmdExecuteGeneratedCommandsNV = (PFN_vkCmdExecuteGeneratedCommandsNV)vkGetInstanceProcAddr(instance, "vkCmdExecuteGeneratedCommandsNV");
		pfn_vkCmdPreprocessGeneratedCommandsNV = (PFN_vkCmdPreprocessGeneratedCommandsNV)vkGetInstanceProcAddr(instance, "vkCmdPreprocessGeneratedCommandsNV");
		pfn_vkCmdBindPipelineShaderGroupNV = (PFN_vkCmdBindPipelineShaderGroupNV)vkGetInstanceProcAddr(instance, "vkCmdBindPipelineShaderGroupNV");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceFeatures2 = (PFN_vkGetPhysicalDeviceFeatures2)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFeatures2");
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		pfn_vkGetPhysicalDeviceFeatures2KHR = (PFN_vkGetPhysicalDeviceFeatures2KHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFeatures2KHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceProperties2 = (PFN_vkGetPhysicalDeviceProperties2)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceProperties2");
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		pfn_vkGetPhysicalDeviceProperties2KHR = (PFN_vkGetPhysicalDeviceProperties2KHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceProperties2KHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceFormatProperties2 = (PFN_vkGetPhysicalDeviceFormatProperties2)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFormatProperties2");
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		pfn_vkGetPhysicalDeviceFormatProperties2KHR = (PFN_vkGetPhysicalDeviceFormatProperties2KHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFormatProperties2KHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceImageFormatProperties2 = (PFN_vkGetPhysicalDeviceImageFormatProperties2)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceImageFormatProperties2");
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		pfn_vkGetPhysicalDeviceImageFormatProperties2KHR = (PFN_vkGetPhysicalDeviceImageFormatProperties2KHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceImageFormatProperties2KHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceQueueFamilyProperties2 = (PFN_vkGetPhysicalDeviceQueueFamilyProperties2)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceQueueFamilyProperties2");
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		pfn_vkGetPhysicalDeviceQueueFamilyProperties2KHR = (PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceQueueFamilyProperties2KHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceMemoryProperties2 = (PFN_vkGetPhysicalDeviceMemoryProperties2)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceMemoryProperties2");
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		pfn_vkGetPhysicalDeviceMemoryProperties2KHR = (PFN_vkGetPhysicalDeviceMemoryProperties2KHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceMemoryProperties2KHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceSparseImageFormatProperties2 = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties2)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSparseImageFormatProperties2");
#endif
#if defined(VK_KHR_get_physical_device_properties2)
		pfn_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = (PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
#endif
#if defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdPushDescriptorSetKHR = (PFN_vkCmdPushDescriptorSetKHR)vkGetInstanceProcAddr(instance, "vkCmdPushDescriptorSetKHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceExternalBufferProperties = (PFN_vkGetPhysicalDeviceExternalBufferProperties)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalBufferProperties");
#endif
#if defined(VK_KHR_external_memory_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPhysicalDeviceExternalBufferPropertiesKHR = (PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalBufferPropertiesKHR");
#endif
#if defined(VK_NV_external_memory_sci_buf) && (defined(VK_VERSION_1_1))
		pfn_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = (PFN_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV");
		pfn_vkGetPhysicalDeviceSciBufAttributesNV = (PFN_vkGetPhysicalDeviceSciBufAttributesNV)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSciBufAttributesNV");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceExternalSemaphoreProperties = (PFN_vkGetPhysicalDeviceExternalSemaphoreProperties)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalSemaphoreProperties");
#endif
#if defined(VK_KHR_external_semaphore_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = (PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetPhysicalDeviceExternalFenceProperties = (PFN_vkGetPhysicalDeviceExternalFenceProperties)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalFenceProperties");
#endif
#if defined(VK_KHR_external_fence_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPhysicalDeviceExternalFencePropertiesKHR = (PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceExternalFencePropertiesKHR");
#endif
#if (defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))) || (defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1)))
		pfn_vkGetPhysicalDeviceSciSyncAttributesNV = (PFN_vkGetPhysicalDeviceSciSyncAttributesNV)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSciSyncAttributesNV");
#endif
#if defined(VK_EXT_direct_mode_display) && (defined(VK_KHR_display))
		pfn_vkReleaseDisplayEXT = (PFN_vkReleaseDisplayEXT)vkGetInstanceProcAddr(instance, "vkReleaseDisplayEXT");
#endif
#if defined(VK_EXT_acquire_xlib_display) && (defined(VK_EXT_direct_mode_display))
		pfn_vkAcquireXlibDisplayEXT = (PFN_vkAcquireXlibDisplayEXT)vkGetInstanceProcAddr(instance, "vkAcquireXlibDisplayEXT");
		pfn_vkGetRandROutputDisplayEXT = (PFN_vkGetRandROutputDisplayEXT)vkGetInstanceProcAddr(instance, "vkGetRandROutputDisplayEXT");
#endif
#if defined(VK_NV_acquire_winrt_display) && (defined(VK_EXT_direct_mode_display))
		pfn_vkAcquireWinrtDisplayNV = (PFN_vkAcquireWinrtDisplayNV)vkGetInstanceProcAddr(instance, "vkAcquireWinrtDisplayNV");
		pfn_vkGetWinrtDisplayNV = (PFN_vkGetWinrtDisplayNV)vkGetInstanceProcAddr(instance, "vkGetWinrtDisplayNV");
#endif
#if defined(VK_EXT_display_surface_counter) && (defined(VK_KHR_display))
		pfn_vkGetPhysicalDeviceSurfaceCapabilities2EXT = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceCapabilities2EXT");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkEnumeratePhysicalDeviceGroups = (PFN_vkEnumeratePhysicalDeviceGroups)vkGetInstanceProcAddr(instance, "vkEnumeratePhysicalDeviceGroups");
#endif
#if defined(VK_KHR_device_group_creation)
		pfn_vkEnumeratePhysicalDeviceGroupsKHR = (PFN_vkEnumeratePhysicalDeviceGroupsKHR)vkGetInstanceProcAddr(instance, "vkEnumeratePhysicalDeviceGroupsKHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkCmdSetDeviceMask = (PFN_vkCmdSetDeviceMask)vkGetInstanceProcAddr(instance, "vkCmdSetDeviceMask");
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
		pfn_vkCmdSetDeviceMaskKHR = (PFN_vkCmdSetDeviceMaskKHR)vkGetInstanceProcAddr(instance, "vkCmdSetDeviceMaskKHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkCmdDispatchBase = (PFN_vkCmdDispatchBase)vkGetInstanceProcAddr(instance, "vkCmdDispatchBase");
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
		pfn_vkCmdDispatchBaseKHR = (PFN_vkCmdDispatchBaseKHR)vkGetInstanceProcAddr(instance, "vkCmdDispatchBaseKHR");
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_surface)))
		pfn_vkGetPhysicalDevicePresentRectanglesKHR = (PFN_vkGetPhysicalDevicePresentRectanglesKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDevicePresentRectanglesKHR");
#endif
#if (((defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_KHR_descriptor_update_template)))) || ((defined(VK_KHR_descriptor_update_template)) && (defined(VK_KHR_push_descriptor)))
		pfn_vkCmdPushDescriptorSetWithTemplateKHR = (PFN_vkCmdPushDescriptorSetWithTemplateKHR)vkGetInstanceProcAddr(instance, "vkCmdPushDescriptorSetWithTemplateKHR");
#endif
#if defined(VK_MVK_ios_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateIOSSurfaceMVK = (PFN_vkCreateIOSSurfaceMVK)vkGetInstanceProcAddr(instance, "vkCreateIOSSurfaceMVK");
#endif
#if defined(VK_MVK_macos_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateMacOSSurfaceMVK = (PFN_vkCreateMacOSSurfaceMVK)vkGetInstanceProcAddr(instance, "vkCreateMacOSSurfaceMVK");
#endif
#if defined(VK_EXT_metal_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateMetalSurfaceEXT = (PFN_vkCreateMetalSurfaceEXT)vkGetInstanceProcAddr(instance, "vkCreateMetalSurfaceEXT");
#endif
#if defined(VK_NV_clip_space_w_scaling)
		pfn_vkCmdSetViewportWScalingNV = (PFN_vkCmdSetViewportWScalingNV)vkGetInstanceProcAddr(instance, "vkCmdSetViewportWScalingNV");
#endif
#if defined(VK_EXT_discard_rectangles) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdSetDiscardRectangleEXT = (PFN_vkCmdSetDiscardRectangleEXT)vkGetInstanceProcAddr(instance, "vkCmdSetDiscardRectangleEXT");
		pfn_vkCmdSetDiscardRectangleEnableEXT = (PFN_vkCmdSetDiscardRectangleEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetDiscardRectangleEnableEXT");
		pfn_vkCmdSetDiscardRectangleModeEXT = (PFN_vkCmdSetDiscardRectangleModeEXT)vkGetInstanceProcAddr(instance, "vkCmdSetDiscardRectangleModeEXT");
#endif
#if defined(VK_EXT_sample_locations) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdSetSampleLocationsEXT = (PFN_vkCmdSetSampleLocationsEXT)vkGetInstanceProcAddr(instance, "vkCmdSetSampleLocationsEXT");
		pfn_vkGetPhysicalDeviceMultisamplePropertiesEXT = (PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceMultisamplePropertiesEXT");
#endif
#if defined(VK_KHR_get_surface_capabilities2) && (defined(VK_KHR_surface))
		pfn_vkGetPhysicalDeviceSurfaceCapabilities2KHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceCapabilities2KHR");
		pfn_vkGetPhysicalDeviceSurfaceFormats2KHR = (PFN_vkGetPhysicalDeviceSurfaceFormats2KHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfaceFormats2KHR");
#endif
#if defined(VK_KHR_get_display_properties2) && (defined(VK_KHR_display))
		pfn_vkGetPhysicalDeviceDisplayProperties2KHR = (PFN_vkGetPhysicalDeviceDisplayProperties2KHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceDisplayProperties2KHR");
		pfn_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = (PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
		pfn_vkGetDisplayModeProperties2KHR = (PFN_vkGetDisplayModeProperties2KHR)vkGetInstanceProcAddr(instance, "vkGetDisplayModeProperties2KHR");
		pfn_vkGetDisplayPlaneCapabilities2KHR = (PFN_vkGetDisplayPlaneCapabilities2KHR)vkGetInstanceProcAddr(instance, "vkGetDisplayPlaneCapabilities2KHR");
#endif
#if defined(VK_ANDROID_native_buffer)
		pfn_vkQueueSignalReleaseImageANDROID = (PFN_vkQueueSignalReleaseImageANDROID)vkGetInstanceProcAddr(instance, "vkQueueSignalReleaseImageANDROID");
#endif
#if defined(VK_KHR_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = (PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceCalibrateableTimeDomainsKHR");
#endif
#if defined(VK_EXT_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = (PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
#endif
#if defined(VK_EXT_debug_utils)
		pfn_vkQueueBeginDebugUtilsLabelEXT = (PFN_vkQueueBeginDebugUtilsLabelEXT)vkGetInstanceProcAddr(instance, "vkQueueBeginDebugUtilsLabelEXT");
		pfn_vkQueueEndDebugUtilsLabelEXT = (PFN_vkQueueEndDebugUtilsLabelEXT)vkGetInstanceProcAddr(instance, "vkQueueEndDebugUtilsLabelEXT");
		pfn_vkQueueInsertDebugUtilsLabelEXT = (PFN_vkQueueInsertDebugUtilsLabelEXT)vkGetInstanceProcAddr(instance, "vkQueueInsertDebugUtilsLabelEXT");
		pfn_vkCmdBeginDebugUtilsLabelEXT = (PFN_vkCmdBeginDebugUtilsLabelEXT)vkGetInstanceProcAddr(instance, "vkCmdBeginDebugUtilsLabelEXT");
		pfn_vkCmdEndDebugUtilsLabelEXT = (PFN_vkCmdEndDebugUtilsLabelEXT)vkGetInstanceProcAddr(instance, "vkCmdEndDebugUtilsLabelEXT");
		pfn_vkCmdInsertDebugUtilsLabelEXT = (PFN_vkCmdInsertDebugUtilsLabelEXT)vkGetInstanceProcAddr(instance, "vkCmdInsertDebugUtilsLabelEXT");
		pfn_vkCreateDebugUtilsMessengerEXT = (PFN_vkCreateDebugUtilsMessengerEXT)vkGetInstanceProcAddr(instance, "vkCreateDebugUtilsMessengerEXT");
		pfn_vkDestroyDebugUtilsMessengerEXT = (PFN_vkDestroyDebugUtilsMessengerEXT)vkGetInstanceProcAddr(instance, "vkDestroyDebugUtilsMessengerEXT");
		pfn_vkSubmitDebugUtilsMessageEXT = (PFN_vkSubmitDebugUtilsMessageEXT)vkGetInstanceProcAddr(instance, "vkSubmitDebugUtilsMessageEXT");
#endif
#if defined(VK_AMD_buffer_marker)
		pfn_vkCmdWriteBufferMarkerAMD = (PFN_vkCmdWriteBufferMarkerAMD)vkGetInstanceProcAddr(instance, "vkCmdWriteBufferMarkerAMD");
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkCmdBeginRenderPass2 = (PFN_vkCmdBeginRenderPass2)vkGetInstanceProcAddr(instance, "vkCmdBeginRenderPass2");
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
		pfn_vkCmdBeginRenderPass2KHR = (PFN_vkCmdBeginRenderPass2KHR)vkGetInstanceProcAddr(instance, "vkCmdBeginRenderPass2KHR");
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkCmdNextSubpass2 = (PFN_vkCmdNextSubpass2)vkGetInstanceProcAddr(instance, "vkCmdNextSubpass2");
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
		pfn_vkCmdNextSubpass2KHR = (PFN_vkCmdNextSubpass2KHR)vkGetInstanceProcAddr(instance, "vkCmdNextSubpass2KHR");
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkCmdEndRenderPass2 = (PFN_vkCmdEndRenderPass2)vkGetInstanceProcAddr(instance, "vkCmdEndRenderPass2");
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
		pfn_vkCmdEndRenderPass2KHR = (PFN_vkCmdEndRenderPass2KHR)vkGetInstanceProcAddr(instance, "vkCmdEndRenderPass2KHR");
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkCmdDrawIndirectCount = (PFN_vkCmdDrawIndirectCount)vkGetInstanceProcAddr(instance, "vkCmdDrawIndirectCount");
#endif
#if defined(VK_KHR_draw_indirect_count)
		pfn_vkCmdDrawIndirectCountKHR = (PFN_vkCmdDrawIndirectCountKHR)vkGetInstanceProcAddr(instance, "vkCmdDrawIndirectCountKHR");
#endif
#if defined(VK_AMD_draw_indirect_count)
		pfn_vkCmdDrawIndirectCountAMD = (PFN_vkCmdDrawIndirectCountAMD)vkGetInstanceProcAddr(instance, "vkCmdDrawIndirectCountAMD");
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkCmdDrawIndexedIndirectCount = (PFN_vkCmdDrawIndexedIndirectCount)vkGetInstanceProcAddr(instance, "vkCmdDrawIndexedIndirectCount");
#endif
#if defined(VK_KHR_draw_indirect_count)
		pfn_vkCmdDrawIndexedIndirectCountKHR = (PFN_vkCmdDrawIndexedIndirectCountKHR)vkGetInstanceProcAddr(instance, "vkCmdDrawIndexedIndirectCountKHR");
#endif
#if defined(VK_AMD_draw_indirect_count)
		pfn_vkCmdDrawIndexedIndirectCountAMD = (PFN_vkCmdDrawIndexedIndirectCountAMD)vkGetInstanceProcAddr(instance, "vkCmdDrawIndexedIndirectCountAMD");
#endif
#if defined(VK_NV_device_diagnostic_checkpoints) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdSetCheckpointNV = (PFN_vkCmdSetCheckpointNV)vkGetInstanceProcAddr(instance, "vkCmdSetCheckpointNV");
		pfn_vkGetQueueCheckpointDataNV = (PFN_vkGetQueueCheckpointDataNV)vkGetInstanceProcAddr(instance, "vkGetQueueCheckpointDataNV");
#endif
#if defined(VK_EXT_transform_feedback) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdBindTransformFeedbackBuffersEXT = (PFN_vkCmdBindTransformFeedbackBuffersEXT)vkGetInstanceProcAddr(instance, "vkCmdBindTransformFeedbackBuffersEXT");
		pfn_vkCmdBeginTransformFeedbackEXT = (PFN_vkCmdBeginTransformFeedbackEXT)vkGetInstanceProcAddr(instance, "vkCmdBeginTransformFeedbackEXT");
		pfn_vkCmdEndTransformFeedbackEXT = (PFN_vkCmdEndTransformFeedbackEXT)vkGetInstanceProcAddr(instance, "vkCmdEndTransformFeedbackEXT");
		pfn_vkCmdBeginQueryIndexedEXT = (PFN_vkCmdBeginQueryIndexedEXT)vkGetInstanceProcAddr(instance, "vkCmdBeginQueryIndexedEXT");
		pfn_vkCmdEndQueryIndexedEXT = (PFN_vkCmdEndQueryIndexedEXT)vkGetInstanceProcAddr(instance, "vkCmdEndQueryIndexedEXT");
		pfn_vkCmdDrawIndirectByteCountEXT = (PFN_vkCmdDrawIndirectByteCountEXT)vkGetInstanceProcAddr(instance, "vkCmdDrawIndirectByteCountEXT");
#endif
#if defined(VK_NV_scissor_exclusive) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdSetExclusiveScissorNV = (PFN_vkCmdSetExclusiveScissorNV)vkGetInstanceProcAddr(instance, "vkCmdSetExclusiveScissorNV");
		pfn_vkCmdSetExclusiveScissorEnableNV = (PFN_vkCmdSetExclusiveScissorEnableNV)vkGetInstanceProcAddr(instance, "vkCmdSetExclusiveScissorEnableNV");
#endif
#if defined(VK_NV_shading_rate_image) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdBindShadingRateImageNV = (PFN_vkCmdBindShadingRateImageNV)vkGetInstanceProcAddr(instance, "vkCmdBindShadingRateImageNV");
		pfn_vkCmdSetViewportShadingRatePaletteNV = (PFN_vkCmdSetViewportShadingRatePaletteNV)vkGetInstanceProcAddr(instance, "vkCmdSetViewportShadingRatePaletteNV");
		pfn_vkCmdSetCoarseSampleOrderNV = (PFN_vkCmdSetCoarseSampleOrderNV)vkGetInstanceProcAddr(instance, "vkCmdSetCoarseSampleOrderNV");
#endif
#if defined(VK_NV_mesh_shader) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdDrawMeshTasksNV = (PFN_vkCmdDrawMeshTasksNV)vkGetInstanceProcAddr(instance, "vkCmdDrawMeshTasksNV");
		pfn_vkCmdDrawMeshTasksIndirectNV = (PFN_vkCmdDrawMeshTasksIndirectNV)vkGetInstanceProcAddr(instance, "vkCmdDrawMeshTasksIndirectNV");
		pfn_vkCmdDrawMeshTasksIndirectCountNV = (PFN_vkCmdDrawMeshTasksIndirectCountNV)vkGetInstanceProcAddr(instance, "vkCmdDrawMeshTasksIndirectCountNV");
#endif
#if defined(VK_EXT_mesh_shader) && (defined(VK_KHR_spirv_1_4))
		pfn_vkCmdDrawMeshTasksEXT = (PFN_vkCmdDrawMeshTasksEXT)vkGetInstanceProcAddr(instance, "vkCmdDrawMeshTasksEXT");
		pfn_vkCmdDrawMeshTasksIndirectEXT = (PFN_vkCmdDrawMeshTasksIndirectEXT)vkGetInstanceProcAddr(instance, "vkCmdDrawMeshTasksIndirectEXT");
		pfn_vkCmdDrawMeshTasksIndirectCountEXT = (PFN_vkCmdDrawMeshTasksIndirectCountEXT)vkGetInstanceProcAddr(instance, "vkCmdDrawMeshTasksIndirectCountEXT");
#endif
#if defined(VK_HUAWEI_invocation_mask) && (defined(VK_KHR_ray_tracing_pipeline) && defined(VK_KHR_synchronization2))
		pfn_vkCmdBindInvocationMaskHUAWEI = (PFN_vkCmdBindInvocationMaskHUAWEI)vkGetInstanceProcAddr(instance, "vkCmdBindInvocationMaskHUAWEI");
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		pfn_vkCmdCopyAccelerationStructureNV = (PFN_vkCmdCopyAccelerationStructureNV)vkGetInstanceProcAddr(instance, "vkCmdCopyAccelerationStructureNV");
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		pfn_vkCmdCopyAccelerationStructureKHR = (PFN_vkCmdCopyAccelerationStructureKHR)vkGetInstanceProcAddr(instance, "vkCmdCopyAccelerationStructureKHR");
		pfn_vkCmdCopyAccelerationStructureToMemoryKHR = (PFN_vkCmdCopyAccelerationStructureToMemoryKHR)vkGetInstanceProcAddr(instance, "vkCmdCopyAccelerationStructureToMemoryKHR");
		pfn_vkCmdCopyMemoryToAccelerationStructureKHR = (PFN_vkCmdCopyMemoryToAccelerationStructureKHR)vkGetInstanceProcAddr(instance, "vkCmdCopyMemoryToAccelerationStructureKHR");
		pfn_vkCmdWriteAccelerationStructuresPropertiesKHR = (PFN_vkCmdWriteAccelerationStructuresPropertiesKHR)vkGetInstanceProcAddr(instance, "vkCmdWriteAccelerationStructuresPropertiesKHR");
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		pfn_vkCmdWriteAccelerationStructuresPropertiesNV = (PFN_vkCmdWriteAccelerationStructuresPropertiesNV)vkGetInstanceProcAddr(instance, "vkCmdWriteAccelerationStructuresPropertiesNV");
		pfn_vkCmdBuildAccelerationStructureNV = (PFN_vkCmdBuildAccelerationStructureNV)vkGetInstanceProcAddr(instance, "vkCmdBuildAccelerationStructureNV");
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		pfn_vkCmdTraceRaysKHR = (PFN_vkCmdTraceRaysKHR)vkGetInstanceProcAddr(instance, "vkCmdTraceRaysKHR");
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		pfn_vkCmdTraceRaysNV = (PFN_vkCmdTraceRaysNV)vkGetInstanceProcAddr(instance, "vkCmdTraceRaysNV");
#endif
#if defined(VK_NV_cooperative_matrix) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = (PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		pfn_vkCmdTraceRaysIndirectKHR = (PFN_vkCmdTraceRaysIndirectKHR)vkGetInstanceProcAddr(instance, "vkCmdTraceRaysIndirectKHR");
#endif
#if (defined(VK_KHR_ray_tracing_maintenance1) && (defined(VK_KHR_acceleration_structure))) && (defined(VK_KHR_ray_tracing_pipeline))
		pfn_vkCmdTraceRaysIndirect2KHR = (PFN_vkCmdTraceRaysIndirect2KHR)vkGetInstanceProcAddr(instance, "vkCmdTraceRaysIndirect2KHR");
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		pfn_vkCmdSetRayTracingPipelineStackSizeKHR = (PFN_vkCmdSetRayTracingPipelineStackSizeKHR)vkGetInstanceProcAddr(instance, "vkCmdSetRayTracingPipelineStackSizeKHR");
#endif
#if defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
		pfn_vkGetPhysicalDeviceSurfacePresentModes2EXT = (PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSurfacePresentModes2EXT");
#endif
#if defined(VK_KHR_performance_query) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = (PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR)vkGetInstanceProcAddr(instance, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
		pfn_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = (PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
#endif
#if defined(VK_EXT_headless_surface) && (defined(VK_KHR_surface))
		pfn_vkCreateHeadlessSurfaceEXT = (PFN_vkCreateHeadlessSurfaceEXT)vkGetInstanceProcAddr(instance, "vkCreateHeadlessSurfaceEXT");
#endif
#if defined(VK_NV_coverage_reduction_mode) && (defined(VK_NV_framebuffer_mixed_samples) && defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = (PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
#endif
#if defined(VK_INTEL_performance_query)
		pfn_vkCmdSetPerformanceMarkerINTEL = (PFN_vkCmdSetPerformanceMarkerINTEL)vkGetInstanceProcAddr(instance, "vkCmdSetPerformanceMarkerINTEL");
		pfn_vkCmdSetPerformanceStreamMarkerINTEL = (PFN_vkCmdSetPerformanceStreamMarkerINTEL)vkGetInstanceProcAddr(instance, "vkCmdSetPerformanceStreamMarkerINTEL");
		pfn_vkCmdSetPerformanceOverrideINTEL = (PFN_vkCmdSetPerformanceOverrideINTEL)vkGetInstanceProcAddr(instance, "vkCmdSetPerformanceOverrideINTEL");
		pfn_vkQueueSetPerformanceConfigurationINTEL = (PFN_vkQueueSetPerformanceConfigurationINTEL)vkGetInstanceProcAddr(instance, "vkQueueSetPerformanceConfigurationINTEL");
#endif
#if defined(VK_KHR_line_rasterization) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdSetLineStippleKHR = (PFN_vkCmdSetLineStippleKHR)vkGetInstanceProcAddr(instance, "vkCmdSetLineStippleKHR");
#endif
#if defined(VK_EXT_line_rasterization) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdSetLineStippleEXT = (PFN_vkCmdSetLineStippleEXT)vkGetInstanceProcAddr(instance, "vkCmdSetLineStippleEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkGetPhysicalDeviceToolProperties = (PFN_vkGetPhysicalDeviceToolProperties)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceToolProperties");
#endif
#if defined(VK_EXT_tooling_info)
		pfn_vkGetPhysicalDeviceToolPropertiesEXT = (PFN_vkGetPhysicalDeviceToolPropertiesEXT)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceToolPropertiesEXT");
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		pfn_vkCmdBuildAccelerationStructuresKHR = (PFN_vkCmdBuildAccelerationStructuresKHR)vkGetInstanceProcAddr(instance, "vkCmdBuildAccelerationStructuresKHR");
		pfn_vkCmdBuildAccelerationStructuresIndirectKHR = (PFN_vkCmdBuildAccelerationStructuresIndirectKHR)vkGetInstanceProcAddr(instance, "vkCmdBuildAccelerationStructuresIndirectKHR");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetCullMode = (PFN_vkCmdSetCullMode)vkGetInstanceProcAddr(instance, "vkCmdSetCullMode");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetCullModeEXT = (PFN_vkCmdSetCullModeEXT)vkGetInstanceProcAddr(instance, "vkCmdSetCullModeEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetFrontFace = (PFN_vkCmdSetFrontFace)vkGetInstanceProcAddr(instance, "vkCmdSetFrontFace");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetFrontFaceEXT = (PFN_vkCmdSetFrontFaceEXT)vkGetInstanceProcAddr(instance, "vkCmdSetFrontFaceEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetPrimitiveTopology = (PFN_vkCmdSetPrimitiveTopology)vkGetInstanceProcAddr(instance, "vkCmdSetPrimitiveTopology");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetPrimitiveTopologyEXT = (PFN_vkCmdSetPrimitiveTopologyEXT)vkGetInstanceProcAddr(instance, "vkCmdSetPrimitiveTopologyEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetViewportWithCount = (PFN_vkCmdSetViewportWithCount)vkGetInstanceProcAddr(instance, "vkCmdSetViewportWithCount");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetViewportWithCountEXT = (PFN_vkCmdSetViewportWithCountEXT)vkGetInstanceProcAddr(instance, "vkCmdSetViewportWithCountEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetScissorWithCount = (PFN_vkCmdSetScissorWithCount)vkGetInstanceProcAddr(instance, "vkCmdSetScissorWithCount");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetScissorWithCountEXT = (PFN_vkCmdSetScissorWithCountEXT)vkGetInstanceProcAddr(instance, "vkCmdSetScissorWithCountEXT");
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
		pfn_vkCmdBindIndexBuffer2KHR = (PFN_vkCmdBindIndexBuffer2KHR)vkGetInstanceProcAddr(instance, "vkCmdBindIndexBuffer2KHR");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdBindVertexBuffers2 = (PFN_vkCmdBindVertexBuffers2)vkGetInstanceProcAddr(instance, "vkCmdBindVertexBuffers2");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdBindVertexBuffers2EXT = (PFN_vkCmdBindVertexBuffers2EXT)vkGetInstanceProcAddr(instance, "vkCmdBindVertexBuffers2EXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetDepthTestEnable = (PFN_vkCmdSetDepthTestEnable)vkGetInstanceProcAddr(instance, "vkCmdSetDepthTestEnable");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetDepthTestEnableEXT = (PFN_vkCmdSetDepthTestEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetDepthTestEnableEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetDepthWriteEnable = (PFN_vkCmdSetDepthWriteEnable)vkGetInstanceProcAddr(instance, "vkCmdSetDepthWriteEnable");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetDepthWriteEnableEXT = (PFN_vkCmdSetDepthWriteEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetDepthWriteEnableEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetDepthCompareOp = (PFN_vkCmdSetDepthCompareOp)vkGetInstanceProcAddr(instance, "vkCmdSetDepthCompareOp");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetDepthCompareOpEXT = (PFN_vkCmdSetDepthCompareOpEXT)vkGetInstanceProcAddr(instance, "vkCmdSetDepthCompareOpEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetDepthBoundsTestEnable = (PFN_vkCmdSetDepthBoundsTestEnable)vkGetInstanceProcAddr(instance, "vkCmdSetDepthBoundsTestEnable");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetDepthBoundsTestEnableEXT = (PFN_vkCmdSetDepthBoundsTestEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetDepthBoundsTestEnableEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetStencilTestEnable = (PFN_vkCmdSetStencilTestEnable)vkGetInstanceProcAddr(instance, "vkCmdSetStencilTestEnable");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetStencilTestEnableEXT = (PFN_vkCmdSetStencilTestEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetStencilTestEnableEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetStencilOp = (PFN_vkCmdSetStencilOp)vkGetInstanceProcAddr(instance, "vkCmdSetStencilOp");
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetStencilOpEXT = (PFN_vkCmdSetStencilOpEXT)vkGetInstanceProcAddr(instance, "vkCmdSetStencilOpEXT");
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetPatchControlPointsEXT = (PFN_vkCmdSetPatchControlPointsEXT)vkGetInstanceProcAddr(instance, "vkCmdSetPatchControlPointsEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetRasterizerDiscardEnable = (PFN_vkCmdSetRasterizerDiscardEnable)vkGetInstanceProcAddr(instance, "vkCmdSetRasterizerDiscardEnable");
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetRasterizerDiscardEnableEXT = (PFN_vkCmdSetRasterizerDiscardEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetRasterizerDiscardEnableEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetDepthBiasEnable = (PFN_vkCmdSetDepthBiasEnable)vkGetInstanceProcAddr(instance, "vkCmdSetDepthBiasEnable");
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetDepthBiasEnableEXT = (PFN_vkCmdSetDepthBiasEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetDepthBiasEnableEXT");
		pfn_vkCmdSetLogicOpEXT = (PFN_vkCmdSetLogicOpEXT)vkGetInstanceProcAddr(instance, "vkCmdSetLogicOpEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetPrimitiveRestartEnable = (PFN_vkCmdSetPrimitiveRestartEnable)vkGetInstanceProcAddr(instance, "vkCmdSetPrimitiveRestartEnable");
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetPrimitiveRestartEnableEXT = (PFN_vkCmdSetPrimitiveRestartEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetPrimitiveRestartEnableEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_KHR_maintenance2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetTessellationDomainOriginEXT = (PFN_vkCmdSetTessellationDomainOriginEXT)vkGetInstanceProcAddr(instance, "vkCmdSetTessellationDomainOriginEXT");
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetDepthClampEnableEXT = (PFN_vkCmdSetDepthClampEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetDepthClampEnableEXT");
		pfn_vkCmdSetPolygonModeEXT = (PFN_vkCmdSetPolygonModeEXT)vkGetInstanceProcAddr(instance, "vkCmdSetPolygonModeEXT");
		pfn_vkCmdSetRasterizationSamplesEXT = (PFN_vkCmdSetRasterizationSamplesEXT)vkGetInstanceProcAddr(instance, "vkCmdSetRasterizationSamplesEXT");
		pfn_vkCmdSetSampleMaskEXT = (PFN_vkCmdSetSampleMaskEXT)vkGetInstanceProcAddr(instance, "vkCmdSetSampleMaskEXT");
		pfn_vkCmdSetAlphaToCoverageEnableEXT = (PFN_vkCmdSetAlphaToCoverageEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetAlphaToCoverageEnableEXT");
		pfn_vkCmdSetAlphaToOneEnableEXT = (PFN_vkCmdSetAlphaToOneEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetAlphaToOneEnableEXT");
		pfn_vkCmdSetLogicOpEnableEXT = (PFN_vkCmdSetLogicOpEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetLogicOpEnableEXT");
		pfn_vkCmdSetColorBlendEnableEXT = (PFN_vkCmdSetColorBlendEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetColorBlendEnableEXT");
		pfn_vkCmdSetColorBlendEquationEXT = (PFN_vkCmdSetColorBlendEquationEXT)vkGetInstanceProcAddr(instance, "vkCmdSetColorBlendEquationEXT");
		pfn_vkCmdSetColorWriteMaskEXT = (PFN_vkCmdSetColorWriteMaskEXT)vkGetInstanceProcAddr(instance, "vkCmdSetColorWriteMaskEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_transform_feedback))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_transform_feedback)))
		pfn_vkCmdSetRasterizationStreamEXT = (PFN_vkCmdSetRasterizationStreamEXT)vkGetInstanceProcAddr(instance, "vkCmdSetRasterizationStreamEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_conservative_rasterization))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_conservative_rasterization)))
		pfn_vkCmdSetConservativeRasterizationModeEXT = (PFN_vkCmdSetConservativeRasterizationModeEXT)vkGetInstanceProcAddr(instance, "vkCmdSetConservativeRasterizationModeEXT");
		pfn_vkCmdSetExtraPrimitiveOverestimationSizeEXT = (PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT)vkGetInstanceProcAddr(instance, "vkCmdSetExtraPrimitiveOverestimationSizeEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_depth_clip_enable))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_depth_clip_enable)))
		pfn_vkCmdSetDepthClipEnableEXT = (PFN_vkCmdSetDepthClipEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetDepthClipEnableEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_sample_locations))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_sample_locations)))
		pfn_vkCmdSetSampleLocationsEnableEXT = (PFN_vkCmdSetSampleLocationsEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetSampleLocationsEnableEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_blend_operation_advanced))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_blend_operation_advanced)))
		pfn_vkCmdSetColorBlendAdvancedEXT = (PFN_vkCmdSetColorBlendAdvancedEXT)vkGetInstanceProcAddr(instance, "vkCmdSetColorBlendAdvancedEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_provoking_vertex))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_provoking_vertex)))
		pfn_vkCmdSetProvokingVertexModeEXT = (PFN_vkCmdSetProvokingVertexModeEXT)vkGetInstanceProcAddr(instance, "vkCmdSetProvokingVertexModeEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_line_rasterization))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_line_rasterization)))
		pfn_vkCmdSetLineRasterizationModeEXT = (PFN_vkCmdSetLineRasterizationModeEXT)vkGetInstanceProcAddr(instance, "vkCmdSetLineRasterizationModeEXT");
		pfn_vkCmdSetLineStippleEnableEXT = (PFN_vkCmdSetLineStippleEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetLineStippleEnableEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_depth_clip_control))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_depth_clip_control)))
		pfn_vkCmdSetDepthClipNegativeOneToOneEXT = (PFN_vkCmdSetDepthClipNegativeOneToOneEXT)vkGetInstanceProcAddr(instance, "vkCmdSetDepthClipNegativeOneToOneEXT");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_clip_space_w_scaling))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_clip_space_w_scaling)))
		pfn_vkCmdSetViewportWScalingEnableNV = (PFN_vkCmdSetViewportWScalingEnableNV)vkGetInstanceProcAddr(instance, "vkCmdSetViewportWScalingEnableNV");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_viewport_swizzle))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_viewport_swizzle)))
		pfn_vkCmdSetViewportSwizzleNV = (PFN_vkCmdSetViewportSwizzleNV)vkGetInstanceProcAddr(instance, "vkCmdSetViewportSwizzleNV");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_fragment_coverage_to_color))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_fragment_coverage_to_color)))
		pfn_vkCmdSetCoverageToColorEnableNV = (PFN_vkCmdSetCoverageToColorEnableNV)vkGetInstanceProcAddr(instance, "vkCmdSetCoverageToColorEnableNV");
		pfn_vkCmdSetCoverageToColorLocationNV = (PFN_vkCmdSetCoverageToColorLocationNV)vkGetInstanceProcAddr(instance, "vkCmdSetCoverageToColorLocationNV");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_framebuffer_mixed_samples))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_framebuffer_mixed_samples)))
		pfn_vkCmdSetCoverageModulationModeNV = (PFN_vkCmdSetCoverageModulationModeNV)vkGetInstanceProcAddr(instance, "vkCmdSetCoverageModulationModeNV");
		pfn_vkCmdSetCoverageModulationTableEnableNV = (PFN_vkCmdSetCoverageModulationTableEnableNV)vkGetInstanceProcAddr(instance, "vkCmdSetCoverageModulationTableEnableNV");
		pfn_vkCmdSetCoverageModulationTableNV = (PFN_vkCmdSetCoverageModulationTableNV)vkGetInstanceProcAddr(instance, "vkCmdSetCoverageModulationTableNV");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_shading_rate_image))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_shading_rate_image)))
		pfn_vkCmdSetShadingRateImageEnableNV = (PFN_vkCmdSetShadingRateImageEnableNV)vkGetInstanceProcAddr(instance, "vkCmdSetShadingRateImageEnableNV");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_coverage_reduction_mode))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_coverage_reduction_mode)))
		pfn_vkCmdSetCoverageReductionModeNV = (PFN_vkCmdSetCoverageReductionModeNV)vkGetInstanceProcAddr(instance, "vkCmdSetCoverageReductionModeNV");
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_representative_fragment_test))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_representative_fragment_test)))
		pfn_vkCmdSetRepresentativeFragmentTestEnableNV = (PFN_vkCmdSetRepresentativeFragmentTestEnableNV)vkGetInstanceProcAddr(instance, "vkCmdSetRepresentativeFragmentTestEnableNV");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdCopyBuffer2 = (PFN_vkCmdCopyBuffer2)vkGetInstanceProcAddr(instance, "vkCmdCopyBuffer2");
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdCopyBuffer2KHR = (PFN_vkCmdCopyBuffer2KHR)vkGetInstanceProcAddr(instance, "vkCmdCopyBuffer2KHR");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdCopyImage2 = (PFN_vkCmdCopyImage2)vkGetInstanceProcAddr(instance, "vkCmdCopyImage2");
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdCopyImage2KHR = (PFN_vkCmdCopyImage2KHR)vkGetInstanceProcAddr(instance, "vkCmdCopyImage2KHR");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdBlitImage2 = (PFN_vkCmdBlitImage2)vkGetInstanceProcAddr(instance, "vkCmdBlitImage2");
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdBlitImage2KHR = (PFN_vkCmdBlitImage2KHR)vkGetInstanceProcAddr(instance, "vkCmdBlitImage2KHR");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdCopyBufferToImage2 = (PFN_vkCmdCopyBufferToImage2)vkGetInstanceProcAddr(instance, "vkCmdCopyBufferToImage2");
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdCopyBufferToImage2KHR = (PFN_vkCmdCopyBufferToImage2KHR)vkGetInstanceProcAddr(instance, "vkCmdCopyBufferToImage2KHR");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdCopyImageToBuffer2 = (PFN_vkCmdCopyImageToBuffer2)vkGetInstanceProcAddr(instance, "vkCmdCopyImageToBuffer2");
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdCopyImageToBuffer2KHR = (PFN_vkCmdCopyImageToBuffer2KHR)vkGetInstanceProcAddr(instance, "vkCmdCopyImageToBuffer2KHR");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdResolveImage2 = (PFN_vkCmdResolveImage2)vkGetInstanceProcAddr(instance, "vkCmdResolveImage2");
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdResolveImage2KHR = (PFN_vkCmdResolveImage2KHR)vkGetInstanceProcAddr(instance, "vkCmdResolveImage2KHR");
#endif
#if defined(VK_KHR_object_refresh)
		pfn_vkCmdRefreshObjectsKHR = (PFN_vkCmdRefreshObjectsKHR)vkGetInstanceProcAddr(instance, "vkCmdRefreshObjectsKHR");
		pfn_vkGetPhysicalDeviceRefreshableObjectTypesKHR = (PFN_vkGetPhysicalDeviceRefreshableObjectTypesKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceRefreshableObjectTypesKHR");
#endif
#if defined(VK_KHR_fragment_shading_rate) && ((defined(VK_KHR_create_renderpass2) || defined(VK_VERSION_1_2)) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)))
		pfn_vkCmdSetFragmentShadingRateKHR = (PFN_vkCmdSetFragmentShadingRateKHR)vkGetInstanceProcAddr(instance, "vkCmdSetFragmentShadingRateKHR");
		pfn_vkGetPhysicalDeviceFragmentShadingRatesKHR = (PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceFragmentShadingRatesKHR");
#endif
#if defined(VK_NV_fragment_shading_rate_enums) && (defined(VK_KHR_fragment_shading_rate))
		pfn_vkCmdSetFragmentShadingRateEnumNV = (PFN_vkCmdSetFragmentShadingRateEnumNV)vkGetInstanceProcAddr(instance, "vkCmdSetFragmentShadingRateEnumNV");
#endif
#if (defined(VK_EXT_vertex_input_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
		pfn_vkCmdSetVertexInputEXT = (PFN_vkCmdSetVertexInputEXT)vkGetInstanceProcAddr(instance, "vkCmdSetVertexInputEXT");
#endif
#if defined(VK_EXT_color_write_enable) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdSetColorWriteEnableEXT = (PFN_vkCmdSetColorWriteEnableEXT)vkGetInstanceProcAddr(instance, "vkCmdSetColorWriteEnableEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdSetEvent2 = (PFN_vkCmdSetEvent2)vkGetInstanceProcAddr(instance, "vkCmdSetEvent2");
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdSetEvent2KHR = (PFN_vkCmdSetEvent2KHR)vkGetInstanceProcAddr(instance, "vkCmdSetEvent2KHR");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdResetEvent2 = (PFN_vkCmdResetEvent2)vkGetInstanceProcAddr(instance, "vkCmdResetEvent2");
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdResetEvent2KHR = (PFN_vkCmdResetEvent2KHR)vkGetInstanceProcAddr(instance, "vkCmdResetEvent2KHR");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdWaitEvents2 = (PFN_vkCmdWaitEvents2)vkGetInstanceProcAddr(instance, "vkCmdWaitEvents2");
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdWaitEvents2KHR = (PFN_vkCmdWaitEvents2KHR)vkGetInstanceProcAddr(instance, "vkCmdWaitEvents2KHR");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdPipelineBarrier2 = (PFN_vkCmdPipelineBarrier2)vkGetInstanceProcAddr(instance, "vkCmdPipelineBarrier2");
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdPipelineBarrier2KHR = (PFN_vkCmdPipelineBarrier2KHR)vkGetInstanceProcAddr(instance, "vkCmdPipelineBarrier2KHR");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkQueueSubmit2 = (PFN_vkQueueSubmit2)vkGetInstanceProcAddr(instance, "vkQueueSubmit2");
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkQueueSubmit2KHR = (PFN_vkQueueSubmit2KHR)vkGetInstanceProcAddr(instance, "vkQueueSubmit2KHR");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdWriteTimestamp2 = (PFN_vkCmdWriteTimestamp2)vkGetInstanceProcAddr(instance, "vkCmdWriteTimestamp2");
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkCmdWriteTimestamp2KHR = (PFN_vkCmdWriteTimestamp2KHR)vkGetInstanceProcAddr(instance, "vkCmdWriteTimestamp2KHR");
#endif
#if (defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) && (defined(VK_AMD_buffer_marker))
		pfn_vkCmdWriteBufferMarker2AMD = (PFN_vkCmdWriteBufferMarker2AMD)vkGetInstanceProcAddr(instance, "vkCmdWriteBufferMarker2AMD");
#endif
#if (defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) && (defined(VK_NV_device_diagnostic_checkpoints))
		pfn_vkGetQueueCheckpointData2NV = (PFN_vkGetQueueCheckpointData2NV)vkGetInstanceProcAddr(instance, "vkGetQueueCheckpointData2NV");
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
		pfn_vkGetPhysicalDeviceVideoCapabilitiesKHR = (PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceVideoCapabilitiesKHR");
		pfn_vkGetPhysicalDeviceVideoFormatPropertiesKHR = (PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceVideoFormatPropertiesKHR");
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
		pfn_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = (PFN_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR");
#endif
#if defined(VK_KHR_video_decode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
		pfn_vkCmdDecodeVideoKHR = (PFN_vkCmdDecodeVideoKHR)vkGetInstanceProcAddr(instance, "vkCmdDecodeVideoKHR");
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
		pfn_vkCmdBeginVideoCodingKHR = (PFN_vkCmdBeginVideoCodingKHR)vkGetInstanceProcAddr(instance, "vkCmdBeginVideoCodingKHR");
		pfn_vkCmdControlVideoCodingKHR = (PFN_vkCmdControlVideoCodingKHR)vkGetInstanceProcAddr(instance, "vkCmdControlVideoCodingKHR");
		pfn_vkCmdEndVideoCodingKHR = (PFN_vkCmdEndVideoCodingKHR)vkGetInstanceProcAddr(instance, "vkCmdEndVideoCodingKHR");
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
		pfn_vkCmdEncodeVideoKHR = (PFN_vkCmdEncodeVideoKHR)vkGetInstanceProcAddr(instance, "vkCmdEncodeVideoKHR");
#endif
#if defined(VK_NV_memory_decompression) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address))
		pfn_vkCmdDecompressMemoryNV = (PFN_vkCmdDecompressMemoryNV)vkGetInstanceProcAddr(instance, "vkCmdDecompressMemoryNV");
		pfn_vkCmdDecompressMemoryIndirectCountNV = (PFN_vkCmdDecompressMemoryIndirectCountNV)vkGetInstanceProcAddr(instance, "vkCmdDecompressMemoryIndirectCountNV");
#endif
#if defined(VK_NVX_binary_import)
		pfn_vkCmdCuLaunchKernelNVX = (PFN_vkCmdCuLaunchKernelNVX)vkGetInstanceProcAddr(instance, "vkCmdCuLaunchKernelNVX");
#endif
#if defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_synchronization2) && defined(VK_EXT_descriptor_indexing))
		pfn_vkCmdBindDescriptorBuffersEXT = (PFN_vkCmdBindDescriptorBuffersEXT)vkGetInstanceProcAddr(instance, "vkCmdBindDescriptorBuffersEXT");
		pfn_vkCmdSetDescriptorBufferOffsetsEXT = (PFN_vkCmdSetDescriptorBufferOffsetsEXT)vkGetInstanceProcAddr(instance, "vkCmdSetDescriptorBufferOffsetsEXT");
		pfn_vkCmdBindDescriptorBufferEmbeddedSamplersEXT = (PFN_vkCmdBindDescriptorBufferEmbeddedSamplersEXT)vkGetInstanceProcAddr(instance, "vkCmdBindDescriptorBufferEmbeddedSamplersEXT");
#endif
#if defined(VK_EXT_acquire_drm_display) && (defined(VK_EXT_direct_mode_display))
		pfn_vkAcquireDrmDisplayEXT = (PFN_vkAcquireDrmDisplayEXT)vkGetInstanceProcAddr(instance, "vkAcquireDrmDisplayEXT");
		pfn_vkGetDrmDisplayEXT = (PFN_vkGetDrmDisplayEXT)vkGetInstanceProcAddr(instance, "vkGetDrmDisplayEXT");
#endif
#if defined(VK_NV_cuda_kernel_launch)
		pfn_vkCmdCudaLaunchKernelNV = (PFN_vkCmdCudaLaunchKernelNV)vkGetInstanceProcAddr(instance, "vkCmdCudaLaunchKernelNV");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdBeginRendering = (PFN_vkCmdBeginRendering)vkGetInstanceProcAddr(instance, "vkCmdBeginRendering");
#endif
#if defined(VK_KHR_dynamic_rendering) && (defined(VK_KHR_depth_stencil_resolve) && defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdBeginRenderingKHR = (PFN_vkCmdBeginRenderingKHR)vkGetInstanceProcAddr(instance, "vkCmdBeginRenderingKHR");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCmdEndRendering = (PFN_vkCmdEndRendering)vkGetInstanceProcAddr(instance, "vkCmdEndRendering");
#endif
#if defined(VK_KHR_dynamic_rendering) && (defined(VK_KHR_depth_stencil_resolve) && defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdEndRenderingKHR = (PFN_vkCmdEndRenderingKHR)vkGetInstanceProcAddr(instance, "vkCmdEndRenderingKHR");
#endif
#if defined(VK_EXT_opacity_micromap) && (defined(VK_KHR_acceleration_structure) && defined(VK_KHR_synchronization2))
		pfn_vkCmdBuildMicromapsEXT = (PFN_vkCmdBuildMicromapsEXT)vkGetInstanceProcAddr(instance, "vkCmdBuildMicromapsEXT");
		pfn_vkCmdCopyMicromapEXT = (PFN_vkCmdCopyMicromapEXT)vkGetInstanceProcAddr(instance, "vkCmdCopyMicromapEXT");
		pfn_vkCmdCopyMicromapToMemoryEXT = (PFN_vkCmdCopyMicromapToMemoryEXT)vkGetInstanceProcAddr(instance, "vkCmdCopyMicromapToMemoryEXT");
		pfn_vkCmdCopyMemoryToMicromapEXT = (PFN_vkCmdCopyMemoryToMicromapEXT)vkGetInstanceProcAddr(instance, "vkCmdCopyMemoryToMicromapEXT");
		pfn_vkCmdWriteMicromapsPropertiesEXT = (PFN_vkCmdWriteMicromapsPropertiesEXT)vkGetInstanceProcAddr(instance, "vkCmdWriteMicromapsPropertiesEXT");
#endif
#if defined(VK_NV_optical_flow) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_format_feature_flags2) && defined(VK_KHR_synchronization2))
		pfn_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = (PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceOpticalFlowImageFormatsNV");
		pfn_vkCmdOpticalFlowExecuteNV = (PFN_vkCmdOpticalFlowExecuteNV)vkGetInstanceProcAddr(instance, "vkCmdOpticalFlowExecuteNV");
#endif
#if defined(VK_EXT_depth_bias_control) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCmdSetDepthBias2EXT = (PFN_vkCmdSetDepthBias2EXT)vkGetInstanceProcAddr(instance, "vkCmdSetDepthBias2EXT");
#endif
#if defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))
		pfn_vkCmdBindShadersEXT = (PFN_vkCmdBindShadersEXT)vkGetInstanceProcAddr(instance, "vkCmdBindShadersEXT");
#endif
#if defined(VK_KHR_cooperative_matrix) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = (PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR)vkGetInstanceProcAddr(instance, "vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR");
#endif
#if defined(VK_AMDX_shader_enqueue) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_synchronization2) && defined(VK_KHR_pipeline_library) && defined(VK_KHR_spirv_1_4))
		pfn_vkCmdInitializeGraphScratchMemoryAMDX = (PFN_vkCmdInitializeGraphScratchMemoryAMDX)vkGetInstanceProcAddr(instance, "vkCmdInitializeGraphScratchMemoryAMDX");
		pfn_vkCmdDispatchGraphAMDX = (PFN_vkCmdDispatchGraphAMDX)vkGetInstanceProcAddr(instance, "vkCmdDispatchGraphAMDX");
		pfn_vkCmdDispatchGraphIndirectAMDX = (PFN_vkCmdDispatchGraphIndirectAMDX)vkGetInstanceProcAddr(instance, "vkCmdDispatchGraphIndirectAMDX");
		pfn_vkCmdDispatchGraphIndirectCountAMDX = (PFN_vkCmdDispatchGraphIndirectCountAMDX)vkGetInstanceProcAddr(instance, "vkCmdDispatchGraphIndirectCountAMDX");
#endif
#if defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))
		pfn_vkCmdBindDescriptorSets2KHR = (PFN_vkCmdBindDescriptorSets2KHR)vkGetInstanceProcAddr(instance, "vkCmdBindDescriptorSets2KHR");
		pfn_vkCmdPushConstants2KHR = (PFN_vkCmdPushConstants2KHR)vkGetInstanceProcAddr(instance, "vkCmdPushConstants2KHR");
#endif
#if (defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))) && (defined(VK_KHR_push_descriptor))
		pfn_vkCmdPushDescriptorSet2KHR = (PFN_vkCmdPushDescriptorSet2KHR)vkGetInstanceProcAddr(instance, "vkCmdPushDescriptorSet2KHR");
		pfn_vkCmdPushDescriptorSetWithTemplate2KHR = (PFN_vkCmdPushDescriptorSetWithTemplate2KHR)vkGetInstanceProcAddr(instance, "vkCmdPushDescriptorSetWithTemplate2KHR");
#endif
#if (defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))) && (defined(VK_EXT_descriptor_buffer))
		pfn_vkCmdSetDescriptorBufferOffsets2EXT = (PFN_vkCmdSetDescriptorBufferOffsets2EXT)vkGetInstanceProcAddr(instance, "vkCmdSetDescriptorBufferOffsets2EXT");
		pfn_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = (PFN_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT)vkGetInstanceProcAddr(instance, "vkCmdBindDescriptorBufferEmbeddedSamplers2EXT");
#endif
#if defined(VK_NV_low_latency2) && (defined(VK_VERSION_1_2) || defined(VK_KHR_timeline_semaphore))
		pfn_vkQueueNotifyOutOfBandNV = (PFN_vkQueueNotifyOutOfBandNV)vkGetInstanceProcAddr(instance, "vkQueueNotifyOutOfBandNV");
#endif
#if defined(VK_KHR_dynamic_rendering_local_read) && (defined(VK_KHR_dynamic_rendering))
		pfn_vkCmdSetRenderingAttachmentLocationsKHR = (PFN_vkCmdSetRenderingAttachmentLocationsKHR)vkGetInstanceProcAddr(instance, "vkCmdSetRenderingAttachmentLocationsKHR");
		pfn_vkCmdSetRenderingInputAttachmentIndicesKHR = (PFN_vkCmdSetRenderingInputAttachmentIndicesKHR)vkGetInstanceProcAddr(instance, "vkCmdSetRenderingInputAttachmentIndicesKHR");
#endif
	}
	void VulkanLoader::LoadDeviceFunctions(VkDevice device) {
#if defined(VK_VERSION_1_0)
		pfn_vkGetDeviceProcAddr = (PFN_vkGetDeviceProcAddr)vkGetDeviceProcAddr(device, "vkGetDeviceProcAddr");
		pfn_vkDestroyDevice = (PFN_vkDestroyDevice)vkGetDeviceProcAddr(device, "vkDestroyDevice");
		pfn_vkGetDeviceQueue = (PFN_vkGetDeviceQueue)vkGetDeviceProcAddr(device, "vkGetDeviceQueue");
		pfn_vkDeviceWaitIdle = (PFN_vkDeviceWaitIdle)vkGetDeviceProcAddr(device, "vkDeviceWaitIdle");
		pfn_vkAllocateMemory = (PFN_vkAllocateMemory)vkGetDeviceProcAddr(device, "vkAllocateMemory");
		pfn_vkFreeMemory = (PFN_vkFreeMemory)vkGetDeviceProcAddr(device, "vkFreeMemory");
		pfn_vkMapMemory = (PFN_vkMapMemory)vkGetDeviceProcAddr(device, "vkMapMemory");
		pfn_vkUnmapMemory = (PFN_vkUnmapMemory)vkGetDeviceProcAddr(device, "vkUnmapMemory");
		pfn_vkFlushMappedMemoryRanges = (PFN_vkFlushMappedMemoryRanges)vkGetDeviceProcAddr(device, "vkFlushMappedMemoryRanges");
		pfn_vkInvalidateMappedMemoryRanges = (PFN_vkInvalidateMappedMemoryRanges)vkGetDeviceProcAddr(device, "vkInvalidateMappedMemoryRanges");
		pfn_vkGetDeviceMemoryCommitment = (PFN_vkGetDeviceMemoryCommitment)vkGetDeviceProcAddr(device, "vkGetDeviceMemoryCommitment");
		pfn_vkGetBufferMemoryRequirements = (PFN_vkGetBufferMemoryRequirements)vkGetDeviceProcAddr(device, "vkGetBufferMemoryRequirements");
		pfn_vkBindBufferMemory = (PFN_vkBindBufferMemory)vkGetDeviceProcAddr(device, "vkBindBufferMemory");
		pfn_vkGetImageMemoryRequirements = (PFN_vkGetImageMemoryRequirements)vkGetDeviceProcAddr(device, "vkGetImageMemoryRequirements");
		pfn_vkBindImageMemory = (PFN_vkBindImageMemory)vkGetDeviceProcAddr(device, "vkBindImageMemory");
		pfn_vkGetImageSparseMemoryRequirements = (PFN_vkGetImageSparseMemoryRequirements)vkGetDeviceProcAddr(device, "vkGetImageSparseMemoryRequirements");
		pfn_vkCreateFence = (PFN_vkCreateFence)vkGetDeviceProcAddr(device, "vkCreateFence");
		pfn_vkDestroyFence = (PFN_vkDestroyFence)vkGetDeviceProcAddr(device, "vkDestroyFence");
		pfn_vkResetFences = (PFN_vkResetFences)vkGetDeviceProcAddr(device, "vkResetFences");
		pfn_vkGetFenceStatus = (PFN_vkGetFenceStatus)vkGetDeviceProcAddr(device, "vkGetFenceStatus");
		pfn_vkWaitForFences = (PFN_vkWaitForFences)vkGetDeviceProcAddr(device, "vkWaitForFences");
		pfn_vkCreateSemaphore = (PFN_vkCreateSemaphore)vkGetDeviceProcAddr(device, "vkCreateSemaphore");
		pfn_vkDestroySemaphore = (PFN_vkDestroySemaphore)vkGetDeviceProcAddr(device, "vkDestroySemaphore");
		pfn_vkCreateEvent = (PFN_vkCreateEvent)vkGetDeviceProcAddr(device, "vkCreateEvent");
		pfn_vkDestroyEvent = (PFN_vkDestroyEvent)vkGetDeviceProcAddr(device, "vkDestroyEvent");
		pfn_vkGetEventStatus = (PFN_vkGetEventStatus)vkGetDeviceProcAddr(device, "vkGetEventStatus");
		pfn_vkSetEvent = (PFN_vkSetEvent)vkGetDeviceProcAddr(device, "vkSetEvent");
		pfn_vkResetEvent = (PFN_vkResetEvent)vkGetDeviceProcAddr(device, "vkResetEvent");
		pfn_vkCreateQueryPool = (PFN_vkCreateQueryPool)vkGetDeviceProcAddr(device, "vkCreateQueryPool");
		pfn_vkDestroyQueryPool = (PFN_vkDestroyQueryPool)vkGetDeviceProcAddr(device, "vkDestroyQueryPool");
		pfn_vkGetQueryPoolResults = (PFN_vkGetQueryPoolResults)vkGetDeviceProcAddr(device, "vkGetQueryPoolResults");
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkResetQueryPool = (PFN_vkResetQueryPool)vkGetDeviceProcAddr(device, "vkResetQueryPool");
#endif
#if defined(VK_EXT_host_query_reset) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkResetQueryPoolEXT = (PFN_vkResetQueryPoolEXT)vkGetDeviceProcAddr(device, "vkResetQueryPoolEXT");
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkCreateBuffer = (PFN_vkCreateBuffer)vkGetDeviceProcAddr(device, "vkCreateBuffer");
		pfn_vkDestroyBuffer = (PFN_vkDestroyBuffer)vkGetDeviceProcAddr(device, "vkDestroyBuffer");
		pfn_vkCreateBufferView = (PFN_vkCreateBufferView)vkGetDeviceProcAddr(device, "vkCreateBufferView");
		pfn_vkDestroyBufferView = (PFN_vkDestroyBufferView)vkGetDeviceProcAddr(device, "vkDestroyBufferView");
		pfn_vkCreateImage = (PFN_vkCreateImage)vkGetDeviceProcAddr(device, "vkCreateImage");
		pfn_vkDestroyImage = (PFN_vkDestroyImage)vkGetDeviceProcAddr(device, "vkDestroyImage");
		pfn_vkGetImageSubresourceLayout = (PFN_vkGetImageSubresourceLayout)vkGetDeviceProcAddr(device, "vkGetImageSubresourceLayout");
		pfn_vkCreateImageView = (PFN_vkCreateImageView)vkGetDeviceProcAddr(device, "vkCreateImageView");
		pfn_vkDestroyImageView = (PFN_vkDestroyImageView)vkGetDeviceProcAddr(device, "vkDestroyImageView");
		pfn_vkCreateShaderModule = (PFN_vkCreateShaderModule)vkGetDeviceProcAddr(device, "vkCreateShaderModule");
		pfn_vkDestroyShaderModule = (PFN_vkDestroyShaderModule)vkGetDeviceProcAddr(device, "vkDestroyShaderModule");
		pfn_vkCreatePipelineCache = (PFN_vkCreatePipelineCache)vkGetDeviceProcAddr(device, "vkCreatePipelineCache");
		pfn_vkDestroyPipelineCache = (PFN_vkDestroyPipelineCache)vkGetDeviceProcAddr(device, "vkDestroyPipelineCache");
		pfn_vkGetPipelineCacheData = (PFN_vkGetPipelineCacheData)vkGetDeviceProcAddr(device, "vkGetPipelineCacheData");
		pfn_vkMergePipelineCaches = (PFN_vkMergePipelineCaches)vkGetDeviceProcAddr(device, "vkMergePipelineCaches");
		pfn_vkCreateGraphicsPipelines = (PFN_vkCreateGraphicsPipelines)vkGetDeviceProcAddr(device, "vkCreateGraphicsPipelines");
		pfn_vkCreateComputePipelines = (PFN_vkCreateComputePipelines)vkGetDeviceProcAddr(device, "vkCreateComputePipelines");
#endif
#if defined(VK_HUAWEI_subpass_shading) && (defined(VK_KHR_create_renderpass2) && defined(VK_KHR_synchronization2))
		pfn_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = (PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI)vkGetDeviceProcAddr(device, "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI");
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkDestroyPipeline = (PFN_vkDestroyPipeline)vkGetDeviceProcAddr(device, "vkDestroyPipeline");
		pfn_vkCreatePipelineLayout = (PFN_vkCreatePipelineLayout)vkGetDeviceProcAddr(device, "vkCreatePipelineLayout");
		pfn_vkDestroyPipelineLayout = (PFN_vkDestroyPipelineLayout)vkGetDeviceProcAddr(device, "vkDestroyPipelineLayout");
		pfn_vkCreateSampler = (PFN_vkCreateSampler)vkGetDeviceProcAddr(device, "vkCreateSampler");
		pfn_vkDestroySampler = (PFN_vkDestroySampler)vkGetDeviceProcAddr(device, "vkDestroySampler");
		pfn_vkCreateDescriptorSetLayout = (PFN_vkCreateDescriptorSetLayout)vkGetDeviceProcAddr(device, "vkCreateDescriptorSetLayout");
		pfn_vkDestroyDescriptorSetLayout = (PFN_vkDestroyDescriptorSetLayout)vkGetDeviceProcAddr(device, "vkDestroyDescriptorSetLayout");
		pfn_vkCreateDescriptorPool = (PFN_vkCreateDescriptorPool)vkGetDeviceProcAddr(device, "vkCreateDescriptorPool");
		pfn_vkDestroyDescriptorPool = (PFN_vkDestroyDescriptorPool)vkGetDeviceProcAddr(device, "vkDestroyDescriptorPool");
		pfn_vkResetDescriptorPool = (PFN_vkResetDescriptorPool)vkGetDeviceProcAddr(device, "vkResetDescriptorPool");
		pfn_vkAllocateDescriptorSets = (PFN_vkAllocateDescriptorSets)vkGetDeviceProcAddr(device, "vkAllocateDescriptorSets");
		pfn_vkFreeDescriptorSets = (PFN_vkFreeDescriptorSets)vkGetDeviceProcAddr(device, "vkFreeDescriptorSets");
		pfn_vkUpdateDescriptorSets = (PFN_vkUpdateDescriptorSets)vkGetDeviceProcAddr(device, "vkUpdateDescriptorSets");
		pfn_vkCreateFramebuffer = (PFN_vkCreateFramebuffer)vkGetDeviceProcAddr(device, "vkCreateFramebuffer");
		pfn_vkDestroyFramebuffer = (PFN_vkDestroyFramebuffer)vkGetDeviceProcAddr(device, "vkDestroyFramebuffer");
		pfn_vkCreateRenderPass = (PFN_vkCreateRenderPass)vkGetDeviceProcAddr(device, "vkCreateRenderPass");
		pfn_vkDestroyRenderPass = (PFN_vkDestroyRenderPass)vkGetDeviceProcAddr(device, "vkDestroyRenderPass");
		pfn_vkGetRenderAreaGranularity = (PFN_vkGetRenderAreaGranularity)vkGetDeviceProcAddr(device, "vkGetRenderAreaGranularity");
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
		pfn_vkGetRenderingAreaGranularityKHR = (PFN_vkGetRenderingAreaGranularityKHR)vkGetDeviceProcAddr(device, "vkGetRenderingAreaGranularityKHR");
#endif
#if defined(VK_VERSION_1_0)
		pfn_vkCreateCommandPool = (PFN_vkCreateCommandPool)vkGetDeviceProcAddr(device, "vkCreateCommandPool");
		pfn_vkDestroyCommandPool = (PFN_vkDestroyCommandPool)vkGetDeviceProcAddr(device, "vkDestroyCommandPool");
		pfn_vkResetCommandPool = (PFN_vkResetCommandPool)vkGetDeviceProcAddr(device, "vkResetCommandPool");
		pfn_vkAllocateCommandBuffers = (PFN_vkAllocateCommandBuffers)vkGetDeviceProcAddr(device, "vkAllocateCommandBuffers");
		pfn_vkFreeCommandBuffers = (PFN_vkFreeCommandBuffers)vkGetDeviceProcAddr(device, "vkFreeCommandBuffers");
#endif
#if defined(VK_KHR_display_swapchain) && (defined(VK_KHR_swapchain) && defined(VK_KHR_display))
		pfn_vkCreateSharedSwapchainsKHR = (PFN_vkCreateSharedSwapchainsKHR)vkGetDeviceProcAddr(device, "vkCreateSharedSwapchainsKHR");
#endif
#if defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))
		pfn_vkCreateSwapchainKHR = (PFN_vkCreateSwapchainKHR)vkGetDeviceProcAddr(device, "vkCreateSwapchainKHR");
		pfn_vkDestroySwapchainKHR = (PFN_vkDestroySwapchainKHR)vkGetDeviceProcAddr(device, "vkDestroySwapchainKHR");
		pfn_vkGetSwapchainImagesKHR = (PFN_vkGetSwapchainImagesKHR)vkGetDeviceProcAddr(device, "vkGetSwapchainImagesKHR");
		pfn_vkAcquireNextImageKHR = (PFN_vkAcquireNextImageKHR)vkGetDeviceProcAddr(device, "vkAcquireNextImageKHR");
#endif
#if defined(VK_EXT_debug_marker) && (defined(VK_EXT_debug_report))
		pfn_vkDebugMarkerSetObjectNameEXT = (PFN_vkDebugMarkerSetObjectNameEXT)vkGetDeviceProcAddr(device, "vkDebugMarkerSetObjectNameEXT");
		pfn_vkDebugMarkerSetObjectTagEXT = (PFN_vkDebugMarkerSetObjectTagEXT)vkGetDeviceProcAddr(device, "vkDebugMarkerSetObjectTagEXT");
#endif
#if defined(VK_NV_external_memory_win32) && (defined(VK_NV_external_memory))
		pfn_vkGetMemoryWin32HandleNV = (PFN_vkGetMemoryWin32HandleNV)vkGetDeviceProcAddr(device, "vkGetMemoryWin32HandleNV");
#endif
#if defined(VK_NV_device_generated_commands) && (defined(VK_VERSION_1_1) && defined(VK_KHR_buffer_device_address))
		pfn_vkGetGeneratedCommandsMemoryRequirementsNV = (PFN_vkGetGeneratedCommandsMemoryRequirementsNV)vkGetDeviceProcAddr(device, "vkGetGeneratedCommandsMemoryRequirementsNV");
		pfn_vkCreateIndirectCommandsLayoutNV = (PFN_vkCreateIndirectCommandsLayoutNV)vkGetDeviceProcAddr(device, "vkCreateIndirectCommandsLayoutNV");
		pfn_vkDestroyIndirectCommandsLayoutNV = (PFN_vkDestroyIndirectCommandsLayoutNV)vkGetDeviceProcAddr(device, "vkDestroyIndirectCommandsLayoutNV");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkTrimCommandPool = (PFN_vkTrimCommandPool)vkGetDeviceProcAddr(device, "vkTrimCommandPool");
#endif
#if defined(VK_KHR_maintenance1)
		pfn_vkTrimCommandPoolKHR = (PFN_vkTrimCommandPoolKHR)vkGetDeviceProcAddr(device, "vkTrimCommandPoolKHR");
#endif
#if defined(VK_KHR_external_memory_win32) && (defined(VK_KHR_external_memory))
		pfn_vkGetMemoryWin32HandleKHR = (PFN_vkGetMemoryWin32HandleKHR)vkGetDeviceProcAddr(device, "vkGetMemoryWin32HandleKHR");
		pfn_vkGetMemoryWin32HandlePropertiesKHR = (PFN_vkGetMemoryWin32HandlePropertiesKHR)vkGetDeviceProcAddr(device, "vkGetMemoryWin32HandlePropertiesKHR");
#endif
#if defined(VK_KHR_external_memory_fd) && (defined(VK_KHR_external_memory) || defined(VK_VERSION_1_1))
		pfn_vkGetMemoryFdKHR = (PFN_vkGetMemoryFdKHR)vkGetDeviceProcAddr(device, "vkGetMemoryFdKHR");
		pfn_vkGetMemoryFdPropertiesKHR = (PFN_vkGetMemoryFdPropertiesKHR)vkGetDeviceProcAddr(device, "vkGetMemoryFdPropertiesKHR");
#endif
#if defined(VK_FUCHSIA_external_memory) && (defined(VK_KHR_external_memory_capabilities) && defined(VK_KHR_external_memory))
		pfn_vkGetMemoryZirconHandleFUCHSIA = (PFN_vkGetMemoryZirconHandleFUCHSIA)vkGetDeviceProcAddr(device, "vkGetMemoryZirconHandleFUCHSIA");
		pfn_vkGetMemoryZirconHandlePropertiesFUCHSIA = (PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA)vkGetDeviceProcAddr(device, "vkGetMemoryZirconHandlePropertiesFUCHSIA");
#endif
#if defined(VK_NV_external_memory_rdma) && (defined(VK_KHR_external_memory))
		pfn_vkGetMemoryRemoteAddressNV = (PFN_vkGetMemoryRemoteAddressNV)vkGetDeviceProcAddr(device, "vkGetMemoryRemoteAddressNV");
#endif
#if defined(VK_NV_external_memory_sci_buf) && (defined(VK_VERSION_1_1))
		pfn_vkGetMemorySciBufNV = (PFN_vkGetMemorySciBufNV)vkGetDeviceProcAddr(device, "vkGetMemorySciBufNV");
#endif
#if defined(VK_KHR_external_semaphore_win32) && (defined(VK_KHR_external_semaphore))
		pfn_vkGetSemaphoreWin32HandleKHR = (PFN_vkGetSemaphoreWin32HandleKHR)vkGetDeviceProcAddr(device, "vkGetSemaphoreWin32HandleKHR");
		pfn_vkImportSemaphoreWin32HandleKHR = (PFN_vkImportSemaphoreWin32HandleKHR)vkGetDeviceProcAddr(device, "vkImportSemaphoreWin32HandleKHR");
#endif
#if defined(VK_KHR_external_semaphore_fd) && (defined(VK_KHR_external_semaphore) || defined(VK_VERSION_1_1))
		pfn_vkGetSemaphoreFdKHR = (PFN_vkGetSemaphoreFdKHR)vkGetDeviceProcAddr(device, "vkGetSemaphoreFdKHR");
		pfn_vkImportSemaphoreFdKHR = (PFN_vkImportSemaphoreFdKHR)vkGetDeviceProcAddr(device, "vkImportSemaphoreFdKHR");
#endif
#if defined(VK_FUCHSIA_external_semaphore) && (defined(VK_KHR_external_semaphore_capabilities) && defined(VK_KHR_external_semaphore))
		pfn_vkGetSemaphoreZirconHandleFUCHSIA = (PFN_vkGetSemaphoreZirconHandleFUCHSIA)vkGetDeviceProcAddr(device, "vkGetSemaphoreZirconHandleFUCHSIA");
		pfn_vkImportSemaphoreZirconHandleFUCHSIA = (PFN_vkImportSemaphoreZirconHandleFUCHSIA)vkGetDeviceProcAddr(device, "vkImportSemaphoreZirconHandleFUCHSIA");
#endif
#if defined(VK_KHR_external_fence_win32) && (defined(VK_KHR_external_fence))
		pfn_vkGetFenceWin32HandleKHR = (PFN_vkGetFenceWin32HandleKHR)vkGetDeviceProcAddr(device, "vkGetFenceWin32HandleKHR");
		pfn_vkImportFenceWin32HandleKHR = (PFN_vkImportFenceWin32HandleKHR)vkGetDeviceProcAddr(device, "vkImportFenceWin32HandleKHR");
#endif
#if defined(VK_KHR_external_fence_fd) && (defined(VK_KHR_external_fence) || defined(VK_VERSION_1_1))
		pfn_vkGetFenceFdKHR = (PFN_vkGetFenceFdKHR)vkGetDeviceProcAddr(device, "vkGetFenceFdKHR");
		pfn_vkImportFenceFdKHR = (PFN_vkImportFenceFdKHR)vkGetDeviceProcAddr(device, "vkImportFenceFdKHR");
#endif
#if (defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))) || (defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1)))
		pfn_vkGetFenceSciSyncFenceNV = (PFN_vkGetFenceSciSyncFenceNV)vkGetDeviceProcAddr(device, "vkGetFenceSciSyncFenceNV");
		pfn_vkGetFenceSciSyncObjNV = (PFN_vkGetFenceSciSyncObjNV)vkGetDeviceProcAddr(device, "vkGetFenceSciSyncObjNV");
		pfn_vkImportFenceSciSyncFenceNV = (PFN_vkImportFenceSciSyncFenceNV)vkGetDeviceProcAddr(device, "vkImportFenceSciSyncFenceNV");
		pfn_vkImportFenceSciSyncObjNV = (PFN_vkImportFenceSciSyncObjNV)vkGetDeviceProcAddr(device, "vkImportFenceSciSyncObjNV");
#endif
#if defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))
		pfn_vkGetSemaphoreSciSyncObjNV = (PFN_vkGetSemaphoreSciSyncObjNV)vkGetDeviceProcAddr(device, "vkGetSemaphoreSciSyncObjNV");
		pfn_vkImportSemaphoreSciSyncObjNV = (PFN_vkImportSemaphoreSciSyncObjNV)vkGetDeviceProcAddr(device, "vkImportSemaphoreSciSyncObjNV");
#endif
#if defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1))
		pfn_vkCreateSemaphoreSciSyncPoolNV = (PFN_vkCreateSemaphoreSciSyncPoolNV)vkGetDeviceProcAddr(device, "vkCreateSemaphoreSciSyncPoolNV");
		pfn_vkDestroySemaphoreSciSyncPoolNV = (PFN_vkDestroySemaphoreSciSyncPoolNV)vkGetDeviceProcAddr(device, "vkDestroySemaphoreSciSyncPoolNV");
#endif
#if defined(VK_EXT_display_control) && (defined(VK_EXT_display_surface_counter) && defined(VK_KHR_swapchain))
		pfn_vkDisplayPowerControlEXT = (PFN_vkDisplayPowerControlEXT)vkGetDeviceProcAddr(device, "vkDisplayPowerControlEXT");
		pfn_vkRegisterDeviceEventEXT = (PFN_vkRegisterDeviceEventEXT)vkGetDeviceProcAddr(device, "vkRegisterDeviceEventEXT");
		pfn_vkRegisterDisplayEventEXT = (PFN_vkRegisterDisplayEventEXT)vkGetDeviceProcAddr(device, "vkRegisterDisplayEventEXT");
		pfn_vkGetSwapchainCounterEXT = (PFN_vkGetSwapchainCounterEXT)vkGetDeviceProcAddr(device, "vkGetSwapchainCounterEXT");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetDeviceGroupPeerMemoryFeatures = (PFN_vkGetDeviceGroupPeerMemoryFeatures)vkGetDeviceProcAddr(device, "vkGetDeviceGroupPeerMemoryFeatures");
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
		pfn_vkGetDeviceGroupPeerMemoryFeaturesKHR = (PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR)vkGetDeviceProcAddr(device, "vkGetDeviceGroupPeerMemoryFeaturesKHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkBindBufferMemory2 = (PFN_vkBindBufferMemory2)vkGetDeviceProcAddr(device, "vkBindBufferMemory2");
#endif
#if defined(VK_KHR_bind_memory2)
		pfn_vkBindBufferMemory2KHR = (PFN_vkBindBufferMemory2KHR)vkGetDeviceProcAddr(device, "vkBindBufferMemory2KHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkBindImageMemory2 = (PFN_vkBindImageMemory2)vkGetDeviceProcAddr(device, "vkBindImageMemory2");
#endif
#if defined(VK_KHR_bind_memory2)
		pfn_vkBindImageMemory2KHR = (PFN_vkBindImageMemory2KHR)vkGetDeviceProcAddr(device, "vkBindImageMemory2KHR");
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_surface)))
		pfn_vkGetDeviceGroupPresentCapabilitiesKHR = (PFN_vkGetDeviceGroupPresentCapabilitiesKHR)vkGetDeviceProcAddr(device, "vkGetDeviceGroupPresentCapabilitiesKHR");
		pfn_vkGetDeviceGroupSurfacePresentModesKHR = (PFN_vkGetDeviceGroupSurfacePresentModesKHR)vkGetDeviceProcAddr(device, "vkGetDeviceGroupSurfacePresentModesKHR");
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_swapchain)))
		pfn_vkAcquireNextImage2KHR = (PFN_vkAcquireNextImage2KHR)vkGetDeviceProcAddr(device, "vkAcquireNextImage2KHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkCreateDescriptorUpdateTemplate = (PFN_vkCreateDescriptorUpdateTemplate)vkGetDeviceProcAddr(device, "vkCreateDescriptorUpdateTemplate");
#endif
#if defined(VK_KHR_descriptor_update_template)
		pfn_vkCreateDescriptorUpdateTemplateKHR = (PFN_vkCreateDescriptorUpdateTemplateKHR)vkGetDeviceProcAddr(device, "vkCreateDescriptorUpdateTemplateKHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkDestroyDescriptorUpdateTemplate = (PFN_vkDestroyDescriptorUpdateTemplate)vkGetDeviceProcAddr(device, "vkDestroyDescriptorUpdateTemplate");
#endif
#if defined(VK_KHR_descriptor_update_template)
		pfn_vkDestroyDescriptorUpdateTemplateKHR = (PFN_vkDestroyDescriptorUpdateTemplateKHR)vkGetDeviceProcAddr(device, "vkDestroyDescriptorUpdateTemplateKHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkUpdateDescriptorSetWithTemplate = (PFN_vkUpdateDescriptorSetWithTemplate)vkGetDeviceProcAddr(device, "vkUpdateDescriptorSetWithTemplate");
#endif
#if defined(VK_KHR_descriptor_update_template)
		pfn_vkUpdateDescriptorSetWithTemplateKHR = (PFN_vkUpdateDescriptorSetWithTemplateKHR)vkGetDeviceProcAddr(device, "vkUpdateDescriptorSetWithTemplateKHR");
#endif
#if defined(VK_EXT_hdr_metadata) && (defined(VK_KHR_swapchain))
		pfn_vkSetHdrMetadataEXT = (PFN_vkSetHdrMetadataEXT)vkGetDeviceProcAddr(device, "vkSetHdrMetadataEXT");
#endif
#if defined(VK_KHR_shared_presentable_image) && (defined(VK_KHR_swapchain) && defined(VK_KHR_get_surface_capabilities2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)))
		pfn_vkGetSwapchainStatusKHR = (PFN_vkGetSwapchainStatusKHR)vkGetDeviceProcAddr(device, "vkGetSwapchainStatusKHR");
#endif
#if defined(VK_GOOGLE_display_timing) && (defined(VK_KHR_swapchain))
		pfn_vkGetRefreshCycleDurationGOOGLE = (PFN_vkGetRefreshCycleDurationGOOGLE)vkGetDeviceProcAddr(device, "vkGetRefreshCycleDurationGOOGLE");
		pfn_vkGetPastPresentationTimingGOOGLE = (PFN_vkGetPastPresentationTimingGOOGLE)vkGetDeviceProcAddr(device, "vkGetPastPresentationTimingGOOGLE");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetBufferMemoryRequirements2 = (PFN_vkGetBufferMemoryRequirements2)vkGetDeviceProcAddr(device, "vkGetBufferMemoryRequirements2");
#endif
#if defined(VK_KHR_get_memory_requirements2)
		pfn_vkGetBufferMemoryRequirements2KHR = (PFN_vkGetBufferMemoryRequirements2KHR)vkGetDeviceProcAddr(device, "vkGetBufferMemoryRequirements2KHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetImageMemoryRequirements2 = (PFN_vkGetImageMemoryRequirements2)vkGetDeviceProcAddr(device, "vkGetImageMemoryRequirements2");
#endif
#if defined(VK_KHR_get_memory_requirements2)
		pfn_vkGetImageMemoryRequirements2KHR = (PFN_vkGetImageMemoryRequirements2KHR)vkGetDeviceProcAddr(device, "vkGetImageMemoryRequirements2KHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetImageSparseMemoryRequirements2 = (PFN_vkGetImageSparseMemoryRequirements2)vkGetDeviceProcAddr(device, "vkGetImageSparseMemoryRequirements2");
#endif
#if defined(VK_KHR_get_memory_requirements2)
		pfn_vkGetImageSparseMemoryRequirements2KHR = (PFN_vkGetImageSparseMemoryRequirements2KHR)vkGetDeviceProcAddr(device, "vkGetImageSparseMemoryRequirements2KHR");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkGetDeviceBufferMemoryRequirements = (PFN_vkGetDeviceBufferMemoryRequirements)vkGetDeviceProcAddr(device, "vkGetDeviceBufferMemoryRequirements");
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
		pfn_vkGetDeviceBufferMemoryRequirementsKHR = (PFN_vkGetDeviceBufferMemoryRequirementsKHR)vkGetDeviceProcAddr(device, "vkGetDeviceBufferMemoryRequirementsKHR");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkGetDeviceImageMemoryRequirements = (PFN_vkGetDeviceImageMemoryRequirements)vkGetDeviceProcAddr(device, "vkGetDeviceImageMemoryRequirements");
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
		pfn_vkGetDeviceImageMemoryRequirementsKHR = (PFN_vkGetDeviceImageMemoryRequirementsKHR)vkGetDeviceProcAddr(device, "vkGetDeviceImageMemoryRequirementsKHR");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkGetDeviceImageSparseMemoryRequirements = (PFN_vkGetDeviceImageSparseMemoryRequirements)vkGetDeviceProcAddr(device, "vkGetDeviceImageSparseMemoryRequirements");
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
		pfn_vkGetDeviceImageSparseMemoryRequirementsKHR = (PFN_vkGetDeviceImageSparseMemoryRequirementsKHR)vkGetDeviceProcAddr(device, "vkGetDeviceImageSparseMemoryRequirementsKHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkCreateSamplerYcbcrConversion = (PFN_vkCreateSamplerYcbcrConversion)vkGetDeviceProcAddr(device, "vkCreateSamplerYcbcrConversion");
#endif
#if defined(VK_KHR_sampler_ycbcr_conversion) && (defined(VK_KHR_maintenance1) && defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_memory_requirements2) && defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCreateSamplerYcbcrConversionKHR = (PFN_vkCreateSamplerYcbcrConversionKHR)vkGetDeviceProcAddr(device, "vkCreateSamplerYcbcrConversionKHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkDestroySamplerYcbcrConversion = (PFN_vkDestroySamplerYcbcrConversion)vkGetDeviceProcAddr(device, "vkDestroySamplerYcbcrConversion");
#endif
#if defined(VK_KHR_sampler_ycbcr_conversion) && (defined(VK_KHR_maintenance1) && defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_memory_requirements2) && defined(VK_KHR_get_physical_device_properties2))
		pfn_vkDestroySamplerYcbcrConversionKHR = (PFN_vkDestroySamplerYcbcrConversionKHR)vkGetDeviceProcAddr(device, "vkDestroySamplerYcbcrConversionKHR");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetDeviceQueue2 = (PFN_vkGetDeviceQueue2)vkGetDeviceProcAddr(device, "vkGetDeviceQueue2");
#endif
#if defined(VK_EXT_validation_cache)
		pfn_vkCreateValidationCacheEXT = (PFN_vkCreateValidationCacheEXT)vkGetDeviceProcAddr(device, "vkCreateValidationCacheEXT");
		pfn_vkDestroyValidationCacheEXT = (PFN_vkDestroyValidationCacheEXT)vkGetDeviceProcAddr(device, "vkDestroyValidationCacheEXT");
		pfn_vkGetValidationCacheDataEXT = (PFN_vkGetValidationCacheDataEXT)vkGetDeviceProcAddr(device, "vkGetValidationCacheDataEXT");
		pfn_vkMergeValidationCachesEXT = (PFN_vkMergeValidationCachesEXT)vkGetDeviceProcAddr(device, "vkMergeValidationCachesEXT");
#endif
#if defined(VK_VERSION_1_1)
		pfn_vkGetDescriptorSetLayoutSupport = (PFN_vkGetDescriptorSetLayoutSupport)vkGetDeviceProcAddr(device, "vkGetDescriptorSetLayoutSupport");
#endif
#if defined(VK_KHR_maintenance3) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetDescriptorSetLayoutSupportKHR = (PFN_vkGetDescriptorSetLayoutSupportKHR)vkGetDeviceProcAddr(device, "vkGetDescriptorSetLayoutSupportKHR");
#endif
#if defined(VK_ANDROID_native_buffer)
		pfn_vkGetSwapchainGrallocUsageANDROID = (PFN_vkGetSwapchainGrallocUsageANDROID)vkGetDeviceProcAddr(device, "vkGetSwapchainGrallocUsageANDROID");
		pfn_vkGetSwapchainGrallocUsage2ANDROID = (PFN_vkGetSwapchainGrallocUsage2ANDROID)vkGetDeviceProcAddr(device, "vkGetSwapchainGrallocUsage2ANDROID");
		pfn_vkAcquireImageANDROID = (PFN_vkAcquireImageANDROID)vkGetDeviceProcAddr(device, "vkAcquireImageANDROID");
#endif
#if defined(VK_AMD_shader_info)
		pfn_vkGetShaderInfoAMD = (PFN_vkGetShaderInfoAMD)vkGetDeviceProcAddr(device, "vkGetShaderInfoAMD");
#endif
#if defined(VK_AMD_display_native_hdr) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
		pfn_vkSetLocalDimmingAMD = (PFN_vkSetLocalDimmingAMD)vkGetDeviceProcAddr(device, "vkSetLocalDimmingAMD");
#endif
#if defined(VK_KHR_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkGetCalibratedTimestampsKHR = (PFN_vkGetCalibratedTimestampsKHR)vkGetDeviceProcAddr(device, "vkGetCalibratedTimestampsKHR");
#endif
#if defined(VK_EXT_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkGetCalibratedTimestampsEXT = (PFN_vkGetCalibratedTimestampsEXT)vkGetDeviceProcAddr(device, "vkGetCalibratedTimestampsEXT");
#endif
#if defined(VK_EXT_debug_utils)
		pfn_vkSetDebugUtilsObjectNameEXT = (PFN_vkSetDebugUtilsObjectNameEXT)vkGetDeviceProcAddr(device, "vkSetDebugUtilsObjectNameEXT");
		pfn_vkSetDebugUtilsObjectTagEXT = (PFN_vkSetDebugUtilsObjectTagEXT)vkGetDeviceProcAddr(device, "vkSetDebugUtilsObjectTagEXT");
#endif
#if defined(VK_EXT_external_memory_host) && (defined(VK_KHR_external_memory) || defined(VK_VERSION_1_1))
		pfn_vkGetMemoryHostPointerPropertiesEXT = (PFN_vkGetMemoryHostPointerPropertiesEXT)vkGetDeviceProcAddr(device, "vkGetMemoryHostPointerPropertiesEXT");
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkCreateRenderPass2 = (PFN_vkCreateRenderPass2)vkGetDeviceProcAddr(device, "vkCreateRenderPass2");
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
		pfn_vkCreateRenderPass2KHR = (PFN_vkCreateRenderPass2KHR)vkGetDeviceProcAddr(device, "vkCreateRenderPass2KHR");
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkGetSemaphoreCounterValue = (PFN_vkGetSemaphoreCounterValue)vkGetDeviceProcAddr(device, "vkGetSemaphoreCounterValue");
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetSemaphoreCounterValueKHR = (PFN_vkGetSemaphoreCounterValueKHR)vkGetDeviceProcAddr(device, "vkGetSemaphoreCounterValueKHR");
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkWaitSemaphores = (PFN_vkWaitSemaphores)vkGetDeviceProcAddr(device, "vkWaitSemaphores");
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkWaitSemaphoresKHR = (PFN_vkWaitSemaphoresKHR)vkGetDeviceProcAddr(device, "vkWaitSemaphoresKHR");
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkSignalSemaphore = (PFN_vkSignalSemaphore)vkGetDeviceProcAddr(device, "vkSignalSemaphore");
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkSignalSemaphoreKHR = (PFN_vkSignalSemaphoreKHR)vkGetDeviceProcAddr(device, "vkSignalSemaphoreKHR");
#endif
#if defined(VK_ANDROID_external_memory_android_hardware_buffer) && (defined(VK_KHR_sampler_ycbcr_conversion) && defined(VK_KHR_external_memory) && defined(VK_EXT_queue_family_foreign) && defined(VK_KHR_dedicated_allocation))
		pfn_vkGetAndroidHardwareBufferPropertiesANDROID = (PFN_vkGetAndroidHardwareBufferPropertiesANDROID)vkGetDeviceProcAddr(device, "vkGetAndroidHardwareBufferPropertiesANDROID");
		pfn_vkGetMemoryAndroidHardwareBufferANDROID = (PFN_vkGetMemoryAndroidHardwareBufferANDROID)vkGetDeviceProcAddr(device, "vkGetMemoryAndroidHardwareBufferANDROID");
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		pfn_vkCompileDeferredNV = (PFN_vkCompileDeferredNV)vkGetDeviceProcAddr(device, "vkCompileDeferredNV");
		pfn_vkCreateAccelerationStructureNV = (PFN_vkCreateAccelerationStructureNV)vkGetDeviceProcAddr(device, "vkCreateAccelerationStructureNV");
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		pfn_vkDestroyAccelerationStructureKHR = (PFN_vkDestroyAccelerationStructureKHR)vkGetDeviceProcAddr(device, "vkDestroyAccelerationStructureKHR");
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		pfn_vkDestroyAccelerationStructureNV = (PFN_vkDestroyAccelerationStructureNV)vkGetDeviceProcAddr(device, "vkDestroyAccelerationStructureNV");
		pfn_vkGetAccelerationStructureMemoryRequirementsNV = (PFN_vkGetAccelerationStructureMemoryRequirementsNV)vkGetDeviceProcAddr(device, "vkGetAccelerationStructureMemoryRequirementsNV");
		pfn_vkBindAccelerationStructureMemoryNV = (PFN_vkBindAccelerationStructureMemoryNV)vkGetDeviceProcAddr(device, "vkBindAccelerationStructureMemoryNV");
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		pfn_vkCopyAccelerationStructureKHR = (PFN_vkCopyAccelerationStructureKHR)vkGetDeviceProcAddr(device, "vkCopyAccelerationStructureKHR");
		pfn_vkCopyAccelerationStructureToMemoryKHR = (PFN_vkCopyAccelerationStructureToMemoryKHR)vkGetDeviceProcAddr(device, "vkCopyAccelerationStructureToMemoryKHR");
		pfn_vkCopyMemoryToAccelerationStructureKHR = (PFN_vkCopyMemoryToAccelerationStructureKHR)vkGetDeviceProcAddr(device, "vkCopyMemoryToAccelerationStructureKHR");
		pfn_vkWriteAccelerationStructuresPropertiesKHR = (PFN_vkWriteAccelerationStructuresPropertiesKHR)vkGetDeviceProcAddr(device, "vkWriteAccelerationStructuresPropertiesKHR");
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		pfn_vkGetRayTracingShaderGroupHandlesKHR = (PFN_vkGetRayTracingShaderGroupHandlesKHR)vkGetDeviceProcAddr(device, "vkGetRayTracingShaderGroupHandlesKHR");
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		pfn_vkGetRayTracingShaderGroupHandlesNV = (PFN_vkGetRayTracingShaderGroupHandlesNV)vkGetDeviceProcAddr(device, "vkGetRayTracingShaderGroupHandlesNV");
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		pfn_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = (PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR)vkGetDeviceProcAddr(device, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
		pfn_vkGetAccelerationStructureHandleNV = (PFN_vkGetAccelerationStructureHandleNV)vkGetDeviceProcAddr(device, "vkGetAccelerationStructureHandleNV");
		pfn_vkCreateRayTracingPipelinesNV = (PFN_vkCreateRayTracingPipelinesNV)vkGetDeviceProcAddr(device, "vkCreateRayTracingPipelinesNV");
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		pfn_vkCreateRayTracingPipelinesKHR = (PFN_vkCreateRayTracingPipelinesKHR)vkGetDeviceProcAddr(device, "vkCreateRayTracingPipelinesKHR");
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		pfn_vkGetDeviceAccelerationStructureCompatibilityKHR = (PFN_vkGetDeviceAccelerationStructureCompatibilityKHR)vkGetDeviceProcAddr(device, "vkGetDeviceAccelerationStructureCompatibilityKHR");
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
		pfn_vkGetRayTracingShaderGroupStackSizeKHR = (PFN_vkGetRayTracingShaderGroupStackSizeKHR)vkGetDeviceProcAddr(device, "vkGetRayTracingShaderGroupStackSizeKHR");
#endif
#if defined(VK_NVX_image_view_handle)
		pfn_vkGetImageViewHandleNVX = (PFN_vkGetImageViewHandleNVX)vkGetDeviceProcAddr(device, "vkGetImageViewHandleNVX");
		pfn_vkGetImageViewAddressNVX = (PFN_vkGetImageViewAddressNVX)vkGetDeviceProcAddr(device, "vkGetImageViewAddressNVX");
#endif
#if ((defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))) && (defined(VK_KHR_device_group))) || ((defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))) && (defined(VK_VERSION_1_1)))
		pfn_vkGetDeviceGroupSurfacePresentModes2EXT = (PFN_vkGetDeviceGroupSurfacePresentModes2EXT)vkGetDeviceProcAddr(device, "vkGetDeviceGroupSurfacePresentModes2EXT");
#endif
#if defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
		pfn_vkAcquireFullScreenExclusiveModeEXT = (PFN_vkAcquireFullScreenExclusiveModeEXT)vkGetDeviceProcAddr(device, "vkAcquireFullScreenExclusiveModeEXT");
		pfn_vkReleaseFullScreenExclusiveModeEXT = (PFN_vkReleaseFullScreenExclusiveModeEXT)vkGetDeviceProcAddr(device, "vkReleaseFullScreenExclusiveModeEXT");
#endif
#if defined(VK_KHR_performance_query) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
		pfn_vkAcquireProfilingLockKHR = (PFN_vkAcquireProfilingLockKHR)vkGetDeviceProcAddr(device, "vkAcquireProfilingLockKHR");
		pfn_vkReleaseProfilingLockKHR = (PFN_vkReleaseProfilingLockKHR)vkGetDeviceProcAddr(device, "vkReleaseProfilingLockKHR");
#endif
#if defined(VK_EXT_image_drm_format_modifier) && (((defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_sampler_ycbcr_conversion)) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_image_format_list) || defined(VK_VERSION_1_2)))
		pfn_vkGetImageDrmFormatModifierPropertiesEXT = (PFN_vkGetImageDrmFormatModifierPropertiesEXT)vkGetDeviceProcAddr(device, "vkGetImageDrmFormatModifierPropertiesEXT");
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkGetBufferOpaqueCaptureAddress = (PFN_vkGetBufferOpaqueCaptureAddress)vkGetDeviceProcAddr(device, "vkGetBufferOpaqueCaptureAddress");
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
		pfn_vkGetBufferOpaqueCaptureAddressKHR = (PFN_vkGetBufferOpaqueCaptureAddressKHR)vkGetDeviceProcAddr(device, "vkGetBufferOpaqueCaptureAddressKHR");
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkGetBufferDeviceAddress = (PFN_vkGetBufferDeviceAddress)vkGetDeviceProcAddr(device, "vkGetBufferDeviceAddress");
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
		pfn_vkGetBufferDeviceAddressKHR = (PFN_vkGetBufferDeviceAddressKHR)vkGetDeviceProcAddr(device, "vkGetBufferDeviceAddressKHR");
#endif
#if defined(VK_EXT_buffer_device_address) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetBufferDeviceAddressEXT = (PFN_vkGetBufferDeviceAddressEXT)vkGetDeviceProcAddr(device, "vkGetBufferDeviceAddressEXT");
#endif
#if defined(VK_INTEL_performance_query)
		pfn_vkInitializePerformanceApiINTEL = (PFN_vkInitializePerformanceApiINTEL)vkGetDeviceProcAddr(device, "vkInitializePerformanceApiINTEL");
		pfn_vkUninitializePerformanceApiINTEL = (PFN_vkUninitializePerformanceApiINTEL)vkGetDeviceProcAddr(device, "vkUninitializePerformanceApiINTEL");
		pfn_vkAcquirePerformanceConfigurationINTEL = (PFN_vkAcquirePerformanceConfigurationINTEL)vkGetDeviceProcAddr(device, "vkAcquirePerformanceConfigurationINTEL");
		pfn_vkReleasePerformanceConfigurationINTEL = (PFN_vkReleasePerformanceConfigurationINTEL)vkGetDeviceProcAddr(device, "vkReleasePerformanceConfigurationINTEL");
		pfn_vkGetPerformanceParameterINTEL = (PFN_vkGetPerformanceParameterINTEL)vkGetDeviceProcAddr(device, "vkGetPerformanceParameterINTEL");
#endif
#if defined(VK_VERSION_1_2)
		pfn_vkGetDeviceMemoryOpaqueCaptureAddress = (PFN_vkGetDeviceMemoryOpaqueCaptureAddress)vkGetDeviceProcAddr(device, "vkGetDeviceMemoryOpaqueCaptureAddress");
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
		pfn_vkGetDeviceMemoryOpaqueCaptureAddressKHR = (PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR)vkGetDeviceProcAddr(device, "vkGetDeviceMemoryOpaqueCaptureAddressKHR");
#endif
#if defined(VK_KHR_pipeline_executable_properties) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPipelineExecutablePropertiesKHR = (PFN_vkGetPipelineExecutablePropertiesKHR)vkGetDeviceProcAddr(device, "vkGetPipelineExecutablePropertiesKHR");
		pfn_vkGetPipelineExecutableStatisticsKHR = (PFN_vkGetPipelineExecutableStatisticsKHR)vkGetDeviceProcAddr(device, "vkGetPipelineExecutableStatisticsKHR");
		pfn_vkGetPipelineExecutableInternalRepresentationsKHR = (PFN_vkGetPipelineExecutableInternalRepresentationsKHR)vkGetDeviceProcAddr(device, "vkGetPipelineExecutableInternalRepresentationsKHR");
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		pfn_vkCreateAccelerationStructureKHR = (PFN_vkCreateAccelerationStructureKHR)vkGetDeviceProcAddr(device, "vkCreateAccelerationStructureKHR");
		pfn_vkBuildAccelerationStructuresKHR = (PFN_vkBuildAccelerationStructuresKHR)vkGetDeviceProcAddr(device, "vkBuildAccelerationStructuresKHR");
		pfn_vkGetAccelerationStructureDeviceAddressKHR = (PFN_vkGetAccelerationStructureDeviceAddressKHR)vkGetDeviceProcAddr(device, "vkGetAccelerationStructureDeviceAddressKHR");
#endif
#if defined(VK_KHR_deferred_host_operations)
		pfn_vkCreateDeferredOperationKHR = (PFN_vkCreateDeferredOperationKHR)vkGetDeviceProcAddr(device, "vkCreateDeferredOperationKHR");
		pfn_vkDestroyDeferredOperationKHR = (PFN_vkDestroyDeferredOperationKHR)vkGetDeviceProcAddr(device, "vkDestroyDeferredOperationKHR");
		pfn_vkGetDeferredOperationMaxConcurrencyKHR = (PFN_vkGetDeferredOperationMaxConcurrencyKHR)vkGetDeviceProcAddr(device, "vkGetDeferredOperationMaxConcurrencyKHR");
		pfn_vkGetDeferredOperationResultKHR = (PFN_vkGetDeferredOperationResultKHR)vkGetDeviceProcAddr(device, "vkGetDeferredOperationResultKHR");
		pfn_vkDeferredOperationJoinKHR = (PFN_vkDeferredOperationJoinKHR)vkGetDeviceProcAddr(device, "vkDeferredOperationJoinKHR");
#endif
#if defined(VK_NV_device_generated_commands_compute) && (defined(VK_NV_device_generated_commands))
		pfn_vkGetPipelineIndirectMemoryRequirementsNV = (PFN_vkGetPipelineIndirectMemoryRequirementsNV)vkGetDeviceProcAddr(device, "vkGetPipelineIndirectMemoryRequirementsNV");
		pfn_vkGetPipelineIndirectDeviceAddressNV = (PFN_vkGetPipelineIndirectDeviceAddressNV)vkGetDeviceProcAddr(device, "vkGetPipelineIndirectDeviceAddressNV");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkCreatePrivateDataSlot = (PFN_vkCreatePrivateDataSlot)vkGetDeviceProcAddr(device, "vkCreatePrivateDataSlot");
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkCreatePrivateDataSlotEXT = (PFN_vkCreatePrivateDataSlotEXT)vkGetDeviceProcAddr(device, "vkCreatePrivateDataSlotEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkDestroyPrivateDataSlot = (PFN_vkDestroyPrivateDataSlot)vkGetDeviceProcAddr(device, "vkDestroyPrivateDataSlot");
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkDestroyPrivateDataSlotEXT = (PFN_vkDestroyPrivateDataSlotEXT)vkGetDeviceProcAddr(device, "vkDestroyPrivateDataSlotEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkSetPrivateData = (PFN_vkSetPrivateData)vkGetDeviceProcAddr(device, "vkSetPrivateData");
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkSetPrivateDataEXT = (PFN_vkSetPrivateDataEXT)vkGetDeviceProcAddr(device, "vkSetPrivateDataEXT");
#endif
#if defined(VK_VERSION_1_3)
		pfn_vkGetPrivateData = (PFN_vkGetPrivateData)vkGetDeviceProcAddr(device, "vkGetPrivateData");
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPrivateDataEXT = (PFN_vkGetPrivateDataEXT)vkGetDeviceProcAddr(device, "vkGetPrivateDataEXT");
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
		pfn_vkGetAccelerationStructureBuildSizesKHR = (PFN_vkGetAccelerationStructureBuildSizesKHR)vkGetDeviceProcAddr(device, "vkGetAccelerationStructureBuildSizesKHR");
#endif
#if defined(VK_EXT_host_image_copy) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_copy_commands2) && defined(VK_KHR_format_feature_flags2))
		pfn_vkCopyMemoryToImageEXT = (PFN_vkCopyMemoryToImageEXT)vkGetDeviceProcAddr(device, "vkCopyMemoryToImageEXT");
		pfn_vkCopyImageToMemoryEXT = (PFN_vkCopyImageToMemoryEXT)vkGetDeviceProcAddr(device, "vkCopyImageToMemoryEXT");
		pfn_vkCopyImageToImageEXT = (PFN_vkCopyImageToImageEXT)vkGetDeviceProcAddr(device, "vkCopyImageToImageEXT");
		pfn_vkTransitionImageLayoutEXT = (PFN_vkTransitionImageLayoutEXT)vkGetDeviceProcAddr(device, "vkTransitionImageLayoutEXT");
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
		pfn_vkCreateVideoSessionKHR = (PFN_vkCreateVideoSessionKHR)vkGetDeviceProcAddr(device, "vkCreateVideoSessionKHR");
		pfn_vkDestroyVideoSessionKHR = (PFN_vkDestroyVideoSessionKHR)vkGetDeviceProcAddr(device, "vkDestroyVideoSessionKHR");
		pfn_vkCreateVideoSessionParametersKHR = (PFN_vkCreateVideoSessionParametersKHR)vkGetDeviceProcAddr(device, "vkCreateVideoSessionParametersKHR");
		pfn_vkUpdateVideoSessionParametersKHR = (PFN_vkUpdateVideoSessionParametersKHR)vkGetDeviceProcAddr(device, "vkUpdateVideoSessionParametersKHR");
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
		pfn_vkGetEncodedVideoSessionParametersKHR = (PFN_vkGetEncodedVideoSessionParametersKHR)vkGetDeviceProcAddr(device, "vkGetEncodedVideoSessionParametersKHR");
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
		pfn_vkDestroyVideoSessionParametersKHR = (PFN_vkDestroyVideoSessionParametersKHR)vkGetDeviceProcAddr(device, "vkDestroyVideoSessionParametersKHR");
		pfn_vkGetVideoSessionMemoryRequirementsKHR = (PFN_vkGetVideoSessionMemoryRequirementsKHR)vkGetDeviceProcAddr(device, "vkGetVideoSessionMemoryRequirementsKHR");
		pfn_vkBindVideoSessionMemoryKHR = (PFN_vkBindVideoSessionMemoryKHR)vkGetDeviceProcAddr(device, "vkBindVideoSessionMemoryKHR");
#endif
#if defined(VK_NVX_binary_import)
		pfn_vkCreateCuModuleNVX = (PFN_vkCreateCuModuleNVX)vkGetDeviceProcAddr(device, "vkCreateCuModuleNVX");
		pfn_vkCreateCuFunctionNVX = (PFN_vkCreateCuFunctionNVX)vkGetDeviceProcAddr(device, "vkCreateCuFunctionNVX");
		pfn_vkDestroyCuModuleNVX = (PFN_vkDestroyCuModuleNVX)vkGetDeviceProcAddr(device, "vkDestroyCuModuleNVX");
		pfn_vkDestroyCuFunctionNVX = (PFN_vkDestroyCuFunctionNVX)vkGetDeviceProcAddr(device, "vkDestroyCuFunctionNVX");
#endif
#if defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_synchronization2) && defined(VK_EXT_descriptor_indexing))
		pfn_vkGetDescriptorSetLayoutSizeEXT = (PFN_vkGetDescriptorSetLayoutSizeEXT)vkGetDeviceProcAddr(device, "vkGetDescriptorSetLayoutSizeEXT");
		pfn_vkGetDescriptorSetLayoutBindingOffsetEXT = (PFN_vkGetDescriptorSetLayoutBindingOffsetEXT)vkGetDeviceProcAddr(device, "vkGetDescriptorSetLayoutBindingOffsetEXT");
		pfn_vkGetDescriptorEXT = (PFN_vkGetDescriptorEXT)vkGetDeviceProcAddr(device, "vkGetDescriptorEXT");
		pfn_vkGetBufferOpaqueCaptureDescriptorDataEXT = (PFN_vkGetBufferOpaqueCaptureDescriptorDataEXT)vkGetDeviceProcAddr(device, "vkGetBufferOpaqueCaptureDescriptorDataEXT");
		pfn_vkGetImageOpaqueCaptureDescriptorDataEXT = (PFN_vkGetImageOpaqueCaptureDescriptorDataEXT)vkGetDeviceProcAddr(device, "vkGetImageOpaqueCaptureDescriptorDataEXT");
		pfn_vkGetImageViewOpaqueCaptureDescriptorDataEXT = (PFN_vkGetImageViewOpaqueCaptureDescriptorDataEXT)vkGetDeviceProcAddr(device, "vkGetImageViewOpaqueCaptureDescriptorDataEXT");
		pfn_vkGetSamplerOpaqueCaptureDescriptorDataEXT = (PFN_vkGetSamplerOpaqueCaptureDescriptorDataEXT)vkGetDeviceProcAddr(device, "vkGetSamplerOpaqueCaptureDescriptorDataEXT");
#endif
#if (defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_synchronization2) && defined(VK_EXT_descriptor_indexing))) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing))
		pfn_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = (PFN_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT)vkGetDeviceProcAddr(device, "vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT");
#endif
#if defined(VK_EXT_pageable_device_local_memory) && (defined(VK_EXT_memory_priority))
		pfn_vkSetDeviceMemoryPriorityEXT = (PFN_vkSetDeviceMemoryPriorityEXT)vkGetDeviceProcAddr(device, "vkSetDeviceMemoryPriorityEXT");
#endif
#if defined(VK_KHR_present_wait) && (defined(VK_KHR_swapchain) && defined(VK_KHR_present_id))
		pfn_vkWaitForPresentKHR = (PFN_vkWaitForPresentKHR)vkGetDeviceProcAddr(device, "vkWaitForPresentKHR");
#endif
#if defined(VK_FUCHSIA_buffer_collection) && (defined(VK_FUCHSIA_external_memory) && defined(VK_KHR_sampler_ycbcr_conversion))
		pfn_vkCreateBufferCollectionFUCHSIA = (PFN_vkCreateBufferCollectionFUCHSIA)vkGetDeviceProcAddr(device, "vkCreateBufferCollectionFUCHSIA");
		pfn_vkSetBufferCollectionBufferConstraintsFUCHSIA = (PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA)vkGetDeviceProcAddr(device, "vkSetBufferCollectionBufferConstraintsFUCHSIA");
		pfn_vkSetBufferCollectionImageConstraintsFUCHSIA = (PFN_vkSetBufferCollectionImageConstraintsFUCHSIA)vkGetDeviceProcAddr(device, "vkSetBufferCollectionImageConstraintsFUCHSIA");
		pfn_vkDestroyBufferCollectionFUCHSIA = (PFN_vkDestroyBufferCollectionFUCHSIA)vkGetDeviceProcAddr(device, "vkDestroyBufferCollectionFUCHSIA");
		pfn_vkGetBufferCollectionPropertiesFUCHSIA = (PFN_vkGetBufferCollectionPropertiesFUCHSIA)vkGetDeviceProcAddr(device, "vkGetBufferCollectionPropertiesFUCHSIA");
#endif
#if defined(VK_NV_cuda_kernel_launch)
		pfn_vkCreateCudaModuleNV = (PFN_vkCreateCudaModuleNV)vkGetDeviceProcAddr(device, "vkCreateCudaModuleNV");
		pfn_vkGetCudaModuleCacheNV = (PFN_vkGetCudaModuleCacheNV)vkGetDeviceProcAddr(device, "vkGetCudaModuleCacheNV");
		pfn_vkCreateCudaFunctionNV = (PFN_vkCreateCudaFunctionNV)vkGetDeviceProcAddr(device, "vkCreateCudaFunctionNV");
		pfn_vkDestroyCudaModuleNV = (PFN_vkDestroyCudaModuleNV)vkGetDeviceProcAddr(device, "vkDestroyCudaModuleNV");
		pfn_vkDestroyCudaFunctionNV = (PFN_vkDestroyCudaFunctionNV)vkGetDeviceProcAddr(device, "vkDestroyCudaFunctionNV");
#endif
#if defined(VK_VALVE_descriptor_set_host_mapping) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetDescriptorSetLayoutHostMappingInfoVALVE = (PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE)vkGetDeviceProcAddr(device, "vkGetDescriptorSetLayoutHostMappingInfoVALVE");
		pfn_vkGetDescriptorSetHostMappingVALVE = (PFN_vkGetDescriptorSetHostMappingVALVE)vkGetDeviceProcAddr(device, "vkGetDescriptorSetHostMappingVALVE");
#endif
#if defined(VK_EXT_opacity_micromap) && (defined(VK_KHR_acceleration_structure) && defined(VK_KHR_synchronization2))
		pfn_vkCreateMicromapEXT = (PFN_vkCreateMicromapEXT)vkGetDeviceProcAddr(device, "vkCreateMicromapEXT");
		pfn_vkBuildMicromapsEXT = (PFN_vkBuildMicromapsEXT)vkGetDeviceProcAddr(device, "vkBuildMicromapsEXT");
		pfn_vkDestroyMicromapEXT = (PFN_vkDestroyMicromapEXT)vkGetDeviceProcAddr(device, "vkDestroyMicromapEXT");
		pfn_vkCopyMicromapEXT = (PFN_vkCopyMicromapEXT)vkGetDeviceProcAddr(device, "vkCopyMicromapEXT");
		pfn_vkCopyMicromapToMemoryEXT = (PFN_vkCopyMicromapToMemoryEXT)vkGetDeviceProcAddr(device, "vkCopyMicromapToMemoryEXT");
		pfn_vkCopyMemoryToMicromapEXT = (PFN_vkCopyMemoryToMicromapEXT)vkGetDeviceProcAddr(device, "vkCopyMemoryToMicromapEXT");
		pfn_vkWriteMicromapsPropertiesEXT = (PFN_vkWriteMicromapsPropertiesEXT)vkGetDeviceProcAddr(device, "vkWriteMicromapsPropertiesEXT");
		pfn_vkGetDeviceMicromapCompatibilityEXT = (PFN_vkGetDeviceMicromapCompatibilityEXT)vkGetDeviceProcAddr(device, "vkGetDeviceMicromapCompatibilityEXT");
		pfn_vkGetMicromapBuildSizesEXT = (PFN_vkGetMicromapBuildSizesEXT)vkGetDeviceProcAddr(device, "vkGetMicromapBuildSizesEXT");
#endif
#if defined(VK_EXT_shader_module_identifier) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_EXT_pipeline_creation_cache_control))
		pfn_vkGetShaderModuleIdentifierEXT = (PFN_vkGetShaderModuleIdentifierEXT)vkGetDeviceProcAddr(device, "vkGetShaderModuleIdentifierEXT");
		pfn_vkGetShaderModuleCreateInfoIdentifierEXT = (PFN_vkGetShaderModuleCreateInfoIdentifierEXT)vkGetDeviceProcAddr(device, "vkGetShaderModuleCreateInfoIdentifierEXT");
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
		pfn_vkGetImageSubresourceLayout2KHR = (PFN_vkGetImageSubresourceLayout2KHR)vkGetDeviceProcAddr(device, "vkGetImageSubresourceLayout2KHR");
#endif
#if (defined(VK_EXT_host_image_copy) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_copy_commands2) && defined(VK_KHR_format_feature_flags2))) || (defined(VK_EXT_image_compression_control) && (defined(VK_KHR_get_physical_device_properties2)))
		pfn_vkGetImageSubresourceLayout2EXT = (PFN_vkGetImageSubresourceLayout2EXT)vkGetDeviceProcAddr(device, "vkGetImageSubresourceLayout2EXT");
#endif
#if defined(VK_EXT_pipeline_properties) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetPipelinePropertiesEXT = (PFN_vkGetPipelinePropertiesEXT)vkGetDeviceProcAddr(device, "vkGetPipelinePropertiesEXT");
#endif
#if defined(VK_EXT_metal_objects)
		pfn_vkExportMetalObjectsEXT = (PFN_vkExportMetalObjectsEXT)vkGetDeviceProcAddr(device, "vkExportMetalObjectsEXT");
#endif
#if defined(VK_QCOM_tile_properties) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetFramebufferTilePropertiesQCOM = (PFN_vkGetFramebufferTilePropertiesQCOM)vkGetDeviceProcAddr(device, "vkGetFramebufferTilePropertiesQCOM");
		pfn_vkGetDynamicRenderingTilePropertiesQCOM = (PFN_vkGetDynamicRenderingTilePropertiesQCOM)vkGetDeviceProcAddr(device, "vkGetDynamicRenderingTilePropertiesQCOM");
#endif
#if defined(VK_NV_optical_flow) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_format_feature_flags2) && defined(VK_KHR_synchronization2))
		pfn_vkCreateOpticalFlowSessionNV = (PFN_vkCreateOpticalFlowSessionNV)vkGetDeviceProcAddr(device, "vkCreateOpticalFlowSessionNV");
		pfn_vkDestroyOpticalFlowSessionNV = (PFN_vkDestroyOpticalFlowSessionNV)vkGetDeviceProcAddr(device, "vkDestroyOpticalFlowSessionNV");
		pfn_vkBindOpticalFlowSessionImageNV = (PFN_vkBindOpticalFlowSessionImageNV)vkGetDeviceProcAddr(device, "vkBindOpticalFlowSessionImageNV");
#endif
#if defined(VK_EXT_device_fault) && (defined(VK_KHR_get_physical_device_properties2))
		pfn_vkGetDeviceFaultInfoEXT = (PFN_vkGetDeviceFaultInfoEXT)vkGetDeviceProcAddr(device, "vkGetDeviceFaultInfoEXT");
#endif
#if defined(VK_EXT_swapchain_maintenance1) && (defined(VK_KHR_swapchain) && defined(VK_EXT_surface_maintenance1) && defined(VK_KHR_get_physical_device_properties2))
		pfn_vkReleaseSwapchainImagesEXT = (PFN_vkReleaseSwapchainImagesEXT)vkGetDeviceProcAddr(device, "vkReleaseSwapchainImagesEXT");
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
		pfn_vkGetDeviceImageSubresourceLayoutKHR = (PFN_vkGetDeviceImageSubresourceLayoutKHR)vkGetDeviceProcAddr(device, "vkGetDeviceImageSubresourceLayoutKHR");
#endif
#if defined(VK_KHR_map_memory2)
		pfn_vkMapMemory2KHR = (PFN_vkMapMemory2KHR)vkGetDeviceProcAddr(device, "vkMapMemory2KHR");
		pfn_vkUnmapMemory2KHR = (PFN_vkUnmapMemory2KHR)vkGetDeviceProcAddr(device, "vkUnmapMemory2KHR");
#endif
#if defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))
		pfn_vkCreateShadersEXT = (PFN_vkCreateShadersEXT)vkGetDeviceProcAddr(device, "vkCreateShadersEXT");
		pfn_vkDestroyShaderEXT = (PFN_vkDestroyShaderEXT)vkGetDeviceProcAddr(device, "vkDestroyShaderEXT");
		pfn_vkGetShaderBinaryDataEXT = (PFN_vkGetShaderBinaryDataEXT)vkGetDeviceProcAddr(device, "vkGetShaderBinaryDataEXT");
#endif
#if defined(VK_QNX_external_memory_screen_buffer) && (((defined(VK_KHR_sampler_ycbcr_conversion) && defined(VK_KHR_external_memory) && defined(VK_KHR_dedicated_allocation)) || defined(VK_VERSION_1_1)) && defined(VK_EXT_queue_family_foreign))
		pfn_vkGetScreenBufferPropertiesQNX = (PFN_vkGetScreenBufferPropertiesQNX)vkGetDeviceProcAddr(device, "vkGetScreenBufferPropertiesQNX");
#endif
#if defined(VK_AMDX_shader_enqueue) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_synchronization2) && defined(VK_KHR_pipeline_library) && defined(VK_KHR_spirv_1_4))
		pfn_vkGetExecutionGraphPipelineScratchSizeAMDX = (PFN_vkGetExecutionGraphPipelineScratchSizeAMDX)vkGetDeviceProcAddr(device, "vkGetExecutionGraphPipelineScratchSizeAMDX");
		pfn_vkGetExecutionGraphPipelineNodeIndexAMDX = (PFN_vkGetExecutionGraphPipelineNodeIndexAMDX)vkGetDeviceProcAddr(device, "vkGetExecutionGraphPipelineNodeIndexAMDX");
		pfn_vkCreateExecutionGraphPipelinesAMDX = (PFN_vkCreateExecutionGraphPipelinesAMDX)vkGetDeviceProcAddr(device, "vkCreateExecutionGraphPipelinesAMDX");
#endif
#if defined(VK_NV_low_latency2) && (defined(VK_VERSION_1_2) || defined(VK_KHR_timeline_semaphore))
		pfn_vkSetLatencySleepModeNV = (PFN_vkSetLatencySleepModeNV)vkGetDeviceProcAddr(device, "vkSetLatencySleepModeNV");
		pfn_vkLatencySleepNV = (PFN_vkLatencySleepNV)vkGetDeviceProcAddr(device, "vkLatencySleepNV");
		pfn_vkSetLatencyMarkerNV = (PFN_vkSetLatencyMarkerNV)vkGetDeviceProcAddr(device, "vkSetLatencyMarkerNV");
		pfn_vkGetLatencyTimingsNV = (PFN_vkGetLatencyTimingsNV)vkGetDeviceProcAddr(device, "vkGetLatencyTimingsNV");
#endif
	}

	VulkanLoader::~VulkanLoader() {
		// Free the dynamic lib if no loaders are left
		if(!--loaderCount)
			vulkanLib.FreeLib();
	}

#if defined(VK_VERSION_1_0)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateInstance(const VkInstanceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkInstance* pInstance) const {
		if(!this || !pfn_vkCreateInstance) {
			return staticPfn_vkCreateInstance(pCreateInfo, pAllocator, pInstance);
		}
		return pfn_vkCreateInstance(pCreateInfo, pAllocator, pInstance);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyInstance(VkInstance instance, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyInstance) {
			staticPfn_vkDestroyInstance(instance, pAllocator);
			return;
		}
		pfn_vkDestroyInstance(instance, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkEnumeratePhysicalDevices(VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices) const {
		if(!this || !pfn_vkEnumeratePhysicalDevices) {
			return staticPfn_vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);
		}
		return pfn_vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);
	}
	VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL VulkanLoader::vkGetDeviceProcAddr(VkDevice device, const char* pName) const {
		if(!this || !pfn_vkGetDeviceProcAddr) {
			return staticPfn_vkGetDeviceProcAddr(device, pName);
		}
		return pfn_vkGetDeviceProcAddr(device, pName);
	}
	VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL VulkanLoader::vkGetInstanceProcAddr(VkInstance instance, const char* pName) const {
		if(!this || !pfn_vkGetInstanceProcAddr) {
			return staticPfn_vkGetInstanceProcAddr(instance, pName);
		}
		return pfn_vkGetInstanceProcAddr(instance, pName);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceProperties) {
			staticPfn_vkGetPhysicalDeviceProperties(physicalDevice, pProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceProperties(physicalDevice, pProperties);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceQueueFamilyProperties) {
			staticPfn_vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceMemoryProperties) {
			staticPfn_vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures) const {
		if(!this || !pfn_vkGetPhysicalDeviceFeatures) {
			staticPfn_vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures);
			return;
		}
		pfn_vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceFormatProperties) {
			staticPfn_vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceImageFormatProperties) {
			return staticPfn_vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
		}
		return pfn_vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice) const {
		if(!this || !pfn_vkCreateDevice) {
			return staticPfn_vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);
		}
		return pfn_vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyDevice(VkDevice device, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyDevice) {
			staticPfn_vkDestroyDevice(device, pAllocator);
			return;
		}
		pfn_vkDestroyDevice(device, pAllocator);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkEnumerateInstanceVersion(uint32_t* pApiVersion) const {
		if(!this || !pfn_vkEnumerateInstanceVersion) {
			return staticPfn_vkEnumerateInstanceVersion(pApiVersion);
		}
		return pfn_vkEnumerateInstanceVersion(pApiVersion);
	}
#endif
#if defined(VK_VERSION_1_0)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkEnumerateInstanceLayerProperties(uint32_t* pPropertyCount, VkLayerProperties* pProperties) const {
		if(!this || !pfn_vkEnumerateInstanceLayerProperties) {
			return staticPfn_vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties);
		}
		return pfn_vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkEnumerateInstanceExtensionProperties(const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties) const {
		if(!this || !pfn_vkEnumerateInstanceExtensionProperties) {
			return staticPfn_vkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);
		}
		return pfn_vkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties) const {
		if(!this || !pfn_vkEnumerateDeviceLayerProperties) {
			return staticPfn_vkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);
		}
		return pfn_vkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties) const {
		if(!this || !pfn_vkEnumerateDeviceExtensionProperties) {
			return staticPfn_vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties);
		}
		return pfn_vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue) const {
		if(!this || !pfn_vkGetDeviceQueue) {
			staticPfn_vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
			return;
		}
		pfn_vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo* pSubmits, VkFence fence) const {
		if(!this || !pfn_vkQueueSubmit) {
			return staticPfn_vkQueueSubmit(queue, submitCount, pSubmits, fence);
		}
		return pfn_vkQueueSubmit(queue, submitCount, pSubmits, fence);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkQueueWaitIdle(VkQueue queue) const {
		if(!this || !pfn_vkQueueWaitIdle) {
			return staticPfn_vkQueueWaitIdle(queue);
		}
		return pfn_vkQueueWaitIdle(queue);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkDeviceWaitIdle(VkDevice device) const {
		if(!this || !pfn_vkDeviceWaitIdle) {
			return staticPfn_vkDeviceWaitIdle(device);
		}
		return pfn_vkDeviceWaitIdle(device);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkAllocateMemory(VkDevice device, const VkMemoryAllocateInfo* pAllocateInfo, const VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory) const {
		if(!this || !pfn_vkAllocateMemory) {
			return staticPfn_vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory);
		}
		return pfn_vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkFreeMemory(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkFreeMemory) {
			staticPfn_vkFreeMemory(device, memory, pAllocator);
			return;
		}
		pfn_vkFreeMemory(device, memory, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData) const {
		if(!this || !pfn_vkMapMemory) {
			return staticPfn_vkMapMemory(device, memory, offset, size, flags, ppData);
		}
		return pfn_vkMapMemory(device, memory, offset, size, flags, ppData);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkUnmapMemory(VkDevice device, VkDeviceMemory memory) const {
		if(!this || !pfn_vkUnmapMemory) {
			staticPfn_vkUnmapMemory(device, memory);
			return;
		}
		pfn_vkUnmapMemory(device, memory);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkFlushMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges) const {
		if(!this || !pfn_vkFlushMappedMemoryRanges) {
			return staticPfn_vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
		}
		return pfn_vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkInvalidateMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges) const {
		if(!this || !pfn_vkInvalidateMappedMemoryRanges) {
			return staticPfn_vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
		}
		return pfn_vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes) const {
		if(!this || !pfn_vkGetDeviceMemoryCommitment) {
			staticPfn_vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);
			return;
		}
		pfn_vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements) const {
		if(!this || !pfn_vkGetBufferMemoryRequirements) {
			staticPfn_vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);
			return;
		}
		pfn_vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset) const {
		if(!this || !pfn_vkBindBufferMemory) {
			return staticPfn_vkBindBufferMemory(device, buffer, memory, memoryOffset);
		}
		return pfn_vkBindBufferMemory(device, buffer, memory, memoryOffset);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements) const {
		if(!this || !pfn_vkGetImageMemoryRequirements) {
			staticPfn_vkGetImageMemoryRequirements(device, image, pMemoryRequirements);
			return;
		}
		pfn_vkGetImageMemoryRequirements(device, image, pMemoryRequirements);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset) const {
		if(!this || !pfn_vkBindImageMemory) {
			return staticPfn_vkBindImageMemory(device, image, memory, memoryOffset);
		}
		return pfn_vkBindImageMemory(device, image, memory, memoryOffset);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements) const {
		if(!this || !pfn_vkGetImageSparseMemoryRequirements) {
			staticPfn_vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
			return;
		}
		pfn_vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceSparseImageFormatProperties) {
			staticPfn_vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkQueueBindSparse(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo* pBindInfo, VkFence fence) const {
		if(!this || !pfn_vkQueueBindSparse) {
			return staticPfn_vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);
		}
		return pfn_vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateFence(VkDevice device, const VkFenceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence) const {
		if(!this || !pfn_vkCreateFence) {
			return staticPfn_vkCreateFence(device, pCreateInfo, pAllocator, pFence);
		}
		return pfn_vkCreateFence(device, pCreateInfo, pAllocator, pFence);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyFence(VkDevice device, VkFence fence, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyFence) {
			staticPfn_vkDestroyFence(device, fence, pAllocator);
			return;
		}
		pfn_vkDestroyFence(device, fence, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkResetFences(VkDevice device, uint32_t fenceCount, const VkFence* pFences) const {
		if(!this || !pfn_vkResetFences) {
			return staticPfn_vkResetFences(device, fenceCount, pFences);
		}
		return pfn_vkResetFences(device, fenceCount, pFences);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetFenceStatus(VkDevice device, VkFence fence) const {
		if(!this || !pfn_vkGetFenceStatus) {
			return staticPfn_vkGetFenceStatus(device, fence);
		}
		return pfn_vkGetFenceStatus(device, fence);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkWaitForFences(VkDevice device, uint32_t fenceCount, const VkFence* pFences, VkBool32 waitAll, uint64_t timeout) const {
		if(!this || !pfn_vkWaitForFences) {
			return staticPfn_vkWaitForFences(device, fenceCount, pFences, waitAll, timeout);
		}
		return pfn_vkWaitForFences(device, fenceCount, pFences, waitAll, timeout);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateSemaphore(VkDevice device, const VkSemaphoreCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore) const {
		if(!this || !pfn_vkCreateSemaphore) {
			return staticPfn_vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);
		}
		return pfn_vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroySemaphore) {
			staticPfn_vkDestroySemaphore(device, semaphore, pAllocator);
			return;
		}
		pfn_vkDestroySemaphore(device, semaphore, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateEvent(VkDevice device, const VkEventCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkEvent* pEvent) const {
		if(!this || !pfn_vkCreateEvent) {
			return staticPfn_vkCreateEvent(device, pCreateInfo, pAllocator, pEvent);
		}
		return pfn_vkCreateEvent(device, pCreateInfo, pAllocator, pEvent);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyEvent(VkDevice device, VkEvent event, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyEvent) {
			staticPfn_vkDestroyEvent(device, event, pAllocator);
			return;
		}
		pfn_vkDestroyEvent(device, event, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetEventStatus(VkDevice device, VkEvent event) const {
		if(!this || !pfn_vkGetEventStatus) {
			return staticPfn_vkGetEventStatus(device, event);
		}
		return pfn_vkGetEventStatus(device, event);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkSetEvent(VkDevice device, VkEvent event) const {
		if(!this || !pfn_vkSetEvent) {
			return staticPfn_vkSetEvent(device, event);
		}
		return pfn_vkSetEvent(device, event);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkResetEvent(VkDevice device, VkEvent event) const {
		if(!this || !pfn_vkResetEvent) {
			return staticPfn_vkResetEvent(device, event);
		}
		return pfn_vkResetEvent(device, event);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateQueryPool(VkDevice device, const VkQueryPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool) const {
		if(!this || !pfn_vkCreateQueryPool) {
			return staticPfn_vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);
		}
		return pfn_vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyQueryPool) {
			staticPfn_vkDestroyQueryPool(device, queryPool, pAllocator);
			return;
		}
		pfn_vkDestroyQueryPool(device, queryPool, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags) const {
		if(!this || !pfn_vkGetQueryPoolResults) {
			return staticPfn_vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
		}
		return pfn_vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
	}
#endif
#if defined(VK_VERSION_1_2)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) const {
		if(!this || !pfn_vkResetQueryPool) {
			staticPfn_vkResetQueryPool(device, queryPool, firstQuery, queryCount);
			return;
		}
		pfn_vkResetQueryPool(device, queryPool, firstQuery, queryCount);
	}
#endif
#if defined(VK_EXT_host_query_reset) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) const {
		if(!this || !pfn_vkResetQueryPoolEXT) {
			staticPfn_vkResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);
			return;
		}
		pfn_vkResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);
	}
#endif
#if defined(VK_VERSION_1_0)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateBuffer(VkDevice device, const VkBufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer) const {
		if(!this || !pfn_vkCreateBuffer) {
			return staticPfn_vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer);
		}
		return pfn_vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyBuffer(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyBuffer) {
			staticPfn_vkDestroyBuffer(device, buffer, pAllocator);
			return;
		}
		pfn_vkDestroyBuffer(device, buffer, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateBufferView(VkDevice device, const VkBufferViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferView* pView) const {
		if(!this || !pfn_vkCreateBufferView) {
			return staticPfn_vkCreateBufferView(device, pCreateInfo, pAllocator, pView);
		}
		return pfn_vkCreateBufferView(device, pCreateInfo, pAllocator, pView);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyBufferView(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyBufferView) {
			staticPfn_vkDestroyBufferView(device, bufferView, pAllocator);
			return;
		}
		pfn_vkDestroyBufferView(device, bufferView, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateImage(VkDevice device, const VkImageCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImage* pImage) const {
		if(!this || !pfn_vkCreateImage) {
			return staticPfn_vkCreateImage(device, pCreateInfo, pAllocator, pImage);
		}
		return pfn_vkCreateImage(device, pCreateInfo, pAllocator, pImage);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyImage(VkDevice device, VkImage image, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyImage) {
			staticPfn_vkDestroyImage(device, image, pAllocator);
			return;
		}
		pfn_vkDestroyImage(device, image, pAllocator);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetImageSubresourceLayout(VkDevice device, VkImage image, const VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout) const {
		if(!this || !pfn_vkGetImageSubresourceLayout) {
			staticPfn_vkGetImageSubresourceLayout(device, image, pSubresource, pLayout);
			return;
		}
		pfn_vkGetImageSubresourceLayout(device, image, pSubresource, pLayout);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateImageView(VkDevice device, const VkImageViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImageView* pView) const {
		if(!this || !pfn_vkCreateImageView) {
			return staticPfn_vkCreateImageView(device, pCreateInfo, pAllocator, pView);
		}
		return pfn_vkCreateImageView(device, pCreateInfo, pAllocator, pView);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyImageView(VkDevice device, VkImageView imageView, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyImageView) {
			staticPfn_vkDestroyImageView(device, imageView, pAllocator);
			return;
		}
		pfn_vkDestroyImageView(device, imageView, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateShaderModule(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule) const {
		if(!this || !pfn_vkCreateShaderModule) {
			return staticPfn_vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);
		}
		return pfn_vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyShaderModule) {
			staticPfn_vkDestroyShaderModule(device, shaderModule, pAllocator);
			return;
		}
		pfn_vkDestroyShaderModule(device, shaderModule, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreatePipelineCache(VkDevice device, const VkPipelineCacheCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache) const {
		if(!this || !pfn_vkCreatePipelineCache) {
			return staticPfn_vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);
		}
		return pfn_vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyPipelineCache) {
			staticPfn_vkDestroyPipelineCache(device, pipelineCache, pAllocator);
			return;
		}
		pfn_vkDestroyPipelineCache(device, pipelineCache, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData) const {
		if(!this || !pfn_vkGetPipelineCacheData) {
			return staticPfn_vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData);
		}
		return pfn_vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache* pSrcCaches) const {
		if(!this || !pfn_vkMergePipelineCaches) {
			return staticPfn_vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);
		}
		return pfn_vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) const {
		if(!this || !pfn_vkCreateGraphicsPipelines) {
			return staticPfn_vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
		}
		return pfn_vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) const {
		if(!this || !pfn_vkCreateComputePipelines) {
			return staticPfn_vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
		}
		return pfn_vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}
#endif
#if defined(VK_HUAWEI_subpass_shading) && (defined(VK_KHR_create_renderpass2) && defined(VK_KHR_synchronization2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice device, VkRenderPass renderpass, VkExtent2D* pMaxWorkgroupSize) const {
		if(!this || !pfn_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI) {
			return staticPfn_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device, renderpass, pMaxWorkgroupSize);
		}
		return pfn_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device, renderpass, pMaxWorkgroupSize);
	}
#endif
#if defined(VK_VERSION_1_0)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyPipeline(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyPipeline) {
			staticPfn_vkDestroyPipeline(device, pipeline, pAllocator);
			return;
		}
		pfn_vkDestroyPipeline(device, pipeline, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreatePipelineLayout(VkDevice device, const VkPipelineLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout) const {
		if(!this || !pfn_vkCreatePipelineLayout) {
			return staticPfn_vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);
		}
		return pfn_vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyPipelineLayout) {
			staticPfn_vkDestroyPipelineLayout(device, pipelineLayout, pAllocator);
			return;
		}
		pfn_vkDestroyPipelineLayout(device, pipelineLayout, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateSampler(VkDevice device, const VkSamplerCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSampler* pSampler) const {
		if(!this || !pfn_vkCreateSampler) {
			return staticPfn_vkCreateSampler(device, pCreateInfo, pAllocator, pSampler);
		}
		return pfn_vkCreateSampler(device, pCreateInfo, pAllocator, pSampler);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroySampler(VkDevice device, VkSampler sampler, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroySampler) {
			staticPfn_vkDestroySampler(device, sampler, pAllocator);
			return;
		}
		pfn_vkDestroySampler(device, sampler, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateDescriptorSetLayout(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout) const {
		if(!this || !pfn_vkCreateDescriptorSetLayout) {
			return staticPfn_vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);
		}
		return pfn_vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyDescriptorSetLayout) {
			staticPfn_vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
			return;
		}
		pfn_vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateDescriptorPool(VkDevice device, const VkDescriptorPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool) const {
		if(!this || !pfn_vkCreateDescriptorPool) {
			return staticPfn_vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);
		}
		return pfn_vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyDescriptorPool) {
			staticPfn_vkDestroyDescriptorPool(device, descriptorPool, pAllocator);
			return;
		}
		pfn_vkDestroyDescriptorPool(device, descriptorPool, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags) const {
		if(!this || !pfn_vkResetDescriptorPool) {
			return staticPfn_vkResetDescriptorPool(device, descriptorPool, flags);
		}
		return pfn_vkResetDescriptorPool(device, descriptorPool, flags);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkAllocateDescriptorSets(VkDevice device, const VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets) const {
		if(!this || !pfn_vkAllocateDescriptorSets) {
			return staticPfn_vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);
		}
		return pfn_vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets) const {
		if(!this || !pfn_vkFreeDescriptorSets) {
			return staticPfn_vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);
		}
		return pfn_vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet* pDescriptorCopies) const {
		if(!this || !pfn_vkUpdateDescriptorSets) {
			staticPfn_vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
			return;
		}
		pfn_vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateFramebuffer(VkDevice device, const VkFramebufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer) const {
		if(!this || !pfn_vkCreateFramebuffer) {
			return staticPfn_vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);
		}
		return pfn_vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyFramebuffer) {
			staticPfn_vkDestroyFramebuffer(device, framebuffer, pAllocator);
			return;
		}
		pfn_vkDestroyFramebuffer(device, framebuffer, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateRenderPass(VkDevice device, const VkRenderPassCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) const {
		if(!this || !pfn_vkCreateRenderPass) {
			return staticPfn_vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);
		}
		return pfn_vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyRenderPass) {
			staticPfn_vkDestroyRenderPass(device, renderPass, pAllocator);
			return;
		}
		pfn_vkDestroyRenderPass(device, renderPass, pAllocator);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity) const {
		if(!this || !pfn_vkGetRenderAreaGranularity) {
			staticPfn_vkGetRenderAreaGranularity(device, renderPass, pGranularity);
			return;
		}
		pfn_vkGetRenderAreaGranularity(device, renderPass, pGranularity);
	}
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetRenderingAreaGranularityKHR(VkDevice device, const VkRenderingAreaInfoKHR* pRenderingAreaInfo, VkExtent2D* pGranularity) const {
		if(!this || !pfn_vkGetRenderingAreaGranularityKHR) {
			staticPfn_vkGetRenderingAreaGranularityKHR(device, pRenderingAreaInfo, pGranularity);
			return;
		}
		pfn_vkGetRenderingAreaGranularityKHR(device, pRenderingAreaInfo, pGranularity);
	}
#endif
#if defined(VK_VERSION_1_0)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateCommandPool(VkDevice device, const VkCommandPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool) const {
		if(!this || !pfn_vkCreateCommandPool) {
			return staticPfn_vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);
		}
		return pfn_vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyCommandPool) {
			staticPfn_vkDestroyCommandPool(device, commandPool, pAllocator);
			return;
		}
		pfn_vkDestroyCommandPool(device, commandPool, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags) const {
		if(!this || !pfn_vkResetCommandPool) {
			return staticPfn_vkResetCommandPool(device, commandPool, flags);
		}
		return pfn_vkResetCommandPool(device, commandPool, flags);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkAllocateCommandBuffers(VkDevice device, const VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers) const {
		if(!this || !pfn_vkAllocateCommandBuffers) {
			return staticPfn_vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);
		}
		return pfn_vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers) const {
		if(!this || !pfn_vkFreeCommandBuffers) {
			staticPfn_vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);
			return;
		}
		pfn_vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo) const {
		if(!this || !pfn_vkBeginCommandBuffer) {
			return staticPfn_vkBeginCommandBuffer(commandBuffer, pBeginInfo);
		}
		return pfn_vkBeginCommandBuffer(commandBuffer, pBeginInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkEndCommandBuffer(VkCommandBuffer commandBuffer) const {
		if(!this || !pfn_vkEndCommandBuffer) {
			return staticPfn_vkEndCommandBuffer(commandBuffer);
		}
		return pfn_vkEndCommandBuffer(commandBuffer);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags) const {
		if(!this || !pfn_vkResetCommandBuffer) {
			return staticPfn_vkResetCommandBuffer(commandBuffer, flags);
		}
		return pfn_vkResetCommandBuffer(commandBuffer, flags);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) const {
		if(!this || !pfn_vkCmdBindPipeline) {
			staticPfn_vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
			return;
		}
		pfn_vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
	}
#endif
#if defined(VK_EXT_attachment_feedback_loop_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_EXT_attachment_feedback_loop_layout))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetAttachmentFeedbackLoopEnableEXT(VkCommandBuffer commandBuffer, VkImageAspectFlags aspectMask) const {
		if(!this || !pfn_vkCmdSetAttachmentFeedbackLoopEnableEXT) {
			staticPfn_vkCmdSetAttachmentFeedbackLoopEnableEXT(commandBuffer, aspectMask);
			return;
		}
		pfn_vkCmdSetAttachmentFeedbackLoopEnableEXT(commandBuffer, aspectMask);
	}
#endif
#if defined(VK_VERSION_1_0)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports) const {
		if(!this || !pfn_vkCmdSetViewport) {
			staticPfn_vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
			return;
		}
		pfn_vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors) const {
		if(!this || !pfn_vkCmdSetScissor) {
			staticPfn_vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
			return;
		}
		pfn_vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth) const {
		if(!this || !pfn_vkCmdSetLineWidth) {
			staticPfn_vkCmdSetLineWidth(commandBuffer, lineWidth);
			return;
		}
		pfn_vkCmdSetLineWidth(commandBuffer, lineWidth);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) const {
		if(!this || !pfn_vkCmdSetDepthBias) {
			staticPfn_vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
			return;
		}
		pfn_vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4]) const {
		if(!this || !pfn_vkCmdSetBlendConstants) {
			staticPfn_vkCmdSetBlendConstants(commandBuffer, blendConstants);
			return;
		}
		pfn_vkCmdSetBlendConstants(commandBuffer, blendConstants);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds) const {
		if(!this || !pfn_vkCmdSetDepthBounds) {
			staticPfn_vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
			return;
		}
		pfn_vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask) const {
		if(!this || !pfn_vkCmdSetStencilCompareMask) {
			staticPfn_vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
			return;
		}
		pfn_vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask) const {
		if(!this || !pfn_vkCmdSetStencilWriteMask) {
			staticPfn_vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
			return;
		}
		pfn_vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference) const {
		if(!this || !pfn_vkCmdSetStencilReference) {
			staticPfn_vkCmdSetStencilReference(commandBuffer, faceMask, reference);
			return;
		}
		pfn_vkCmdSetStencilReference(commandBuffer, faceMask, reference);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets) const {
		if(!this || !pfn_vkCmdBindDescriptorSets) {
			staticPfn_vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
			return;
		}
		pfn_vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType) const {
		if(!this || !pfn_vkCmdBindIndexBuffer) {
			staticPfn_vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
			return;
		}
		pfn_vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets) const {
		if(!this || !pfn_vkCmdBindVertexBuffers) {
			staticPfn_vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
			return;
		}
		pfn_vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) const {
		if(!this || !pfn_vkCmdDraw) {
			staticPfn_vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
			return;
		}
		pfn_vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance) const {
		if(!this || !pfn_vkCmdDrawIndexed) {
			staticPfn_vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
			return;
		}
		pfn_vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
	}
#endif
#if defined(VK_EXT_multi_draw) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawInfoEXT* pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride) const {
		if(!this || !pfn_vkCmdDrawMultiEXT) {
			staticPfn_vkCmdDrawMultiEXT(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);
			return;
		}
		pfn_vkCmdDrawMultiEXT(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawIndexedInfoEXT* pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, const int32_t* pVertexOffset) const {
		if(!this || !pfn_vkCmdDrawMultiIndexedEXT) {
			staticPfn_vkCmdDrawMultiIndexedEXT(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset);
			return;
		}
		pfn_vkCmdDrawMultiIndexedEXT(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset);
	}
#endif
#if defined(VK_VERSION_1_0)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) const {
		if(!this || !pfn_vkCmdDrawIndirect) {
			staticPfn_vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
			return;
		}
		pfn_vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) const {
		if(!this || !pfn_vkCmdDrawIndexedIndirect) {
			staticPfn_vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
			return;
		}
		pfn_vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) const {
		if(!this || !pfn_vkCmdDispatch) {
			staticPfn_vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
			return;
		}
		pfn_vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) const {
		if(!this || !pfn_vkCmdDispatchIndirect) {
			staticPfn_vkCmdDispatchIndirect(commandBuffer, buffer, offset);
			return;
		}
		pfn_vkCmdDispatchIndirect(commandBuffer, buffer, offset);
	}
#endif
#if defined(VK_HUAWEI_subpass_shading) && (defined(VK_KHR_create_renderpass2) && defined(VK_KHR_synchronization2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer) const {
		if(!this || !pfn_vkCmdSubpassShadingHUAWEI) {
			staticPfn_vkCmdSubpassShadingHUAWEI(commandBuffer);
			return;
		}
		pfn_vkCmdSubpassShadingHUAWEI(commandBuffer);
	}
#endif
#if defined(VK_HUAWEI_cluster_culling_shader) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawClusterHUAWEI(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) const {
		if(!this || !pfn_vkCmdDrawClusterHUAWEI) {
			staticPfn_vkCmdDrawClusterHUAWEI(commandBuffer, groupCountX, groupCountY, groupCountZ);
			return;
		}
		pfn_vkCmdDrawClusterHUAWEI(commandBuffer, groupCountX, groupCountY, groupCountZ);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawClusterIndirectHUAWEI(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) const {
		if(!this || !pfn_vkCmdDrawClusterIndirectHUAWEI) {
			staticPfn_vkCmdDrawClusterIndirectHUAWEI(commandBuffer, buffer, offset);
			return;
		}
		pfn_vkCmdDrawClusterIndirectHUAWEI(commandBuffer, buffer, offset);
	}
#endif
#if defined(VK_NV_device_generated_commands_compute) && (defined(VK_NV_device_generated_commands))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdUpdatePipelineIndirectBufferNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) const {
		if(!this || !pfn_vkCmdUpdatePipelineIndirectBufferNV) {
			staticPfn_vkCmdUpdatePipelineIndirectBufferNV(commandBuffer, pipelineBindPoint, pipeline);
			return;
		}
		pfn_vkCmdUpdatePipelineIndirectBufferNV(commandBuffer, pipelineBindPoint, pipeline);
	}
#endif
#if defined(VK_VERSION_1_0)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions) const {
		if(!this || !pfn_vkCmdCopyBuffer) {
			staticPfn_vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
			return;
		}
		pfn_vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions) const {
		if(!this || !pfn_vkCmdCopyImage) {
			staticPfn_vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
			return;
		}
		pfn_vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter) const {
		if(!this || !pfn_vkCmdBlitImage) {
			staticPfn_vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
			return;
		}
		pfn_vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions) const {
		if(!this || !pfn_vkCmdCopyBufferToImage) {
			staticPfn_vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
			return;
		}
		pfn_vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions) const {
		if(!this || !pfn_vkCmdCopyImageToBuffer) {
			staticPfn_vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
			return;
		}
		pfn_vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
	}
#endif
#if defined(VK_NV_copy_memory_indirect) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyMemoryIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride) const {
		if(!this || !pfn_vkCmdCopyMemoryIndirectNV) {
			staticPfn_vkCmdCopyMemoryIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride);
			return;
		}
		pfn_vkCmdCopyMemoryIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyMemoryToImageIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride, VkImage dstImage, VkImageLayout dstImageLayout, const VkImageSubresourceLayers* pImageSubresources) const {
		if(!this || !pfn_vkCmdCopyMemoryToImageIndirectNV) {
			staticPfn_vkCmdCopyMemoryToImageIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride, dstImage, dstImageLayout, pImageSubresources);
			return;
		}
		pfn_vkCmdCopyMemoryToImageIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride, dstImage, dstImageLayout, pImageSubresources);
	}
#endif
#if defined(VK_VERSION_1_0)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData) const {
		if(!this || !pfn_vkCmdUpdateBuffer) {
			staticPfn_vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
			return;
		}
		pfn_vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data) const {
		if(!this || !pfn_vkCmdFillBuffer) {
			staticPfn_vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
			return;
		}
		pfn_vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges) const {
		if(!this || !pfn_vkCmdClearColorImage) {
			staticPfn_vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
			return;
		}
		pfn_vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges) const {
		if(!this || !pfn_vkCmdClearDepthStencilImage) {
			staticPfn_vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
			return;
		}
		pfn_vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects) const {
		if(!this || !pfn_vkCmdClearAttachments) {
			staticPfn_vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
			return;
		}
		pfn_vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions) const {
		if(!this || !pfn_vkCmdResolveImage) {
			staticPfn_vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
			return;
		}
		pfn_vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) const {
		if(!this || !pfn_vkCmdSetEvent) {
			staticPfn_vkCmdSetEvent(commandBuffer, event, stageMask);
			return;
		}
		pfn_vkCmdSetEvent(commandBuffer, event, stageMask);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) const {
		if(!this || !pfn_vkCmdResetEvent) {
			staticPfn_vkCmdResetEvent(commandBuffer, event, stageMask);
			return;
		}
		pfn_vkCmdResetEvent(commandBuffer, event, stageMask);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers) const {
		if(!this || !pfn_vkCmdWaitEvents) {
			staticPfn_vkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
			return;
		}
		pfn_vkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers) const {
		if(!this || !pfn_vkCmdPipelineBarrier) {
			staticPfn_vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
			return;
		}
		pfn_vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags) const {
		if(!this || !pfn_vkCmdBeginQuery) {
			staticPfn_vkCmdBeginQuery(commandBuffer, queryPool, query, flags);
			return;
		}
		pfn_vkCmdBeginQuery(commandBuffer, queryPool, query, flags);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query) const {
		if(!this || !pfn_vkCmdEndQuery) {
			staticPfn_vkCmdEndQuery(commandBuffer, queryPool, query);
			return;
		}
		pfn_vkCmdEndQuery(commandBuffer, queryPool, query);
	}
#endif
#if defined(VK_EXT_conditional_rendering) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin) const {
		if(!this || !pfn_vkCmdBeginConditionalRenderingEXT) {
			staticPfn_vkCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);
			return;
		}
		pfn_vkCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer) const {
		if(!this || !pfn_vkCmdEndConditionalRenderingEXT) {
			staticPfn_vkCmdEndConditionalRenderingEXT(commandBuffer);
			return;
		}
		pfn_vkCmdEndConditionalRenderingEXT(commandBuffer);
	}
#endif
#if defined(VK_VERSION_1_0)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) const {
		if(!this || !pfn_vkCmdResetQueryPool) {
			staticPfn_vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
			return;
		}
		pfn_vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query) const {
		if(!this || !pfn_vkCmdWriteTimestamp) {
			staticPfn_vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
			return;
		}
		pfn_vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags) const {
		if(!this || !pfn_vkCmdCopyQueryPoolResults) {
			staticPfn_vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
			return;
		}
		pfn_vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues) const {
		if(!this || !pfn_vkCmdPushConstants) {
			staticPfn_vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
			return;
		}
		pfn_vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents) const {
		if(!this || !pfn_vkCmdBeginRenderPass) {
			staticPfn_vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
			return;
		}
		pfn_vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents) const {
		if(!this || !pfn_vkCmdNextSubpass) {
			staticPfn_vkCmdNextSubpass(commandBuffer, contents);
			return;
		}
		pfn_vkCmdNextSubpass(commandBuffer, contents);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdEndRenderPass(VkCommandBuffer commandBuffer) const {
		if(!this || !pfn_vkCmdEndRenderPass) {
			staticPfn_vkCmdEndRenderPass(commandBuffer);
			return;
		}
		pfn_vkCmdEndRenderPass(commandBuffer);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers) const {
		if(!this || !pfn_vkCmdExecuteCommands) {
			staticPfn_vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
			return;
		}
		pfn_vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
	}
#endif
#if defined(VK_KHR_android_surface) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateAndroidSurfaceKHR(VkInstance instance, const VkAndroidSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) const {
		if(!this || !pfn_vkCreateAndroidSurfaceKHR) {
			return staticPfn_vkCreateAndroidSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
		}
		return pfn_vkCreateAndroidSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}
#endif
#if defined(VK_KHR_display) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceDisplayPropertiesKHR) {
			return staticPfn_vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
		}
		return pfn_vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceDisplayPlanePropertiesKHR) {
			return staticPfn_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties);
		}
		return pfn_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays) const {
		if(!this || !pfn_vkGetDisplayPlaneSupportedDisplaysKHR) {
			return staticPfn_vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays);
		}
		return pfn_vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties) const {
		if(!this || !pfn_vkGetDisplayModePropertiesKHR) {
			return staticPfn_vkGetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);
		}
		return pfn_vkGetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode) const {
		if(!this || !pfn_vkCreateDisplayModeKHR) {
			return staticPfn_vkCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);
		}
		return pfn_vkCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities) const {
		if(!this || !pfn_vkGetDisplayPlaneCapabilitiesKHR) {
			return staticPfn_vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);
		}
		return pfn_vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, const VkDisplaySurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) const {
		if(!this || !pfn_vkCreateDisplayPlaneSurfaceKHR) {
			return staticPfn_vkCreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
		}
		return pfn_vkCreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}
#endif
#if defined(VK_KHR_display_swapchain) && (defined(VK_KHR_swapchain) && defined(VK_KHR_display))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateSharedSwapchainsKHR(VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains) const {
		if(!this || !pfn_vkCreateSharedSwapchainsKHR) {
			return staticPfn_vkCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
		}
		return pfn_vkCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
	}
#endif
#if defined(VK_KHR_surface)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroySurfaceKHR) {
			staticPfn_vkDestroySurfaceKHR(instance, surface, pAllocator);
			return;
		}
		pfn_vkDestroySurfaceKHR(instance, surface, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported) const {
		if(!this || !pfn_vkGetPhysicalDeviceSurfaceSupportKHR) {
			return staticPfn_vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
		}
		return pfn_vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities) const {
		if(!this || !pfn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR) {
			return staticPfn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
		}
		return pfn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats) const {
		if(!this || !pfn_vkGetPhysicalDeviceSurfaceFormatsKHR) {
			return staticPfn_vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
		}
		return pfn_vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes) const {
		if(!this || !pfn_vkGetPhysicalDeviceSurfacePresentModesKHR) {
			return staticPfn_vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
		}
		return pfn_vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
	}
#endif
#if defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateSwapchainKHR(VkDevice device, const VkSwapchainCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain) const {
		if(!this || !pfn_vkCreateSwapchainKHR) {
			return staticPfn_vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);
		}
		return pfn_vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroySwapchainKHR) {
			staticPfn_vkDestroySwapchainKHR(device, swapchain, pAllocator);
			return;
		}
		pfn_vkDestroySwapchainKHR(device, swapchain, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages) const {
		if(!this || !pfn_vkGetSwapchainImagesKHR) {
			return staticPfn_vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);
		}
		return pfn_vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex) const {
		if(!this || !pfn_vkAcquireNextImageKHR) {
			return staticPfn_vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);
		}
		return pfn_vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkQueuePresentKHR(VkQueue queue, const VkPresentInfoKHR* pPresentInfo) const {
		if(!this || !pfn_vkQueuePresentKHR) {
			return staticPfn_vkQueuePresentKHR(queue, pPresentInfo);
		}
		return pfn_vkQueuePresentKHR(queue, pPresentInfo);
	}
#endif
#if defined(VK_NN_vi_surface) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateViSurfaceNN(VkInstance instance, const VkViSurfaceCreateInfoNN* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) const {
		if(!this || !pfn_vkCreateViSurfaceNN) {
			return staticPfn_vkCreateViSurfaceNN(instance, pCreateInfo, pAllocator, pSurface);
		}
		return pfn_vkCreateViSurfaceNN(instance, pCreateInfo, pAllocator, pSurface);
	}
#endif
#if defined(VK_KHR_wayland_surface) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateWaylandSurfaceKHR(VkInstance instance, const VkWaylandSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) const {
		if(!this || !pfn_vkCreateWaylandSurfaceKHR) {
			return staticPfn_vkCreateWaylandSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
		}
		return pfn_vkCreateWaylandSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}
	VKAPI_ATTR VkBool32 VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, struct wl_display* display) const {
		if(!this || !pfn_vkGetPhysicalDeviceWaylandPresentationSupportKHR) {
			return staticPfn_vkGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice, queueFamilyIndex, display);
		}
		return pfn_vkGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice, queueFamilyIndex, display);
	}
#endif
#if defined(VK_KHR_win32_surface) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateWin32SurfaceKHR(VkInstance instance, const VkWin32SurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) const {
		if(!this || !pfn_vkCreateWin32SurfaceKHR) {
			return staticPfn_vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
		}
		return pfn_vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}
	VKAPI_ATTR VkBool32 VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex) const {
		if(!this || !pfn_vkGetPhysicalDeviceWin32PresentationSupportKHR) {
			return staticPfn_vkGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice, queueFamilyIndex);
		}
		return pfn_vkGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice, queueFamilyIndex);
	}
#endif
#if defined(VK_KHR_xlib_surface) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateXlibSurfaceKHR(VkInstance instance, const VkXlibSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) const {
		if(!this || !pfn_vkCreateXlibSurfaceKHR) {
			return staticPfn_vkCreateXlibSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
		}
		return pfn_vkCreateXlibSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}
	VKAPI_ATTR VkBool32 VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, Display* dpy, VisualID visualID) const {
		if(!this || !pfn_vkGetPhysicalDeviceXlibPresentationSupportKHR) {
			return staticPfn_vkGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice, queueFamilyIndex, dpy, visualID);
		}
		return pfn_vkGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice, queueFamilyIndex, dpy, visualID);
	}
#endif
#if defined(VK_KHR_xcb_surface) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateXcbSurfaceKHR(VkInstance instance, const VkXcbSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) const {
		if(!this || !pfn_vkCreateXcbSurfaceKHR) {
			return staticPfn_vkCreateXcbSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
		}
		return pfn_vkCreateXcbSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
	}
	VKAPI_ATTR VkBool32 VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, xcb_connection_t* connection, xcb_visualid_t visual_id) const {
		if(!this || !pfn_vkGetPhysicalDeviceXcbPresentationSupportKHR) {
			return staticPfn_vkGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice, queueFamilyIndex, connection, visual_id);
		}
		return pfn_vkGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice, queueFamilyIndex, connection, visual_id);
	}
#endif
#if defined(VK_EXT_directfb_surface) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateDirectFBSurfaceEXT(VkInstance instance, const VkDirectFBSurfaceCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) const {
		if(!this || !pfn_vkCreateDirectFBSurfaceEXT) {
			return staticPfn_vkCreateDirectFBSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
		}
		return pfn_vkCreateDirectFBSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
	}
	VKAPI_ATTR VkBool32 VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceDirectFBPresentationSupportEXT(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, IDirectFB* dfb) const {
		if(!this || !pfn_vkGetPhysicalDeviceDirectFBPresentationSupportEXT) {
			return staticPfn_vkGetPhysicalDeviceDirectFBPresentationSupportEXT(physicalDevice, queueFamilyIndex, dfb);
		}
		return pfn_vkGetPhysicalDeviceDirectFBPresentationSupportEXT(physicalDevice, queueFamilyIndex, dfb);
	}
#endif
#if defined(VK_FUCHSIA_imagepipe_surface) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateImagePipeSurfaceFUCHSIA(VkInstance instance, const VkImagePipeSurfaceCreateInfoFUCHSIA* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) const {
		if(!this || !pfn_vkCreateImagePipeSurfaceFUCHSIA) {
			return staticPfn_vkCreateImagePipeSurfaceFUCHSIA(instance, pCreateInfo, pAllocator, pSurface);
		}
		return pfn_vkCreateImagePipeSurfaceFUCHSIA(instance, pCreateInfo, pAllocator, pSurface);
	}
#endif
#if defined(VK_GGP_stream_descriptor_surface) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateStreamDescriptorSurfaceGGP(VkInstance instance, const VkStreamDescriptorSurfaceCreateInfoGGP* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) const {
		if(!this || !pfn_vkCreateStreamDescriptorSurfaceGGP) {
			return staticPfn_vkCreateStreamDescriptorSurfaceGGP(instance, pCreateInfo, pAllocator, pSurface);
		}
		return pfn_vkCreateStreamDescriptorSurfaceGGP(instance, pCreateInfo, pAllocator, pSurface);
	}
#endif
#if defined(VK_QNX_screen_surface) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateScreenSurfaceQNX(VkInstance instance, const VkScreenSurfaceCreateInfoQNX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) const {
		if(!this || !pfn_vkCreateScreenSurfaceQNX) {
			return staticPfn_vkCreateScreenSurfaceQNX(instance, pCreateInfo, pAllocator, pSurface);
		}
		return pfn_vkCreateScreenSurfaceQNX(instance, pCreateInfo, pAllocator, pSurface);
	}
	VKAPI_ATTR VkBool32 VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceScreenPresentationSupportQNX(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, struct _screen_window* window) const {
		if(!this || !pfn_vkGetPhysicalDeviceScreenPresentationSupportQNX) {
			return staticPfn_vkGetPhysicalDeviceScreenPresentationSupportQNX(physicalDevice, queueFamilyIndex, window);
		}
		return pfn_vkGetPhysicalDeviceScreenPresentationSupportQNX(physicalDevice, queueFamilyIndex, window);
	}
#endif
#if defined(VK_EXT_debug_report)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateDebugReportCallbackEXT(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback) const {
		if(!this || !pfn_vkCreateDebugReportCallbackEXT) {
			return staticPfn_vkCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);
		}
		return pfn_vkCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyDebugReportCallbackEXT) {
			staticPfn_vkDestroyDebugReportCallbackEXT(instance, callback, pAllocator);
			return;
		}
		pfn_vkDestroyDebugReportCallbackEXT(instance, callback, pAllocator);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage) const {
		if(!this || !pfn_vkDebugReportMessageEXT) {
			staticPfn_vkDebugReportMessageEXT(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
			return;
		}
		pfn_vkDebugReportMessageEXT(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
	}
#endif
#if defined(VK_EXT_debug_marker) && (defined(VK_EXT_debug_report))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkDebugMarkerSetObjectNameEXT(VkDevice device, const VkDebugMarkerObjectNameInfoEXT* pNameInfo) const {
		if(!this || !pfn_vkDebugMarkerSetObjectNameEXT) {
			return staticPfn_vkDebugMarkerSetObjectNameEXT(device, pNameInfo);
		}
		return pfn_vkDebugMarkerSetObjectNameEXT(device, pNameInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkDebugMarkerSetObjectTagEXT(VkDevice device, const VkDebugMarkerObjectTagInfoEXT* pTagInfo) const {
		if(!this || !pfn_vkDebugMarkerSetObjectTagEXT) {
			return staticPfn_vkDebugMarkerSetObjectTagEXT(device, pTagInfo);
		}
		return pfn_vkDebugMarkerSetObjectTagEXT(device, pTagInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo) const {
		if(!this || !pfn_vkCmdDebugMarkerBeginEXT) {
			staticPfn_vkCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
			return;
		}
		pfn_vkCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer) const {
		if(!this || !pfn_vkCmdDebugMarkerEndEXT) {
			staticPfn_vkCmdDebugMarkerEndEXT(commandBuffer);
			return;
		}
		pfn_vkCmdDebugMarkerEndEXT(commandBuffer);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo) const {
		if(!this || !pfn_vkCmdDebugMarkerInsertEXT) {
			staticPfn_vkCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
			return;
		}
		pfn_vkCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
	}
#endif
#if defined(VK_NV_external_memory_capabilities)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceExternalImageFormatPropertiesNV) {
			return staticPfn_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
		}
		return pfn_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
	}
#endif
#if defined(VK_NV_external_memory_win32) && (defined(VK_NV_external_memory))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetMemoryWin32HandleNV(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, HANDLE* pHandle) const {
		if(!this || !pfn_vkGetMemoryWin32HandleNV) {
			return staticPfn_vkGetMemoryWin32HandleNV(device, memory, handleType, pHandle);
		}
		return pfn_vkGetMemoryWin32HandleNV(device, memory, handleType, pHandle);
	}
#endif
#if defined(VK_NV_device_generated_commands) && (defined(VK_VERSION_1_1) && defined(VK_KHR_buffer_device_address))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo) const {
		if(!this || !pfn_vkCmdExecuteGeneratedCommandsNV) {
			staticPfn_vkCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
			return;
		}
		pfn_vkCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo) const {
		if(!this || !pfn_vkCmdPreprocessGeneratedCommandsNV) {
			staticPfn_vkCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);
			return;
		}
		pfn_vkCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex) const {
		if(!this || !pfn_vkCmdBindPipelineShaderGroupNV) {
			staticPfn_vkCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
			return;
		}
		pfn_vkCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2* pMemoryRequirements) const {
		if(!this || !pfn_vkGetGeneratedCommandsMemoryRequirementsNV) {
			staticPfn_vkGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
			return;
		}
		pfn_vkGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateIndirectCommandsLayoutNV(VkDevice device, const VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNV* pIndirectCommandsLayout) const {
		if(!this || !pfn_vkCreateIndirectCommandsLayoutNV) {
			return staticPfn_vkCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
		}
		return pfn_vkCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyIndirectCommandsLayoutNV) {
			staticPfn_vkDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);
			return;
		}
		pfn_vkDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2KHR* pFeatures) const {
		if(!this || !pfn_vkGetPhysicalDeviceFeatures2) {
			staticPfn_vkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures);
			return;
		}
		pfn_vkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures);
	}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2KHR* pFeatures) const {
		if(!this || !pfn_vkGetPhysicalDeviceFeatures2KHR) {
			staticPfn_vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);
			return;
		}
		pfn_vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2KHR* pProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceProperties2) {
			staticPfn_vkGetPhysicalDeviceProperties2(physicalDevice, pProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceProperties2(physicalDevice, pProperties);
	}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2KHR* pProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceProperties2KHR) {
			staticPfn_vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2KHR* pFormatProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceFormatProperties2) {
			staticPfn_vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);
	}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2KHR* pFormatProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceFormatProperties2KHR) {
			staticPfn_vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2KHR* pImageFormatInfo, VkImageFormatProperties2KHR* pImageFormatProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceImageFormatProperties2) {
			return staticPfn_vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties);
		}
		return pfn_vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties);
	}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2KHR* pImageFormatInfo, VkImageFormatProperties2KHR* pImageFormatProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceImageFormatProperties2KHR) {
			return staticPfn_vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice, pImageFormatInfo, pImageFormatProperties);
		}
		return pfn_vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice, pImageFormatInfo, pImageFormatProperties);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2KHR* pQueueFamilyProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceQueueFamilyProperties2) {
			staticPfn_vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
	}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2KHR* pQueueFamilyProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceQueueFamilyProperties2KHR) {
			staticPfn_vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2KHR* pMemoryProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceMemoryProperties2) {
			staticPfn_vkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);
	}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2KHR* pMemoryProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceMemoryProperties2KHR) {
			staticPfn_vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2KHR* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2KHR* pProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceSparseImageFormatProperties2) {
			staticPfn_vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
	}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2KHR* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2KHR* pProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceSparseImageFormatProperties2KHR) {
			staticPfn_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
	}
#endif
#if defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites) const {
		if(!this || !pfn_vkCmdPushDescriptorSetKHR) {
			staticPfn_vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
			return;
		}
		pfn_vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlagsKHR flags) const {
		if(!this || !pfn_vkTrimCommandPool) {
			staticPfn_vkTrimCommandPool(device, commandPool, flags);
			return;
		}
		pfn_vkTrimCommandPool(device, commandPool, flags);
	}
#endif
#if defined(VK_KHR_maintenance1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlagsKHR flags) const {
		if(!this || !pfn_vkTrimCommandPoolKHR) {
			staticPfn_vkTrimCommandPoolKHR(device, commandPool, flags);
			return;
		}
		pfn_vkTrimCommandPoolKHR(device, commandPool, flags);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfoKHR* pExternalBufferInfo, VkExternalBufferPropertiesKHR* pExternalBufferProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceExternalBufferProperties) {
			staticPfn_vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
	}
#endif
#if defined(VK_KHR_external_memory_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfoKHR* pExternalBufferInfo, VkExternalBufferPropertiesKHR* pExternalBufferProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceExternalBufferPropertiesKHR) {
			staticPfn_vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
	}
#endif
#if defined(VK_KHR_external_memory_win32) && (defined(VK_KHR_external_memory))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetMemoryWin32HandleKHR(VkDevice device, const VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle) const {
		if(!this || !pfn_vkGetMemoryWin32HandleKHR) {
			return staticPfn_vkGetMemoryWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
		}
		return pfn_vkGetMemoryWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetMemoryWin32HandlePropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, HANDLE handle, VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties) const {
		if(!this || !pfn_vkGetMemoryWin32HandlePropertiesKHR) {
			return staticPfn_vkGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, pMemoryWin32HandleProperties);
		}
		return pfn_vkGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, pMemoryWin32HandleProperties);
	}
#endif
#if defined(VK_KHR_external_memory_fd) && (defined(VK_KHR_external_memory) || defined(VK_VERSION_1_1))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetMemoryFdKHR(VkDevice device, const VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd) const {
		if(!this || !pfn_vkGetMemoryFdKHR) {
			return staticPfn_vkGetMemoryFdKHR(device, pGetFdInfo, pFd);
		}
		return pfn_vkGetMemoryFdKHR(device, pGetFdInfo, pFd);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties) const {
		if(!this || !pfn_vkGetMemoryFdPropertiesKHR) {
			return staticPfn_vkGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);
		}
		return pfn_vkGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);
	}
#endif
#if defined(VK_FUCHSIA_external_memory) && (defined(VK_KHR_external_memory_capabilities) && defined(VK_KHR_external_memory))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetMemoryZirconHandleFUCHSIA(VkDevice device, const VkMemoryGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo, zx_handle_t* pZirconHandle) const {
		if(!this || !pfn_vkGetMemoryZirconHandleFUCHSIA) {
			return staticPfn_vkGetMemoryZirconHandleFUCHSIA(device, pGetZirconHandleInfo, pZirconHandle);
		}
		return pfn_vkGetMemoryZirconHandleFUCHSIA(device, pGetZirconHandleInfo, pZirconHandle);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetMemoryZirconHandlePropertiesFUCHSIA(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, zx_handle_t zirconHandle, VkMemoryZirconHandlePropertiesFUCHSIA* pMemoryZirconHandleProperties) const {
		if(!this || !pfn_vkGetMemoryZirconHandlePropertiesFUCHSIA) {
			return staticPfn_vkGetMemoryZirconHandlePropertiesFUCHSIA(device, handleType, zirconHandle, pMemoryZirconHandleProperties);
		}
		return pfn_vkGetMemoryZirconHandlePropertiesFUCHSIA(device, handleType, zirconHandle, pMemoryZirconHandleProperties);
	}
#endif
#if defined(VK_NV_external_memory_rdma) && (defined(VK_KHR_external_memory))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetMemoryRemoteAddressNV(VkDevice device, const VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo, VkRemoteAddressNV* pAddress) const {
		if(!this || !pfn_vkGetMemoryRemoteAddressNV) {
			return staticPfn_vkGetMemoryRemoteAddressNV(device, pMemoryGetRemoteAddressInfo, pAddress);
		}
		return pfn_vkGetMemoryRemoteAddressNV(device, pMemoryGetRemoteAddressInfo, pAddress);
	}
#endif
#if defined(VK_NV_external_memory_sci_buf) && (defined(VK_VERSION_1_1))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetMemorySciBufNV(VkDevice device, const VkMemoryGetSciBufInfoNV* pGetSciBufInfo, NvSciBufObj* pHandle) const {
		if(!this || !pfn_vkGetMemorySciBufNV) {
			return staticPfn_vkGetMemorySciBufNV(device, pGetSciBufInfo, pHandle);
		}
		return pfn_vkGetMemorySciBufNV(device, pGetSciBufInfo, pHandle);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV(VkPhysicalDevice physicalDevice, VkExternalMemoryHandleTypeFlagBits handleType, NvSciBufObj handle, VkMemorySciBufPropertiesNV* pMemorySciBufProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV) {
			return staticPfn_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV(physicalDevice, handleType, handle, pMemorySciBufProperties);
		}
		return pfn_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV(physicalDevice, handleType, handle, pMemorySciBufProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceSciBufAttributesNV(VkPhysicalDevice physicalDevice, NvSciBufAttrList pAttributes) const {
		if(!this || !pfn_vkGetPhysicalDeviceSciBufAttributesNV) {
			return staticPfn_vkGetPhysicalDeviceSciBufAttributesNV(physicalDevice, pAttributes);
		}
		return pfn_vkGetPhysicalDeviceSciBufAttributesNV(physicalDevice, pAttributes);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfoKHR* pExternalSemaphoreInfo, VkExternalSemaphorePropertiesKHR* pExternalSemaphoreProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceExternalSemaphoreProperties) {
			staticPfn_vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
	}
#endif
#if defined(VK_KHR_external_semaphore_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfoKHR* pExternalSemaphoreInfo, VkExternalSemaphorePropertiesKHR* pExternalSemaphoreProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR) {
			staticPfn_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
	}
#endif
#if defined(VK_KHR_external_semaphore_win32) && (defined(VK_KHR_external_semaphore))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetSemaphoreWin32HandleKHR(VkDevice device, const VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle) const {
		if(!this || !pfn_vkGetSemaphoreWin32HandleKHR) {
			return staticPfn_vkGetSemaphoreWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
		}
		return pfn_vkGetSemaphoreWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkImportSemaphoreWin32HandleKHR(VkDevice device, const VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo) const {
		if(!this || !pfn_vkImportSemaphoreWin32HandleKHR) {
			return staticPfn_vkImportSemaphoreWin32HandleKHR(device, pImportSemaphoreWin32HandleInfo);
		}
		return pfn_vkImportSemaphoreWin32HandleKHR(device, pImportSemaphoreWin32HandleInfo);
	}
#endif
#if defined(VK_KHR_external_semaphore_fd) && (defined(VK_KHR_external_semaphore) || defined(VK_VERSION_1_1))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetSemaphoreFdKHR(VkDevice device, const VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd) const {
		if(!this || !pfn_vkGetSemaphoreFdKHR) {
			return staticPfn_vkGetSemaphoreFdKHR(device, pGetFdInfo, pFd);
		}
		return pfn_vkGetSemaphoreFdKHR(device, pGetFdInfo, pFd);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkImportSemaphoreFdKHR(VkDevice device, const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo) const {
		if(!this || !pfn_vkImportSemaphoreFdKHR) {
			return staticPfn_vkImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);
		}
		return pfn_vkImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);
	}
#endif
#if defined(VK_FUCHSIA_external_semaphore) && (defined(VK_KHR_external_semaphore_capabilities) && defined(VK_KHR_external_semaphore))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetSemaphoreZirconHandleFUCHSIA(VkDevice device, const VkSemaphoreGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo, zx_handle_t* pZirconHandle) const {
		if(!this || !pfn_vkGetSemaphoreZirconHandleFUCHSIA) {
			return staticPfn_vkGetSemaphoreZirconHandleFUCHSIA(device, pGetZirconHandleInfo, pZirconHandle);
		}
		return pfn_vkGetSemaphoreZirconHandleFUCHSIA(device, pGetZirconHandleInfo, pZirconHandle);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkImportSemaphoreZirconHandleFUCHSIA(VkDevice device, const VkImportSemaphoreZirconHandleInfoFUCHSIA* pImportSemaphoreZirconHandleInfo) const {
		if(!this || !pfn_vkImportSemaphoreZirconHandleFUCHSIA) {
			return staticPfn_vkImportSemaphoreZirconHandleFUCHSIA(device, pImportSemaphoreZirconHandleInfo);
		}
		return pfn_vkImportSemaphoreZirconHandleFUCHSIA(device, pImportSemaphoreZirconHandleInfo);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfoKHR* pExternalFenceInfo, VkExternalFencePropertiesKHR* pExternalFenceProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceExternalFenceProperties) {
			staticPfn_vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
	}
#endif
#if defined(VK_KHR_external_fence_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfoKHR* pExternalFenceInfo, VkExternalFencePropertiesKHR* pExternalFenceProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceExternalFencePropertiesKHR) {
			staticPfn_vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
	}
#endif
#if defined(VK_KHR_external_fence_win32) && (defined(VK_KHR_external_fence))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetFenceWin32HandleKHR(VkDevice device, const VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle) const {
		if(!this || !pfn_vkGetFenceWin32HandleKHR) {
			return staticPfn_vkGetFenceWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
		}
		return pfn_vkGetFenceWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkImportFenceWin32HandleKHR(VkDevice device, const VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo) const {
		if(!this || !pfn_vkImportFenceWin32HandleKHR) {
			return staticPfn_vkImportFenceWin32HandleKHR(device, pImportFenceWin32HandleInfo);
		}
		return pfn_vkImportFenceWin32HandleKHR(device, pImportFenceWin32HandleInfo);
	}
#endif
#if defined(VK_KHR_external_fence_fd) && (defined(VK_KHR_external_fence) || defined(VK_VERSION_1_1))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetFenceFdKHR(VkDevice device, const VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd) const {
		if(!this || !pfn_vkGetFenceFdKHR) {
			return staticPfn_vkGetFenceFdKHR(device, pGetFdInfo, pFd);
		}
		return pfn_vkGetFenceFdKHR(device, pGetFdInfo, pFd);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkImportFenceFdKHR(VkDevice device, const VkImportFenceFdInfoKHR* pImportFenceFdInfo) const {
		if(!this || !pfn_vkImportFenceFdKHR) {
			return staticPfn_vkImportFenceFdKHR(device, pImportFenceFdInfo);
		}
		return pfn_vkImportFenceFdKHR(device, pImportFenceFdInfo);
	}
#endif
#if (defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))) || (defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1)))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetFenceSciSyncFenceNV(VkDevice device, const VkFenceGetSciSyncInfoNV* pGetSciSyncHandleInfo, void* pHandle) const {
		if(!this || !pfn_vkGetFenceSciSyncFenceNV) {
			return staticPfn_vkGetFenceSciSyncFenceNV(device, pGetSciSyncHandleInfo, pHandle);
		}
		return pfn_vkGetFenceSciSyncFenceNV(device, pGetSciSyncHandleInfo, pHandle);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetFenceSciSyncObjNV(VkDevice device, const VkFenceGetSciSyncInfoNV* pGetSciSyncHandleInfo, void* pHandle) const {
		if(!this || !pfn_vkGetFenceSciSyncObjNV) {
			return staticPfn_vkGetFenceSciSyncObjNV(device, pGetSciSyncHandleInfo, pHandle);
		}
		return pfn_vkGetFenceSciSyncObjNV(device, pGetSciSyncHandleInfo, pHandle);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkImportFenceSciSyncFenceNV(VkDevice device, const VkImportFenceSciSyncInfoNV* pImportFenceSciSyncInfo) const {
		if(!this || !pfn_vkImportFenceSciSyncFenceNV) {
			return staticPfn_vkImportFenceSciSyncFenceNV(device, pImportFenceSciSyncInfo);
		}
		return pfn_vkImportFenceSciSyncFenceNV(device, pImportFenceSciSyncInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkImportFenceSciSyncObjNV(VkDevice device, const VkImportFenceSciSyncInfoNV* pImportFenceSciSyncInfo) const {
		if(!this || !pfn_vkImportFenceSciSyncObjNV) {
			return staticPfn_vkImportFenceSciSyncObjNV(device, pImportFenceSciSyncInfo);
		}
		return pfn_vkImportFenceSciSyncObjNV(device, pImportFenceSciSyncInfo);
	}
#endif
#if defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetSemaphoreSciSyncObjNV(VkDevice device, const VkSemaphoreGetSciSyncInfoNV* pGetSciSyncInfo, void* pHandle) const {
		if(!this || !pfn_vkGetSemaphoreSciSyncObjNV) {
			return staticPfn_vkGetSemaphoreSciSyncObjNV(device, pGetSciSyncInfo, pHandle);
		}
		return pfn_vkGetSemaphoreSciSyncObjNV(device, pGetSciSyncInfo, pHandle);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkImportSemaphoreSciSyncObjNV(VkDevice device, const VkImportSemaphoreSciSyncInfoNV* pImportSemaphoreSciSyncInfo) const {
		if(!this || !pfn_vkImportSemaphoreSciSyncObjNV) {
			return staticPfn_vkImportSemaphoreSciSyncObjNV(device, pImportSemaphoreSciSyncInfo);
		}
		return pfn_vkImportSemaphoreSciSyncObjNV(device, pImportSemaphoreSciSyncInfo);
	}
#endif
#if (defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))) || (defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1)))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceSciSyncAttributesNV(VkPhysicalDevice physicalDevice, const VkSciSyncAttributesInfoNV* pSciSyncAttributesInfo, NvSciSyncAttrList pAttributes) const {
		if(!this || !pfn_vkGetPhysicalDeviceSciSyncAttributesNV) {
			return staticPfn_vkGetPhysicalDeviceSciSyncAttributesNV(physicalDevice, pSciSyncAttributesInfo, pAttributes);
		}
		return pfn_vkGetPhysicalDeviceSciSyncAttributesNV(physicalDevice, pSciSyncAttributesInfo, pAttributes);
	}
#endif
#if defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateSemaphoreSciSyncPoolNV(VkDevice device, const VkSemaphoreSciSyncPoolCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphoreSciSyncPoolNV* pSemaphorePool) const {
		if(!this || !pfn_vkCreateSemaphoreSciSyncPoolNV) {
			return staticPfn_vkCreateSemaphoreSciSyncPoolNV(device, pCreateInfo, pAllocator, pSemaphorePool);
		}
		return pfn_vkCreateSemaphoreSciSyncPoolNV(device, pCreateInfo, pAllocator, pSemaphorePool);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroySemaphoreSciSyncPoolNV(VkDevice device, VkSemaphoreSciSyncPoolNV semaphorePool, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroySemaphoreSciSyncPoolNV) {
			staticPfn_vkDestroySemaphoreSciSyncPoolNV(device, semaphorePool, pAllocator);
			return;
		}
		pfn_vkDestroySemaphoreSciSyncPoolNV(device, semaphorePool, pAllocator);
	}
#endif
#if defined(VK_EXT_direct_mode_display) && (defined(VK_KHR_display))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display) const {
		if(!this || !pfn_vkReleaseDisplayEXT) {
			return staticPfn_vkReleaseDisplayEXT(physicalDevice, display);
		}
		return pfn_vkReleaseDisplayEXT(physicalDevice, display);
	}
#endif
#if defined(VK_EXT_acquire_xlib_display) && (defined(VK_EXT_direct_mode_display))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkAcquireXlibDisplayEXT(VkPhysicalDevice physicalDevice, Display* dpy, VkDisplayKHR display) const {
		if(!this || !pfn_vkAcquireXlibDisplayEXT) {
			return staticPfn_vkAcquireXlibDisplayEXT(physicalDevice, dpy, display);
		}
		return pfn_vkAcquireXlibDisplayEXT(physicalDevice, dpy, display);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetRandROutputDisplayEXT(VkPhysicalDevice physicalDevice, Display* dpy, RROutput rrOutput, VkDisplayKHR* pDisplay) const {
		if(!this || !pfn_vkGetRandROutputDisplayEXT) {
			return staticPfn_vkGetRandROutputDisplayEXT(physicalDevice, dpy, rrOutput, pDisplay);
		}
		return pfn_vkGetRandROutputDisplayEXT(physicalDevice, dpy, rrOutput, pDisplay);
	}
#endif
#if defined(VK_NV_acquire_winrt_display) && (defined(VK_EXT_direct_mode_display))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkAcquireWinrtDisplayNV(VkPhysicalDevice physicalDevice, VkDisplayKHR display) const {
		if(!this || !pfn_vkAcquireWinrtDisplayNV) {
			return staticPfn_vkAcquireWinrtDisplayNV(physicalDevice, display);
		}
		return pfn_vkAcquireWinrtDisplayNV(physicalDevice, display);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetWinrtDisplayNV(VkPhysicalDevice physicalDevice, uint32_t deviceRelativeId, VkDisplayKHR* pDisplay) const {
		if(!this || !pfn_vkGetWinrtDisplayNV) {
			return staticPfn_vkGetWinrtDisplayNV(physicalDevice, deviceRelativeId, pDisplay);
		}
		return pfn_vkGetWinrtDisplayNV(physicalDevice, deviceRelativeId, pDisplay);
	}
#endif
#if defined(VK_EXT_display_control) && (defined(VK_EXT_display_surface_counter) && defined(VK_KHR_swapchain))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT* pDisplayPowerInfo) const {
		if(!this || !pfn_vkDisplayPowerControlEXT) {
			return staticPfn_vkDisplayPowerControlEXT(device, display, pDisplayPowerInfo);
		}
		return pfn_vkDisplayPowerControlEXT(device, display, pDisplayPowerInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkRegisterDeviceEventEXT(VkDevice device, const VkDeviceEventInfoEXT* pDeviceEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence) const {
		if(!this || !pfn_vkRegisterDeviceEventEXT) {
			return staticPfn_vkRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);
		}
		return pfn_vkRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, const VkDisplayEventInfoEXT* pDisplayEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence) const {
		if(!this || !pfn_vkRegisterDisplayEventEXT) {
			return staticPfn_vkRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);
		}
		return pfn_vkRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t* pCounterValue) const {
		if(!this || !pfn_vkGetSwapchainCounterEXT) {
			return staticPfn_vkGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);
		}
		return pfn_vkGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);
	}
#endif
#if defined(VK_EXT_display_surface_counter) && (defined(VK_KHR_display))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities) const {
		if(!this || !pfn_vkGetPhysicalDeviceSurfaceCapabilities2EXT) {
			return staticPfn_vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, pSurfaceCapabilities);
		}
		return pfn_vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, pSurfaceCapabilities);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupPropertiesKHR* pPhysicalDeviceGroupProperties) const {
		if(!this || !pfn_vkEnumeratePhysicalDeviceGroups) {
			return staticPfn_vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
		}
		return pfn_vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
	}
#endif
#if defined(VK_KHR_device_group_creation)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkEnumeratePhysicalDeviceGroupsKHR(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupPropertiesKHR* pPhysicalDeviceGroupProperties) const {
		if(!this || !pfn_vkEnumeratePhysicalDeviceGroupsKHR) {
			return staticPfn_vkEnumeratePhysicalDeviceGroupsKHR(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
		}
		return pfn_vkEnumeratePhysicalDeviceGroupsKHR(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlagsKHR* pPeerMemoryFeatures) const {
		if(!this || !pfn_vkGetDeviceGroupPeerMemoryFeatures) {
			staticPfn_vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
			return;
		}
		pfn_vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
	}
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlagsKHR* pPeerMemoryFeatures) const {
		if(!this || !pfn_vkGetDeviceGroupPeerMemoryFeaturesKHR) {
			staticPfn_vkGetDeviceGroupPeerMemoryFeaturesKHR(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
			return;
		}
		pfn_vkGetDeviceGroupPeerMemoryFeaturesKHR(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkBindBufferMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfoKHR* pBindInfos) const {
		if(!this || !pfn_vkBindBufferMemory2) {
			return staticPfn_vkBindBufferMemory2(device, bindInfoCount, pBindInfos);
		}
		return pfn_vkBindBufferMemory2(device, bindInfoCount, pBindInfos);
	}
#endif
#if defined(VK_KHR_bind_memory2)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkBindBufferMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfoKHR* pBindInfos) const {
		if(!this || !pfn_vkBindBufferMemory2KHR) {
			return staticPfn_vkBindBufferMemory2KHR(device, bindInfoCount, pBindInfos);
		}
		return pfn_vkBindBufferMemory2KHR(device, bindInfoCount, pBindInfos);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkBindImageMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfoKHR* pBindInfos) const {
		if(!this || !pfn_vkBindImageMemory2) {
			return staticPfn_vkBindImageMemory2(device, bindInfoCount, pBindInfos);
		}
		return pfn_vkBindImageMemory2(device, bindInfoCount, pBindInfos);
	}
#endif
#if defined(VK_KHR_bind_memory2)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkBindImageMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfoKHR* pBindInfos) const {
		if(!this || !pfn_vkBindImageMemory2KHR) {
			return staticPfn_vkBindImageMemory2KHR(device, bindInfoCount, pBindInfos);
		}
		return pfn_vkBindImageMemory2KHR(device, bindInfoCount, pBindInfos);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask) const {
		if(!this || !pfn_vkCmdSetDeviceMask) {
			staticPfn_vkCmdSetDeviceMask(commandBuffer, deviceMask);
			return;
		}
		pfn_vkCmdSetDeviceMask(commandBuffer, deviceMask);
	}
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask) const {
		if(!this || !pfn_vkCmdSetDeviceMaskKHR) {
			staticPfn_vkCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
			return;
		}
		pfn_vkCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
	}
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_surface)))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities) const {
		if(!this || !pfn_vkGetDeviceGroupPresentCapabilitiesKHR) {
			return staticPfn_vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);
		}
		return pfn_vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes) const {
		if(!this || !pfn_vkGetDeviceGroupSurfacePresentModesKHR) {
			return staticPfn_vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);
		}
		return pfn_vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);
	}
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_swapchain)))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkAcquireNextImage2KHR(VkDevice device, const VkAcquireNextImageInfoKHR* pAcquireInfo, uint32_t* pImageIndex) const {
		if(!this || !pfn_vkAcquireNextImage2KHR) {
			return staticPfn_vkAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);
		}
		return pfn_vkAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) const {
		if(!this || !pfn_vkCmdDispatchBase) {
			staticPfn_vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
			return;
		}
		pfn_vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	}
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) const {
		if(!this || !pfn_vkCmdDispatchBaseKHR) {
			staticPfn_vkCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
			return;
		}
		pfn_vkCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
	}
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_surface)))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pRectCount, VkRect2D* pRects) const {
		if(!this || !pfn_vkGetPhysicalDevicePresentRectanglesKHR) {
			return staticPfn_vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, pRectCount, pRects);
		}
		return pfn_vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, pRectCount, pRects);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateDescriptorUpdateTemplate(VkDevice device, const VkDescriptorUpdateTemplateCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplateKHR* pDescriptorUpdateTemplate) const {
		if(!this || !pfn_vkCreateDescriptorUpdateTemplate) {
			return staticPfn_vkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
		}
		return pfn_vkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
	}
#endif
#if defined(VK_KHR_descriptor_update_template)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateDescriptorUpdateTemplateKHR(VkDevice device, const VkDescriptorUpdateTemplateCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplateKHR* pDescriptorUpdateTemplate) const {
		if(!this || !pfn_vkCreateDescriptorUpdateTemplateKHR) {
			return staticPfn_vkCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
		}
		return pfn_vkCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyDescriptorUpdateTemplate) {
			staticPfn_vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);
			return;
		}
		pfn_vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);
	}
#endif
#if defined(VK_KHR_descriptor_update_template)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyDescriptorUpdateTemplateKHR) {
			staticPfn_vkDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);
			return;
		}
		pfn_vkDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, const void* pData) const {
		if(!this || !pfn_vkUpdateDescriptorSetWithTemplate) {
			staticPfn_vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);
			return;
		}
		pfn_vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);
	}
#endif
#if defined(VK_KHR_descriptor_update_template)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, const void* pData) const {
		if(!this || !pfn_vkUpdateDescriptorSetWithTemplateKHR) {
			staticPfn_vkUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData);
			return;
		}
		pfn_vkUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData);
	}
#endif
#if (((defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_KHR_descriptor_update_template)))) || ((defined(VK_KHR_descriptor_update_template)) && (defined(VK_KHR_push_descriptor)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void* pData) const {
		if(!this || !pfn_vkCmdPushDescriptorSetWithTemplateKHR) {
			staticPfn_vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
			return;
		}
		pfn_vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
	}
#endif
#if defined(VK_EXT_hdr_metadata) && (defined(VK_KHR_swapchain))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkSetHdrMetadataEXT(VkDevice device, uint32_t swapchainCount, const VkSwapchainKHR* pSwapchains, const VkHdrMetadataEXT* pMetadata) const {
		if(!this || !pfn_vkSetHdrMetadataEXT) {
			staticPfn_vkSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);
			return;
		}
		pfn_vkSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);
	}
#endif
#if defined(VK_KHR_shared_presentable_image) && (defined(VK_KHR_swapchain) && defined(VK_KHR_get_surface_capabilities2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain) const {
		if(!this || !pfn_vkGetSwapchainStatusKHR) {
			return staticPfn_vkGetSwapchainStatusKHR(device, swapchain);
		}
		return pfn_vkGetSwapchainStatusKHR(device, swapchain);
	}
#endif
#if defined(VK_GOOGLE_display_timing) && (defined(VK_KHR_swapchain))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties) const {
		if(!this || !pfn_vkGetRefreshCycleDurationGOOGLE) {
			return staticPfn_vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties);
		}
		return pfn_vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings) const {
		if(!this || !pfn_vkGetPastPresentationTimingGOOGLE) {
			return staticPfn_vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings);
		}
		return pfn_vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings);
	}
#endif
#if defined(VK_MVK_ios_surface) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateIOSSurfaceMVK(VkInstance instance, const VkIOSSurfaceCreateInfoMVK* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) const {
		if(!this || !pfn_vkCreateIOSSurfaceMVK) {
			return staticPfn_vkCreateIOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
		}
		return pfn_vkCreateIOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
	}
#endif
#if defined(VK_MVK_macos_surface) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateMacOSSurfaceMVK(VkInstance instance, const VkMacOSSurfaceCreateInfoMVK* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) const {
		if(!this || !pfn_vkCreateMacOSSurfaceMVK) {
			return staticPfn_vkCreateMacOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
		}
		return pfn_vkCreateMacOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
	}
#endif
#if defined(VK_EXT_metal_surface) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateMetalSurfaceEXT(VkInstance instance, const VkMetalSurfaceCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) const {
		if(!this || !pfn_vkCreateMetalSurfaceEXT) {
			return staticPfn_vkCreateMetalSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
		}
		return pfn_vkCreateMetalSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
	}
#endif
#if defined(VK_NV_clip_space_w_scaling)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV* pViewportWScalings) const {
		if(!this || !pfn_vkCmdSetViewportWScalingNV) {
			staticPfn_vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
			return;
		}
		pfn_vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
	}
#endif
#if defined(VK_EXT_discard_rectangles) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D* pDiscardRectangles) const {
		if(!this || !pfn_vkCmdSetDiscardRectangleEXT) {
			staticPfn_vkCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
			return;
		}
		pfn_vkCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDiscardRectangleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable) const {
		if(!this || !pfn_vkCmdSetDiscardRectangleEnableEXT) {
			staticPfn_vkCmdSetDiscardRectangleEnableEXT(commandBuffer, discardRectangleEnable);
			return;
		}
		pfn_vkCmdSetDiscardRectangleEnableEXT(commandBuffer, discardRectangleEnable);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDiscardRectangleModeEXT(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode) const {
		if(!this || !pfn_vkCmdSetDiscardRectangleModeEXT) {
			staticPfn_vkCmdSetDiscardRectangleModeEXT(commandBuffer, discardRectangleMode);
			return;
		}
		pfn_vkCmdSetDiscardRectangleModeEXT(commandBuffer, discardRectangleMode);
	}
#endif
#if defined(VK_EXT_sample_locations) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT* pSampleLocationsInfo) const {
		if(!this || !pfn_vkCmdSetSampleLocationsEXT) {
			staticPfn_vkCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
			return;
		}
		pfn_vkCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceMultisamplePropertiesEXT) {
			staticPfn_vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, pMultisampleProperties);
			return;
		}
		pfn_vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, pMultisampleProperties);
	}
#endif
#if defined(VK_KHR_get_surface_capabilities2) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities) const {
		if(!this || !pfn_vkGetPhysicalDeviceSurfaceCapabilities2KHR) {
			return staticPfn_vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
		}
		return pfn_vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats) const {
		if(!this || !pfn_vkGetPhysicalDeviceSurfaceFormats2KHR) {
			return staticPfn_vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
		}
		return pfn_vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
	}
#endif
#if defined(VK_KHR_get_display_properties2) && (defined(VK_KHR_display))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayProperties2KHR* pProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceDisplayProperties2KHR) {
			return staticPfn_vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, pPropertyCount, pProperties);
		}
		return pfn_vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, pPropertyCount, pProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceDisplayPlaneProperties2KHR) {
			return staticPfn_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, pPropertyCount, pProperties);
		}
		return pfn_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, pPropertyCount, pProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModeProperties2KHR* pProperties) const {
		if(!this || !pfn_vkGetDisplayModeProperties2KHR) {
			return staticPfn_vkGetDisplayModeProperties2KHR(physicalDevice, display, pPropertyCount, pProperties);
		}
		return pfn_vkGetDisplayModeProperties2KHR(physicalDevice, display, pPropertyCount, pProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities) const {
		if(!this || !pfn_vkGetDisplayPlaneCapabilities2KHR) {
			return staticPfn_vkGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities);
		}
		return pfn_vkGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetBufferMemoryRequirements2(VkDevice device, const VkBufferMemoryRequirementsInfo2KHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) const {
		if(!this || !pfn_vkGetBufferMemoryRequirements2) {
			staticPfn_vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);
			return;
		}
		pfn_vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);
	}
#endif
#if defined(VK_KHR_get_memory_requirements2)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetBufferMemoryRequirements2KHR(VkDevice device, const VkBufferMemoryRequirementsInfo2KHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) const {
		if(!this || !pfn_vkGetBufferMemoryRequirements2KHR) {
			staticPfn_vkGetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
			return;
		}
		pfn_vkGetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetImageMemoryRequirements2(VkDevice device, const VkImageMemoryRequirementsInfo2KHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) const {
		if(!this || !pfn_vkGetImageMemoryRequirements2) {
			staticPfn_vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);
			return;
		}
		pfn_vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);
	}
#endif
#if defined(VK_KHR_get_memory_requirements2)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetImageMemoryRequirements2KHR(VkDevice device, const VkImageMemoryRequirementsInfo2KHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) const {
		if(!this || !pfn_vkGetImageMemoryRequirements2KHR) {
			staticPfn_vkGetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
			return;
		}
		pfn_vkGetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetImageSparseMemoryRequirements2(VkDevice device, const VkImageSparseMemoryRequirementsInfo2KHR* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2KHR* pSparseMemoryRequirements) const {
		if(!this || !pfn_vkGetImageSparseMemoryRequirements2) {
			staticPfn_vkGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
			return;
		}
		pfn_vkGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	}
#endif
#if defined(VK_KHR_get_memory_requirements2)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetImageSparseMemoryRequirements2KHR(VkDevice device, const VkImageSparseMemoryRequirementsInfo2KHR* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2KHR* pSparseMemoryRequirements) const {
		if(!this || !pfn_vkGetImageSparseMemoryRequirements2KHR) {
			staticPfn_vkGetImageSparseMemoryRequirements2KHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
			return;
		}
		pfn_vkGetImageSparseMemoryRequirements2KHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDeviceBufferMemoryRequirements(VkDevice device, const VkDeviceBufferMemoryRequirementsKHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) const {
		if(!this || !pfn_vkGetDeviceBufferMemoryRequirements) {
			staticPfn_vkGetDeviceBufferMemoryRequirements(device, pInfo, pMemoryRequirements);
			return;
		}
		pfn_vkGetDeviceBufferMemoryRequirements(device, pInfo, pMemoryRequirements);
	}
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDeviceBufferMemoryRequirementsKHR(VkDevice device, const VkDeviceBufferMemoryRequirementsKHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) const {
		if(!this || !pfn_vkGetDeviceBufferMemoryRequirementsKHR) {
			staticPfn_vkGetDeviceBufferMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);
			return;
		}
		pfn_vkGetDeviceBufferMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDeviceImageMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirementsKHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) const {
		if(!this || !pfn_vkGetDeviceImageMemoryRequirements) {
			staticPfn_vkGetDeviceImageMemoryRequirements(device, pInfo, pMemoryRequirements);
			return;
		}
		pfn_vkGetDeviceImageMemoryRequirements(device, pInfo, pMemoryRequirements);
	}
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDeviceImageMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirementsKHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) const {
		if(!this || !pfn_vkGetDeviceImageMemoryRequirementsKHR) {
			staticPfn_vkGetDeviceImageMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);
			return;
		}
		pfn_vkGetDeviceImageMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDeviceImageSparseMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirementsKHR* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2KHR* pSparseMemoryRequirements) const {
		if(!this || !pfn_vkGetDeviceImageSparseMemoryRequirements) {
			staticPfn_vkGetDeviceImageSparseMemoryRequirements(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
			return;
		}
		pfn_vkGetDeviceImageSparseMemoryRequirements(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	}
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirementsKHR* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2KHR* pSparseMemoryRequirements) const {
		if(!this || !pfn_vkGetDeviceImageSparseMemoryRequirementsKHR) {
			staticPfn_vkGetDeviceImageSparseMemoryRequirementsKHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
			return;
		}
		pfn_vkGetDeviceImageSparseMemoryRequirementsKHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateSamplerYcbcrConversion(VkDevice device, const VkSamplerYcbcrConversionCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversionKHR* pYcbcrConversion) const {
		if(!this || !pfn_vkCreateSamplerYcbcrConversion) {
			return staticPfn_vkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);
		}
		return pfn_vkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);
	}
#endif
#if defined(VK_KHR_sampler_ycbcr_conversion) && (defined(VK_KHR_maintenance1) && defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_memory_requirements2) && defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateSamplerYcbcrConversionKHR(VkDevice device, const VkSamplerYcbcrConversionCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversionKHR* pYcbcrConversion) const {
		if(!this || !pfn_vkCreateSamplerYcbcrConversionKHR) {
			return staticPfn_vkCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion);
		}
		return pfn_vkCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionKHR ycbcrConversion, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroySamplerYcbcrConversion) {
			staticPfn_vkDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);
			return;
		}
		pfn_vkDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);
	}
#endif
#if defined(VK_KHR_sampler_ycbcr_conversion) && (defined(VK_KHR_maintenance1) && defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_memory_requirements2) && defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversionKHR ycbcrConversion, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroySamplerYcbcrConversionKHR) {
			staticPfn_vkDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);
			return;
		}
		pfn_vkDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDeviceQueue2(VkDevice device, const VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue) const {
		if(!this || !pfn_vkGetDeviceQueue2) {
			staticPfn_vkGetDeviceQueue2(device, pQueueInfo, pQueue);
			return;
		}
		pfn_vkGetDeviceQueue2(device, pQueueInfo, pQueue);
	}
#endif
#if defined(VK_EXT_validation_cache)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateValidationCacheEXT(VkDevice device, const VkValidationCacheCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkValidationCacheEXT* pValidationCache) const {
		if(!this || !pfn_vkCreateValidationCacheEXT) {
			return staticPfn_vkCreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache);
		}
		return pfn_vkCreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyValidationCacheEXT) {
			staticPfn_vkDestroyValidationCacheEXT(device, validationCache, pAllocator);
			return;
		}
		pfn_vkDestroyValidationCacheEXT(device, validationCache, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, size_t* pDataSize, void* pData) const {
		if(!this || !pfn_vkGetValidationCacheDataEXT) {
			return staticPfn_vkGetValidationCacheDataEXT(device, validationCache, pDataSize, pData);
		}
		return pfn_vkGetValidationCacheDataEXT(device, validationCache, pDataSize, pData);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkMergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, const VkValidationCacheEXT* pSrcCaches) const {
		if(!this || !pfn_vkMergeValidationCachesEXT) {
			return staticPfn_vkMergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);
		}
		return pfn_vkMergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);
	}
#endif
#if defined(VK_VERSION_1_1)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDescriptorSetLayoutSupport(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupportKHR* pSupport) const {
		if(!this || !pfn_vkGetDescriptorSetLayoutSupport) {
			staticPfn_vkGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);
			return;
		}
		pfn_vkGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);
	}
#endif
#if defined(VK_KHR_maintenance3) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDescriptorSetLayoutSupportKHR(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupportKHR* pSupport) const {
		if(!this || !pfn_vkGetDescriptorSetLayoutSupportKHR) {
			staticPfn_vkGetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);
			return;
		}
		pfn_vkGetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);
	}
#endif
#if defined(VK_ANDROID_native_buffer)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetSwapchainGrallocUsageANDROID(VkDevice device, VkFormat format, VkImageUsageFlags imageUsage, int* grallocUsage) const {
		if(!this || !pfn_vkGetSwapchainGrallocUsageANDROID) {
			return staticPfn_vkGetSwapchainGrallocUsageANDROID(device, format, imageUsage, grallocUsage);
		}
		return pfn_vkGetSwapchainGrallocUsageANDROID(device, format, imageUsage, grallocUsage);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetSwapchainGrallocUsage2ANDROID(VkDevice device, VkFormat format, VkImageUsageFlags imageUsage, VkSwapchainImageUsageFlagsANDROID swapchainImageUsage, uint64_t* grallocConsumerUsage, uint64_t* grallocProducerUsage) const {
		if(!this || !pfn_vkGetSwapchainGrallocUsage2ANDROID) {
			return staticPfn_vkGetSwapchainGrallocUsage2ANDROID(device, format, imageUsage, swapchainImageUsage, grallocConsumerUsage, grallocProducerUsage);
		}
		return pfn_vkGetSwapchainGrallocUsage2ANDROID(device, format, imageUsage, swapchainImageUsage, grallocConsumerUsage, grallocProducerUsage);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkAcquireImageANDROID(VkDevice device, VkImage image, int nativeFenceFd, VkSemaphore semaphore, VkFence fence) const {
		if(!this || !pfn_vkAcquireImageANDROID) {
			return staticPfn_vkAcquireImageANDROID(device, image, nativeFenceFd, semaphore, fence);
		}
		return pfn_vkAcquireImageANDROID(device, image, nativeFenceFd, semaphore, fence);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkQueueSignalReleaseImageANDROID(VkQueue queue, uint32_t waitSemaphoreCount, const VkSemaphore* pWaitSemaphores, VkImage image, int* pNativeFenceFd) const {
		if(!this || !pfn_vkQueueSignalReleaseImageANDROID) {
			return staticPfn_vkQueueSignalReleaseImageANDROID(queue, waitSemaphoreCount, pWaitSemaphores, image, pNativeFenceFd);
		}
		return pfn_vkQueueSignalReleaseImageANDROID(queue, waitSemaphoreCount, pWaitSemaphores, image, pNativeFenceFd);
	}
#endif
#if defined(VK_AMD_shader_info)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t* pInfoSize, void* pInfo) const {
		if(!this || !pfn_vkGetShaderInfoAMD) {
			return staticPfn_vkGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
		}
		return pfn_vkGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
	}
#endif
#if defined(VK_AMD_display_native_hdr) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable) const {
		if(!this || !pfn_vkSetLocalDimmingAMD) {
			staticPfn_vkSetLocalDimmingAMD(device, swapChain, localDimmingEnable);
			return;
		}
		pfn_vkSetLocalDimmingAMD(device, swapChain, localDimmingEnable);
	}
#endif
#if defined(VK_KHR_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains) const {
		if(!this || !pfn_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR) {
			return staticPfn_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(physicalDevice, pTimeDomainCount, pTimeDomains);
		}
		return pfn_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(physicalDevice, pTimeDomainCount, pTimeDomains);
	}
#endif
#if defined(VK_EXT_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains) const {
		if(!this || !pfn_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT) {
			return staticPfn_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, pTimeDomainCount, pTimeDomains);
		}
		return pfn_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, pTimeDomainCount, pTimeDomains);
	}
#endif
#if defined(VK_KHR_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetCalibratedTimestampsKHR(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoEXT* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation) const {
		if(!this || !pfn_vkGetCalibratedTimestampsKHR) {
			return staticPfn_vkGetCalibratedTimestampsKHR(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
		}
		return pfn_vkGetCalibratedTimestampsKHR(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
	}
#endif
#if defined(VK_EXT_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetCalibratedTimestampsEXT(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoEXT* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation) const {
		if(!this || !pfn_vkGetCalibratedTimestampsEXT) {
			return staticPfn_vkGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
		}
		return pfn_vkGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
	}
#endif
#if defined(VK_EXT_debug_utils)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkSetDebugUtilsObjectNameEXT(VkDevice device, const VkDebugUtilsObjectNameInfoEXT* pNameInfo) const {
		if(!this || !pfn_vkSetDebugUtilsObjectNameEXT) {
			return staticPfn_vkSetDebugUtilsObjectNameEXT(device, pNameInfo);
		}
		return pfn_vkSetDebugUtilsObjectNameEXT(device, pNameInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkSetDebugUtilsObjectTagEXT(VkDevice device, const VkDebugUtilsObjectTagInfoEXT* pTagInfo) const {
		if(!this || !pfn_vkSetDebugUtilsObjectTagEXT) {
			return staticPfn_vkSetDebugUtilsObjectTagEXT(device, pTagInfo);
		}
		return pfn_vkSetDebugUtilsObjectTagEXT(device, pTagInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo) const {
		if(!this || !pfn_vkQueueBeginDebugUtilsLabelEXT) {
			staticPfn_vkQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
			return;
		}
		pfn_vkQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkQueueEndDebugUtilsLabelEXT(VkQueue queue) const {
		if(!this || !pfn_vkQueueEndDebugUtilsLabelEXT) {
			staticPfn_vkQueueEndDebugUtilsLabelEXT(queue);
			return;
		}
		pfn_vkQueueEndDebugUtilsLabelEXT(queue);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo) const {
		if(!this || !pfn_vkQueueInsertDebugUtilsLabelEXT) {
			staticPfn_vkQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
			return;
		}
		pfn_vkQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo) const {
		if(!this || !pfn_vkCmdBeginDebugUtilsLabelEXT) {
			staticPfn_vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
			return;
		}
		pfn_vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer) const {
		if(!this || !pfn_vkCmdEndDebugUtilsLabelEXT) {
			staticPfn_vkCmdEndDebugUtilsLabelEXT(commandBuffer);
			return;
		}
		pfn_vkCmdEndDebugUtilsLabelEXT(commandBuffer);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo) const {
		if(!this || !pfn_vkCmdInsertDebugUtilsLabelEXT) {
			staticPfn_vkCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
			return;
		}
		pfn_vkCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateDebugUtilsMessengerEXT(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pMessenger) const {
		if(!this || !pfn_vkCreateDebugUtilsMessengerEXT) {
			return staticPfn_vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);
		}
		return pfn_vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyDebugUtilsMessengerEXT) {
			staticPfn_vkDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);
			return;
		}
		pfn_vkDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData) const {
		if(!this || !pfn_vkSubmitDebugUtilsMessageEXT) {
			staticPfn_vkSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, pCallbackData);
			return;
		}
		pfn_vkSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, pCallbackData);
	}
#endif
#if defined(VK_EXT_external_memory_host) && (defined(VK_KHR_external_memory) || defined(VK_VERSION_1_1))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties) const {
		if(!this || !pfn_vkGetMemoryHostPointerPropertiesEXT) {
			return staticPfn_vkGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties);
		}
		return pfn_vkGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties);
	}
#endif
#if defined(VK_AMD_buffer_marker)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker) const {
		if(!this || !pfn_vkCmdWriteBufferMarkerAMD) {
			staticPfn_vkCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
			return;
		}
		pfn_vkCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
	}
#endif
#if defined(VK_VERSION_1_2)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateRenderPass2(VkDevice device, const VkRenderPassCreateInfo2KHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) const {
		if(!this || !pfn_vkCreateRenderPass2) {
			return staticPfn_vkCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);
		}
		return pfn_vkCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);
	}
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateRenderPass2KHR(VkDevice device, const VkRenderPassCreateInfo2KHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) const {
		if(!this || !pfn_vkCreateRenderPass2KHR) {
			return staticPfn_vkCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);
		}
		return pfn_vkCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);
	}
#endif
#if defined(VK_VERSION_1_2)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfoKHR* pSubpassBeginInfo) const {
		if(!this || !pfn_vkCmdBeginRenderPass2) {
			staticPfn_vkCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
			return;
		}
		pfn_vkCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
	}
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfoKHR* pSubpassBeginInfo) const {
		if(!this || !pfn_vkCmdBeginRenderPass2KHR) {
			staticPfn_vkCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
			return;
		}
		pfn_vkCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
	}
#endif
#if defined(VK_VERSION_1_2)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfoKHR* pSubpassBeginInfo, const VkSubpassEndInfoKHR* pSubpassEndInfo) const {
		if(!this || !pfn_vkCmdNextSubpass2) {
			staticPfn_vkCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
			return;
		}
		pfn_vkCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
	}
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfoKHR* pSubpassBeginInfo, const VkSubpassEndInfoKHR* pSubpassEndInfo) const {
		if(!this || !pfn_vkCmdNextSubpass2KHR) {
			staticPfn_vkCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
			return;
		}
		pfn_vkCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
	}
#endif
#if defined(VK_VERSION_1_2)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfoKHR* pSubpassEndInfo) const {
		if(!this || !pfn_vkCmdEndRenderPass2) {
			staticPfn_vkCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
			return;
		}
		pfn_vkCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
	}
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfoKHR* pSubpassEndInfo) const {
		if(!this || !pfn_vkCmdEndRenderPass2KHR) {
			staticPfn_vkCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
			return;
		}
		pfn_vkCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
	}
#endif
#if defined(VK_VERSION_1_2)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, uint64_t* pValue) const {
		if(!this || !pfn_vkGetSemaphoreCounterValue) {
			return staticPfn_vkGetSemaphoreCounterValue(device, semaphore, pValue);
		}
		return pfn_vkGetSemaphoreCounterValue(device, semaphore, pValue);
	}
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, uint64_t* pValue) const {
		if(!this || !pfn_vkGetSemaphoreCounterValueKHR) {
			return staticPfn_vkGetSemaphoreCounterValueKHR(device, semaphore, pValue);
		}
		return pfn_vkGetSemaphoreCounterValueKHR(device, semaphore, pValue);
	}
#endif
#if defined(VK_VERSION_1_2)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkWaitSemaphores(VkDevice device, const VkSemaphoreWaitInfoKHR* pWaitInfo, uint64_t timeout) const {
		if(!this || !pfn_vkWaitSemaphores) {
			return staticPfn_vkWaitSemaphores(device, pWaitInfo, timeout);
		}
		return pfn_vkWaitSemaphores(device, pWaitInfo, timeout);
	}
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkWaitSemaphoresKHR(VkDevice device, const VkSemaphoreWaitInfoKHR* pWaitInfo, uint64_t timeout) const {
		if(!this || !pfn_vkWaitSemaphoresKHR) {
			return staticPfn_vkWaitSemaphoresKHR(device, pWaitInfo, timeout);
		}
		return pfn_vkWaitSemaphoresKHR(device, pWaitInfo, timeout);
	}
#endif
#if defined(VK_VERSION_1_2)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkSignalSemaphore(VkDevice device, const VkSemaphoreSignalInfoKHR* pSignalInfo) const {
		if(!this || !pfn_vkSignalSemaphore) {
			return staticPfn_vkSignalSemaphore(device, pSignalInfo);
		}
		return pfn_vkSignalSemaphore(device, pSignalInfo);
	}
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkSignalSemaphoreKHR(VkDevice device, const VkSemaphoreSignalInfoKHR* pSignalInfo) const {
		if(!this || !pfn_vkSignalSemaphoreKHR) {
			return staticPfn_vkSignalSemaphoreKHR(device, pSignalInfo);
		}
		return pfn_vkSignalSemaphoreKHR(device, pSignalInfo);
	}
#endif
#if defined(VK_ANDROID_external_memory_android_hardware_buffer) && (defined(VK_KHR_sampler_ycbcr_conversion) && defined(VK_KHR_external_memory) && defined(VK_EXT_queue_family_foreign) && defined(VK_KHR_dedicated_allocation))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetAndroidHardwareBufferPropertiesANDROID(VkDevice device, const struct AHardwareBuffer* buffer, VkAndroidHardwareBufferPropertiesANDROID* pProperties) const {
		if(!this || !pfn_vkGetAndroidHardwareBufferPropertiesANDROID) {
			return staticPfn_vkGetAndroidHardwareBufferPropertiesANDROID(device, buffer, pProperties);
		}
		return pfn_vkGetAndroidHardwareBufferPropertiesANDROID(device, buffer, pProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetMemoryAndroidHardwareBufferANDROID(VkDevice device, const VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo, struct AHardwareBuffer** pBuffer) const {
		if(!this || !pfn_vkGetMemoryAndroidHardwareBufferANDROID) {
			return staticPfn_vkGetMemoryAndroidHardwareBufferANDROID(device, pInfo, pBuffer);
		}
		return pfn_vkGetMemoryAndroidHardwareBufferANDROID(device, pInfo, pBuffer);
	}
#endif
#if defined(VK_VERSION_1_2)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) const {
		if(!this || !pfn_vkCmdDrawIndirectCount) {
			staticPfn_vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
			return;
		}
		pfn_vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}
#endif
#if defined(VK_KHR_draw_indirect_count)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) const {
		if(!this || !pfn_vkCmdDrawIndirectCountKHR) {
			staticPfn_vkCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
			return;
		}
		pfn_vkCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}
#endif
#if defined(VK_AMD_draw_indirect_count)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) const {
		if(!this || !pfn_vkCmdDrawIndirectCountAMD) {
			staticPfn_vkCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
			return;
		}
		pfn_vkCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}
#endif
#if defined(VK_VERSION_1_2)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) const {
		if(!this || !pfn_vkCmdDrawIndexedIndirectCount) {
			staticPfn_vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
			return;
		}
		pfn_vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}
#endif
#if defined(VK_KHR_draw_indirect_count)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) const {
		if(!this || !pfn_vkCmdDrawIndexedIndirectCountKHR) {
			staticPfn_vkCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
			return;
		}
		pfn_vkCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}
#endif
#if defined(VK_AMD_draw_indirect_count)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) const {
		if(!this || !pfn_vkCmdDrawIndexedIndirectCountAMD) {
			staticPfn_vkCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
			return;
		}
		pfn_vkCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}
#endif
#if defined(VK_NV_device_diagnostic_checkpoints) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, const void* pCheckpointMarker) const {
		if(!this || !pfn_vkCmdSetCheckpointNV) {
			staticPfn_vkCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);
			return;
		}
		pfn_vkCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetQueueCheckpointDataNV(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData) const {
		if(!this || !pfn_vkGetQueueCheckpointDataNV) {
			staticPfn_vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);
			return;
		}
		pfn_vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);
	}
#endif
#if defined(VK_EXT_transform_feedback) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes) const {
		if(!this || !pfn_vkCmdBindTransformFeedbackBuffersEXT) {
			staticPfn_vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
			return;
		}
		pfn_vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets) const {
		if(!this || !pfn_vkCmdBeginTransformFeedbackEXT) {
			staticPfn_vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
			return;
		}
		pfn_vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets) const {
		if(!this || !pfn_vkCmdEndTransformFeedbackEXT) {
			staticPfn_vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
			return;
		}
		pfn_vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index) const {
		if(!this || !pfn_vkCmdBeginQueryIndexedEXT) {
			staticPfn_vkCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);
			return;
		}
		pfn_vkCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index) const {
		if(!this || !pfn_vkCmdEndQueryIndexedEXT) {
			staticPfn_vkCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);
			return;
		}
		pfn_vkCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride) const {
		if(!this || !pfn_vkCmdDrawIndirectByteCountEXT) {
			staticPfn_vkCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
			return;
		}
		pfn_vkCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
	}
#endif
#if defined(VK_NV_scissor_exclusive) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D* pExclusiveScissors) const {
		if(!this || !pfn_vkCmdSetExclusiveScissorNV) {
			staticPfn_vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
			return;
		}
		pfn_vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetExclusiveScissorEnableNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkBool32* pExclusiveScissorEnables) const {
		if(!this || !pfn_vkCmdSetExclusiveScissorEnableNV) {
			staticPfn_vkCmdSetExclusiveScissorEnableNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissorEnables);
			return;
		}
		pfn_vkCmdSetExclusiveScissorEnableNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissorEnables);
	}
#endif
#if defined(VK_NV_shading_rate_image) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout) const {
		if(!this || !pfn_vkCmdBindShadingRateImageNV) {
			staticPfn_vkCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
			return;
		}
		pfn_vkCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV* pShadingRatePalettes) const {
		if(!this || !pfn_vkCmdSetViewportShadingRatePaletteNV) {
			staticPfn_vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
			return;
		}
		pfn_vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV* pCustomSampleOrders) const {
		if(!this || !pfn_vkCmdSetCoarseSampleOrderNV) {
			staticPfn_vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
			return;
		}
		pfn_vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
	}
#endif
#if defined(VK_NV_mesh_shader) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask) const {
		if(!this || !pfn_vkCmdDrawMeshTasksNV) {
			staticPfn_vkCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
			return;
		}
		pfn_vkCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) const {
		if(!this || !pfn_vkCmdDrawMeshTasksIndirectNV) {
			staticPfn_vkCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
			return;
		}
		pfn_vkCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) const {
		if(!this || !pfn_vkCmdDrawMeshTasksIndirectCountNV) {
			staticPfn_vkCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
			return;
		}
		pfn_vkCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}
#endif
#if defined(VK_EXT_mesh_shader) && (defined(VK_KHR_spirv_1_4))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawMeshTasksEXT(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) const {
		if(!this || !pfn_vkCmdDrawMeshTasksEXT) {
			staticPfn_vkCmdDrawMeshTasksEXT(commandBuffer, groupCountX, groupCountY, groupCountZ);
			return;
		}
		pfn_vkCmdDrawMeshTasksEXT(commandBuffer, groupCountX, groupCountY, groupCountZ);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawMeshTasksIndirectEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) const {
		if(!this || !pfn_vkCmdDrawMeshTasksIndirectEXT) {
			staticPfn_vkCmdDrawMeshTasksIndirectEXT(commandBuffer, buffer, offset, drawCount, stride);
			return;
		}
		pfn_vkCmdDrawMeshTasksIndirectEXT(commandBuffer, buffer, offset, drawCount, stride);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDrawMeshTasksIndirectCountEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) const {
		if(!this || !pfn_vkCmdDrawMeshTasksIndirectCountEXT) {
			staticPfn_vkCmdDrawMeshTasksIndirectCountEXT(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
			return;
		}
		pfn_vkCmdDrawMeshTasksIndirectCountEXT(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
	}
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32_t shader) const {
		if(!this || !pfn_vkCompileDeferredNV) {
			return staticPfn_vkCompileDeferredNV(device, pipeline, shader);
		}
		return pfn_vkCompileDeferredNV(device, pipeline, shader);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateAccelerationStructureNV(VkDevice device, const VkAccelerationStructureCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkAccelerationStructureNV* pAccelerationStructure) const {
		if(!this || !pfn_vkCreateAccelerationStructureNV) {
			return staticPfn_vkCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure);
		}
		return pfn_vkCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure);
	}
#endif
#if defined(VK_HUAWEI_invocation_mask) && (defined(VK_KHR_ray_tracing_pipeline) && defined(VK_KHR_synchronization2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout) const {
		if(!this || !pfn_vkCmdBindInvocationMaskHUAWEI) {
			staticPfn_vkCmdBindInvocationMaskHUAWEI(commandBuffer, imageView, imageLayout);
			return;
		}
		pfn_vkCmdBindInvocationMaskHUAWEI(commandBuffer, imageView, imageLayout);
	}
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyAccelerationStructureKHR(VkDevice device, VkAccelerationStructureKHR accelerationStructure, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyAccelerationStructureKHR) {
			staticPfn_vkDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);
			return;
		}
		pfn_vkDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);
	}
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyAccelerationStructureNV) {
			staticPfn_vkDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);
			return;
		}
		pfn_vkDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) const {
		if(!this || !pfn_vkGetAccelerationStructureMemoryRequirementsNV) {
			staticPfn_vkGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
			return;
		}
		pfn_vkGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkBindAccelerationStructureMemoryNV(VkDevice device, uint32_t bindInfoCount, const VkBindAccelerationStructureMemoryInfoNV* pBindInfos) const {
		if(!this || !pfn_vkBindAccelerationStructureMemoryNV) {
			return staticPfn_vkBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);
		}
		return pfn_vkBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode) const {
		if(!this || !pfn_vkCmdCopyAccelerationStructureNV) {
			staticPfn_vkCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
			return;
		}
		pfn_vkCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
	}
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR* pInfo) const {
		if(!this || !pfn_vkCmdCopyAccelerationStructureKHR) {
			staticPfn_vkCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
			return;
		}
		pfn_vkCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCopyAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureInfoKHR* pInfo) const {
		if(!this || !pfn_vkCopyAccelerationStructureKHR) {
			return staticPfn_vkCopyAccelerationStructureKHR(device, deferredOperation, pInfo);
		}
		return pfn_vkCopyAccelerationStructureKHR(device, deferredOperation, pInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo) const {
		if(!this || !pfn_vkCmdCopyAccelerationStructureToMemoryKHR) {
			staticPfn_vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
			return;
		}
		pfn_vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCopyAccelerationStructureToMemoryKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo) const {
		if(!this || !pfn_vkCopyAccelerationStructureToMemoryKHR) {
			return staticPfn_vkCopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo);
		}
		return pfn_vkCopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo) const {
		if(!this || !pfn_vkCmdCopyMemoryToAccelerationStructureKHR) {
			staticPfn_vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
			return;
		}
		pfn_vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCopyMemoryToAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo) const {
		if(!this || !pfn_vkCopyMemoryToAccelerationStructureKHR) {
			return staticPfn_vkCopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo);
		}
		return pfn_vkCopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) const {
		if(!this || !pfn_vkCmdWriteAccelerationStructuresPropertiesKHR) {
			staticPfn_vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
			return;
		}
		pfn_vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
	}
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureNV* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) const {
		if(!this || !pfn_vkCmdWriteAccelerationStructuresPropertiesNV) {
			staticPfn_vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
			return;
		}
		pfn_vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset) const {
		if(!this || !pfn_vkCmdBuildAccelerationStructureNV) {
			staticPfn_vkCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
			return;
		}
		pfn_vkCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
	}
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkWriteAccelerationStructuresPropertiesKHR(VkDevice device, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, size_t dataSize, void* pData, size_t stride) const {
		if(!this || !pfn_vkWriteAccelerationStructuresPropertiesKHR) {
			return staticPfn_vkWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
		}
		return pfn_vkWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
	}
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdTraceRaysKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth) const {
		if(!this || !pfn_vkCmdTraceRaysKHR) {
			staticPfn_vkCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
			return;
		}
		pfn_vkCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
	}
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth) const {
		if(!this || !pfn_vkCmdTraceRaysNV) {
			staticPfn_vkCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
			return;
		}
		pfn_vkCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
	}
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetRayTracingShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData) const {
		if(!this || !pfn_vkGetRayTracingShaderGroupHandlesKHR) {
			return staticPfn_vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
		}
		return pfn_vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
	}
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData) const {
		if(!this || !pfn_vkGetRayTracingShaderGroupHandlesNV) {
			return staticPfn_vkGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, pData);
		}
		return pfn_vkGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, pData);
	}
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData) const {
		if(!this || !pfn_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR) {
			return staticPfn_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
		}
		return pfn_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
	}
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void* pData) const {
		if(!this || !pfn_vkGetAccelerationStructureHandleNV) {
			return staticPfn_vkGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);
		}
		return pfn_vkGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoNV* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) const {
		if(!this || !pfn_vkCreateRayTracingPipelinesNV) {
			return staticPfn_vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
		}
		return pfn_vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) const {
		if(!this || !pfn_vkCreateRayTracingPipelinesKHR) {
			return staticPfn_vkCreateRayTracingPipelinesKHR(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
		}
		return pfn_vkCreateRayTracingPipelinesKHR(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}
#endif
#if defined(VK_NV_cooperative_matrix) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV) {
			return staticPfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, pPropertyCount, pProperties);
		}
		return pfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, pPropertyCount, pProperties);
	}
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) const {
		if(!this || !pfn_vkCmdTraceRaysIndirectKHR) {
			staticPfn_vkCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
			return;
		}
		pfn_vkCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
	}
#endif
#if (defined(VK_KHR_ray_tracing_maintenance1) && (defined(VK_KHR_acceleration_structure))) && (defined(VK_KHR_ray_tracing_pipeline))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress) const {
		if(!this || !pfn_vkCmdTraceRaysIndirect2KHR) {
			staticPfn_vkCmdTraceRaysIndirect2KHR(commandBuffer, indirectDeviceAddress);
			return;
		}
		pfn_vkCmdTraceRaysIndirect2KHR(commandBuffer, indirectDeviceAddress);
	}
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice device, const VkAccelerationStructureVersionInfoKHR* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility) const {
		if(!this || !pfn_vkGetDeviceAccelerationStructureCompatibilityKHR) {
			staticPfn_vkGetDeviceAccelerationStructureCompatibilityKHR(device, pVersionInfo, pCompatibility);
			return;
		}
		pfn_vkGetDeviceAccelerationStructureCompatibilityKHR(device, pVersionInfo, pCompatibility);
	}
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
	VKAPI_ATTR VkDeviceSize VKAPI_CALL VulkanLoader::vkGetRayTracingShaderGroupStackSizeKHR(VkDevice device, VkPipeline pipeline, uint32_t group, VkShaderGroupShaderKHR groupShader) const {
		if(!this || !pfn_vkGetRayTracingShaderGroupStackSizeKHR) {
			return staticPfn_vkGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader);
		}
		return pfn_vkGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize) const {
		if(!this || !pfn_vkCmdSetRayTracingPipelineStackSizeKHR) {
			staticPfn_vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);
			return;
		}
		pfn_vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);
	}
#endif
#if defined(VK_NVX_image_view_handle)
	VKAPI_ATTR uint32_t VKAPI_CALL VulkanLoader::vkGetImageViewHandleNVX(VkDevice device, const VkImageViewHandleInfoNVX* pInfo) const {
		if(!this || !pfn_vkGetImageViewHandleNVX) {
			return staticPfn_vkGetImageViewHandleNVX(device, pInfo);
		}
		return pfn_vkGetImageViewHandleNVX(device, pInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetImageViewAddressNVX(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX* pProperties) const {
		if(!this || !pfn_vkGetImageViewAddressNVX) {
			return staticPfn_vkGetImageViewAddressNVX(device, imageView, pProperties);
		}
		return pfn_vkGetImageViewAddressNVX(device, imageView, pProperties);
	}
#endif
#if defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes) const {
		if(!this || !pfn_vkGetPhysicalDeviceSurfacePresentModes2EXT) {
			return staticPfn_vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes);
		}
		return pfn_vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes);
	}
#endif
#if ((defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))) && (defined(VK_KHR_device_group))) || ((defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))) && (defined(VK_VERSION_1_1)))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetDeviceGroupSurfacePresentModes2EXT(VkDevice device, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkDeviceGroupPresentModeFlagsKHR* pModes) const {
		if(!this || !pfn_vkGetDeviceGroupSurfacePresentModes2EXT) {
			return staticPfn_vkGetDeviceGroupSurfacePresentModes2EXT(device, pSurfaceInfo, pModes);
		}
		return pfn_vkGetDeviceGroupSurfacePresentModes2EXT(device, pSurfaceInfo, pModes);
	}
#endif
#if defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkAcquireFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain) const {
		if(!this || !pfn_vkAcquireFullScreenExclusiveModeEXT) {
			return staticPfn_vkAcquireFullScreenExclusiveModeEXT(device, swapchain);
		}
		return pfn_vkAcquireFullScreenExclusiveModeEXT(device, swapchain);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkReleaseFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain) const {
		if(!this || !pfn_vkReleaseFullScreenExclusiveModeEXT) {
			return staticPfn_vkReleaseFullScreenExclusiveModeEXT(device, swapchain);
		}
		return pfn_vkReleaseFullScreenExclusiveModeEXT(device, swapchain);
	}
#endif
#if defined(VK_KHR_performance_query) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t* pCounterCount, VkPerformanceCounterKHR* pCounters, VkPerformanceCounterDescriptionKHR* pCounterDescriptions) const {
		if(!this || !pfn_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR) {
			return staticPfn_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
		}
		return pfn_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, const VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, uint32_t* pNumPasses) const {
		if(!this || !pfn_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR) {
			staticPfn_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
			return;
		}
		pfn_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkAcquireProfilingLockKHR(VkDevice device, const VkAcquireProfilingLockInfoKHR* pInfo) const {
		if(!this || !pfn_vkAcquireProfilingLockKHR) {
			return staticPfn_vkAcquireProfilingLockKHR(device, pInfo);
		}
		return pfn_vkAcquireProfilingLockKHR(device, pInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkReleaseProfilingLockKHR(VkDevice device) const {
		if(!this || !pfn_vkReleaseProfilingLockKHR) {
			staticPfn_vkReleaseProfilingLockKHR(device);
			return;
		}
		pfn_vkReleaseProfilingLockKHR(device);
	}
#endif
#if defined(VK_EXT_image_drm_format_modifier) && (((defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_sampler_ycbcr_conversion)) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_image_format_list) || defined(VK_VERSION_1_2)))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* pProperties) const {
		if(!this || !pfn_vkGetImageDrmFormatModifierPropertiesEXT) {
			return staticPfn_vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);
		}
		return pfn_vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);
	}
#endif
#if defined(VK_VERSION_1_2)
	VKAPI_ATTR uint64_t VKAPI_CALL VulkanLoader::vkGetBufferOpaqueCaptureAddress(VkDevice device, const VkBufferDeviceAddressInfoKHR* pInfo) const {
		if(!this || !pfn_vkGetBufferOpaqueCaptureAddress) {
			return staticPfn_vkGetBufferOpaqueCaptureAddress(device, pInfo);
		}
		return pfn_vkGetBufferOpaqueCaptureAddress(device, pInfo);
	}
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
	VKAPI_ATTR uint64_t VKAPI_CALL VulkanLoader::vkGetBufferOpaqueCaptureAddressKHR(VkDevice device, const VkBufferDeviceAddressInfoKHR* pInfo) const {
		if(!this || !pfn_vkGetBufferOpaqueCaptureAddressKHR) {
			return staticPfn_vkGetBufferOpaqueCaptureAddressKHR(device, pInfo);
		}
		return pfn_vkGetBufferOpaqueCaptureAddressKHR(device, pInfo);
	}
#endif
#if defined(VK_VERSION_1_2)
	VKAPI_ATTR VkDeviceAddress VKAPI_CALL VulkanLoader::vkGetBufferDeviceAddress(VkDevice device, const VkBufferDeviceAddressInfoKHR* pInfo) const {
		if(!this || !pfn_vkGetBufferDeviceAddress) {
			return staticPfn_vkGetBufferDeviceAddress(device, pInfo);
		}
		return pfn_vkGetBufferDeviceAddress(device, pInfo);
	}
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
	VKAPI_ATTR VkDeviceAddress VKAPI_CALL VulkanLoader::vkGetBufferDeviceAddressKHR(VkDevice device, const VkBufferDeviceAddressInfoKHR* pInfo) const {
		if(!this || !pfn_vkGetBufferDeviceAddressKHR) {
			return staticPfn_vkGetBufferDeviceAddressKHR(device, pInfo);
		}
		return pfn_vkGetBufferDeviceAddressKHR(device, pInfo);
	}
#endif
#if defined(VK_EXT_buffer_device_address) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR VkDeviceAddress VKAPI_CALL VulkanLoader::vkGetBufferDeviceAddressEXT(VkDevice device, const VkBufferDeviceAddressInfoKHR* pInfo) const {
		if(!this || !pfn_vkGetBufferDeviceAddressEXT) {
			return staticPfn_vkGetBufferDeviceAddressEXT(device, pInfo);
		}
		return pfn_vkGetBufferDeviceAddressEXT(device, pInfo);
	}
#endif
#if defined(VK_EXT_headless_surface) && (defined(VK_KHR_surface))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateHeadlessSurfaceEXT(VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) const {
		if(!this || !pfn_vkCreateHeadlessSurfaceEXT) {
			return staticPfn_vkCreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
		}
		return pfn_vkCreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
	}
#endif
#if defined(VK_NV_coverage_reduction_mode) && (defined(VK_NV_framebuffer_mixed_samples) && defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint32_t* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations) const {
		if(!this || !pfn_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV) {
			return staticPfn_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, pCombinationCount, pCombinations);
		}
		return pfn_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, pCombinationCount, pCombinations);
	}
#endif
#if defined(VK_INTEL_performance_query)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkInitializePerformanceApiINTEL(VkDevice device, const VkInitializePerformanceApiInfoINTEL* pInitializeInfo) const {
		if(!this || !pfn_vkInitializePerformanceApiINTEL) {
			return staticPfn_vkInitializePerformanceApiINTEL(device, pInitializeInfo);
		}
		return pfn_vkInitializePerformanceApiINTEL(device, pInitializeInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkUninitializePerformanceApiINTEL(VkDevice device) const {
		if(!this || !pfn_vkUninitializePerformanceApiINTEL) {
			staticPfn_vkUninitializePerformanceApiINTEL(device);
			return;
		}
		pfn_vkUninitializePerformanceApiINTEL(device);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL* pMarkerInfo) const {
		if(!this || !pfn_vkCmdSetPerformanceMarkerINTEL) {
			return staticPfn_vkCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo);
		}
		return pfn_vkCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo) const {
		if(!this || !pfn_vkCmdSetPerformanceStreamMarkerINTEL) {
			return staticPfn_vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo);
		}
		return pfn_vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL* pOverrideInfo) const {
		if(!this || !pfn_vkCmdSetPerformanceOverrideINTEL) {
			return staticPfn_vkCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo);
		}
		return pfn_vkCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkAcquirePerformanceConfigurationINTEL(VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VkPerformanceConfigurationINTEL* pConfiguration) const {
		if(!this || !pfn_vkAcquirePerformanceConfigurationINTEL) {
			return staticPfn_vkAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration);
		}
		return pfn_vkAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration) const {
		if(!this || !pfn_vkReleasePerformanceConfigurationINTEL) {
			return staticPfn_vkReleasePerformanceConfigurationINTEL(device, configuration);
		}
		return pfn_vkReleasePerformanceConfigurationINTEL(device, configuration);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration) const {
		if(!this || !pfn_vkQueueSetPerformanceConfigurationINTEL) {
			return staticPfn_vkQueueSetPerformanceConfigurationINTEL(queue, configuration);
		}
		return pfn_vkQueueSetPerformanceConfigurationINTEL(queue, configuration);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue) const {
		if(!this || !pfn_vkGetPerformanceParameterINTEL) {
			return staticPfn_vkGetPerformanceParameterINTEL(device, parameter, pValue);
		}
		return pfn_vkGetPerformanceParameterINTEL(device, parameter, pValue);
	}
#endif
#if defined(VK_VERSION_1_2)
	VKAPI_ATTR uint64_t VKAPI_CALL VulkanLoader::vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfoKHR* pInfo) const {
		if(!this || !pfn_vkGetDeviceMemoryOpaqueCaptureAddress) {
			return staticPfn_vkGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);
		}
		return pfn_vkGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);
	}
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
	VKAPI_ATTR uint64_t VKAPI_CALL VulkanLoader::vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfoKHR* pInfo) const {
		if(!this || !pfn_vkGetDeviceMemoryOpaqueCaptureAddressKHR) {
			return staticPfn_vkGetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);
		}
		return pfn_vkGetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);
	}
#endif
#if defined(VK_KHR_pipeline_executable_properties) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPipelineExecutablePropertiesKHR(VkDevice device, const VkPipelineInfoKHR* pPipelineInfo, uint32_t* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties) const {
		if(!this || !pfn_vkGetPipelineExecutablePropertiesKHR) {
			return staticPfn_vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties);
		}
		return pfn_vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPipelineExecutableStatisticsKHR(VkDevice device, const VkPipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics) const {
		if(!this || !pfn_vkGetPipelineExecutableStatisticsKHR) {
			return staticPfn_vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics);
		}
		return pfn_vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, const VkPipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations) const {
		if(!this || !pfn_vkGetPipelineExecutableInternalRepresentationsKHR) {
			return staticPfn_vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
		}
		return pfn_vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
	}
#endif
#if defined(VK_KHR_line_rasterization) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetLineStippleKHR(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern) const {
		if(!this || !pfn_vkCmdSetLineStippleKHR) {
			staticPfn_vkCmdSetLineStippleKHR(commandBuffer, lineStippleFactor, lineStipplePattern);
			return;
		}
		pfn_vkCmdSetLineStippleKHR(commandBuffer, lineStippleFactor, lineStipplePattern);
	}
#endif
#if defined(VK_EXT_line_rasterization) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern) const {
		if(!this || !pfn_vkCmdSetLineStippleEXT) {
			staticPfn_vkCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
			return;
		}
		pfn_vkCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolPropertiesEXT* pToolProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceToolProperties) {
			return staticPfn_vkGetPhysicalDeviceToolProperties(physicalDevice, pToolCount, pToolProperties);
		}
		return pfn_vkGetPhysicalDeviceToolProperties(physicalDevice, pToolCount, pToolProperties);
	}
#endif
#if defined(VK_EXT_tooling_info)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolPropertiesEXT* pToolProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceToolPropertiesEXT) {
			return staticPfn_vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties);
		}
		return pfn_vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties);
	}
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateAccelerationStructureKHR(VkDevice device, const VkAccelerationStructureCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkAccelerationStructureKHR* pAccelerationStructure) const {
		if(!this || !pfn_vkCreateAccelerationStructureKHR) {
			return staticPfn_vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure);
		}
		return pfn_vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos) const {
		if(!this || !pfn_vkCmdBuildAccelerationStructuresKHR) {
			staticPfn_vkCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
			return;
		}
		pfn_vkCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkDeviceAddress* pIndirectDeviceAddresses, const uint32_t* pIndirectStrides, const uint32_t* const* ppMaxPrimitiveCounts) const {
		if(!this || !pfn_vkCmdBuildAccelerationStructuresIndirectKHR) {
			staticPfn_vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
			return;
		}
		pfn_vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkBuildAccelerationStructuresKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos) const {
		if(!this || !pfn_vkBuildAccelerationStructuresKHR) {
			return staticPfn_vkBuildAccelerationStructuresKHR(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
		}
		return pfn_vkBuildAccelerationStructuresKHR(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
	}
	VKAPI_ATTR VkDeviceAddress VKAPI_CALL VulkanLoader::vkGetAccelerationStructureDeviceAddressKHR(VkDevice device, const VkAccelerationStructureDeviceAddressInfoKHR* pInfo) const {
		if(!this || !pfn_vkGetAccelerationStructureDeviceAddressKHR) {
			return staticPfn_vkGetAccelerationStructureDeviceAddressKHR(device, pInfo);
		}
		return pfn_vkGetAccelerationStructureDeviceAddressKHR(device, pInfo);
	}
#endif
#if defined(VK_KHR_deferred_host_operations)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateDeferredOperationKHR(VkDevice device, const VkAllocationCallbacks* pAllocator, VkDeferredOperationKHR* pDeferredOperation) const {
		if(!this || !pfn_vkCreateDeferredOperationKHR) {
			return staticPfn_vkCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);
		}
		return pfn_vkCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyDeferredOperationKHR) {
			staticPfn_vkDestroyDeferredOperationKHR(device, operation, pAllocator);
			return;
		}
		pfn_vkDestroyDeferredOperationKHR(device, operation, pAllocator);
	}
	VKAPI_ATTR uint32_t VKAPI_CALL VulkanLoader::vkGetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation) const {
		if(!this || !pfn_vkGetDeferredOperationMaxConcurrencyKHR) {
			return staticPfn_vkGetDeferredOperationMaxConcurrencyKHR(device, operation);
		}
		return pfn_vkGetDeferredOperationMaxConcurrencyKHR(device, operation);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation) const {
		if(!this || !pfn_vkGetDeferredOperationResultKHR) {
			return staticPfn_vkGetDeferredOperationResultKHR(device, operation);
		}
		return pfn_vkGetDeferredOperationResultKHR(device, operation);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkDeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation) const {
		if(!this || !pfn_vkDeferredOperationJoinKHR) {
			return staticPfn_vkDeferredOperationJoinKHR(device, operation);
		}
		return pfn_vkDeferredOperationJoinKHR(device, operation);
	}
#endif
#if defined(VK_NV_device_generated_commands_compute) && (defined(VK_NV_device_generated_commands))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPipelineIndirectMemoryRequirementsNV(VkDevice device, const VkComputePipelineCreateInfo* pCreateInfo, VkMemoryRequirements2* pMemoryRequirements) const {
		if(!this || !pfn_vkGetPipelineIndirectMemoryRequirementsNV) {
			staticPfn_vkGetPipelineIndirectMemoryRequirementsNV(device, pCreateInfo, pMemoryRequirements);
			return;
		}
		pfn_vkGetPipelineIndirectMemoryRequirementsNV(device, pCreateInfo, pMemoryRequirements);
	}
	VKAPI_ATTR VkDeviceAddress VKAPI_CALL VulkanLoader::vkGetPipelineIndirectDeviceAddressNV(VkDevice device, const VkPipelineIndirectDeviceAddressInfoNV* pInfo) const {
		if(!this || !pfn_vkGetPipelineIndirectDeviceAddressNV) {
			return staticPfn_vkGetPipelineIndirectDeviceAddressNV(device, pInfo);
		}
		return pfn_vkGetPipelineIndirectDeviceAddressNV(device, pInfo);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode) const {
		if(!this || !pfn_vkCmdSetCullMode) {
			staticPfn_vkCmdSetCullMode(commandBuffer, cullMode);
			return;
		}
		pfn_vkCmdSetCullMode(commandBuffer, cullMode);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode) const {
		if(!this || !pfn_vkCmdSetCullModeEXT) {
			staticPfn_vkCmdSetCullModeEXT(commandBuffer, cullMode);
			return;
		}
		pfn_vkCmdSetCullModeEXT(commandBuffer, cullMode);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace) const {
		if(!this || !pfn_vkCmdSetFrontFace) {
			staticPfn_vkCmdSetFrontFace(commandBuffer, frontFace);
			return;
		}
		pfn_vkCmdSetFrontFace(commandBuffer, frontFace);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace) const {
		if(!this || !pfn_vkCmdSetFrontFaceEXT) {
			staticPfn_vkCmdSetFrontFaceEXT(commandBuffer, frontFace);
			return;
		}
		pfn_vkCmdSetFrontFaceEXT(commandBuffer, frontFace);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) const {
		if(!this || !pfn_vkCmdSetPrimitiveTopology) {
			staticPfn_vkCmdSetPrimitiveTopology(commandBuffer, primitiveTopology);
			return;
		}
		pfn_vkCmdSetPrimitiveTopology(commandBuffer, primitiveTopology);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) const {
		if(!this || !pfn_vkCmdSetPrimitiveTopologyEXT) {
			staticPfn_vkCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
			return;
		}
		pfn_vkCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports) const {
		if(!this || !pfn_vkCmdSetViewportWithCount) {
			staticPfn_vkCmdSetViewportWithCount(commandBuffer, viewportCount, pViewports);
			return;
		}
		pfn_vkCmdSetViewportWithCount(commandBuffer, viewportCount, pViewports);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports) const {
		if(!this || !pfn_vkCmdSetViewportWithCountEXT) {
			staticPfn_vkCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);
			return;
		}
		pfn_vkCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors) const {
		if(!this || !pfn_vkCmdSetScissorWithCount) {
			staticPfn_vkCmdSetScissorWithCount(commandBuffer, scissorCount, pScissors);
			return;
		}
		pfn_vkCmdSetScissorWithCount(commandBuffer, scissorCount, pScissors);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors) const {
		if(!this || !pfn_vkCmdSetScissorWithCountEXT) {
			staticPfn_vkCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);
			return;
		}
		pfn_vkCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);
	}
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBindIndexBuffer2KHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType) const {
		if(!this || !pfn_vkCmdBindIndexBuffer2KHR) {
			staticPfn_vkCmdBindIndexBuffer2KHR(commandBuffer, buffer, offset, size, indexType);
			return;
		}
		pfn_vkCmdBindIndexBuffer2KHR(commandBuffer, buffer, offset, size, indexType);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides) const {
		if(!this || !pfn_vkCmdBindVertexBuffers2) {
			staticPfn_vkCmdBindVertexBuffers2(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
			return;
		}
		pfn_vkCmdBindVertexBuffers2(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides) const {
		if(!this || !pfn_vkCmdBindVertexBuffers2EXT) {
			staticPfn_vkCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
			return;
		}
		pfn_vkCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable) const {
		if(!this || !pfn_vkCmdSetDepthTestEnable) {
			staticPfn_vkCmdSetDepthTestEnable(commandBuffer, depthTestEnable);
			return;
		}
		pfn_vkCmdSetDepthTestEnable(commandBuffer, depthTestEnable);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable) const {
		if(!this || !pfn_vkCmdSetDepthTestEnableEXT) {
			staticPfn_vkCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
			return;
		}
		pfn_vkCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable) const {
		if(!this || !pfn_vkCmdSetDepthWriteEnable) {
			staticPfn_vkCmdSetDepthWriteEnable(commandBuffer, depthWriteEnable);
			return;
		}
		pfn_vkCmdSetDepthWriteEnable(commandBuffer, depthWriteEnable);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable) const {
		if(!this || !pfn_vkCmdSetDepthWriteEnableEXT) {
			staticPfn_vkCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
			return;
		}
		pfn_vkCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp) const {
		if(!this || !pfn_vkCmdSetDepthCompareOp) {
			staticPfn_vkCmdSetDepthCompareOp(commandBuffer, depthCompareOp);
			return;
		}
		pfn_vkCmdSetDepthCompareOp(commandBuffer, depthCompareOp);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp) const {
		if(!this || !pfn_vkCmdSetDepthCompareOpEXT) {
			staticPfn_vkCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
			return;
		}
		pfn_vkCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable) const {
		if(!this || !pfn_vkCmdSetDepthBoundsTestEnable) {
			staticPfn_vkCmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable);
			return;
		}
		pfn_vkCmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable) const {
		if(!this || !pfn_vkCmdSetDepthBoundsTestEnableEXT) {
			staticPfn_vkCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);
			return;
		}
		pfn_vkCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable) const {
		if(!this || !pfn_vkCmdSetStencilTestEnable) {
			staticPfn_vkCmdSetStencilTestEnable(commandBuffer, stencilTestEnable);
			return;
		}
		pfn_vkCmdSetStencilTestEnable(commandBuffer, stencilTestEnable);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable) const {
		if(!this || !pfn_vkCmdSetStencilTestEnableEXT) {
			staticPfn_vkCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
			return;
		}
		pfn_vkCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) const {
		if(!this || !pfn_vkCmdSetStencilOp) {
			staticPfn_vkCmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
			return;
		}
		pfn_vkCmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) const {
		if(!this || !pfn_vkCmdSetStencilOpEXT) {
			staticPfn_vkCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
			return;
		}
		pfn_vkCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints) const {
		if(!this || !pfn_vkCmdSetPatchControlPointsEXT) {
			staticPfn_vkCmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);
			return;
		}
		pfn_vkCmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable) const {
		if(!this || !pfn_vkCmdSetRasterizerDiscardEnable) {
			staticPfn_vkCmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable);
			return;
		}
		pfn_vkCmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable) const {
		if(!this || !pfn_vkCmdSetRasterizerDiscardEnableEXT) {
			staticPfn_vkCmdSetRasterizerDiscardEnableEXT(commandBuffer, rasterizerDiscardEnable);
			return;
		}
		pfn_vkCmdSetRasterizerDiscardEnableEXT(commandBuffer, rasterizerDiscardEnable);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable) const {
		if(!this || !pfn_vkCmdSetDepthBiasEnable) {
			staticPfn_vkCmdSetDepthBiasEnable(commandBuffer, depthBiasEnable);
			return;
		}
		pfn_vkCmdSetDepthBiasEnable(commandBuffer, depthBiasEnable);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable) const {
		if(!this || !pfn_vkCmdSetDepthBiasEnableEXT) {
			staticPfn_vkCmdSetDepthBiasEnableEXT(commandBuffer, depthBiasEnable);
			return;
		}
		pfn_vkCmdSetDepthBiasEnableEXT(commandBuffer, depthBiasEnable);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp) const {
		if(!this || !pfn_vkCmdSetLogicOpEXT) {
			staticPfn_vkCmdSetLogicOpEXT(commandBuffer, logicOp);
			return;
		}
		pfn_vkCmdSetLogicOpEXT(commandBuffer, logicOp);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable) const {
		if(!this || !pfn_vkCmdSetPrimitiveRestartEnable) {
			staticPfn_vkCmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable);
			return;
		}
		pfn_vkCmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable) const {
		if(!this || !pfn_vkCmdSetPrimitiveRestartEnableEXT) {
			staticPfn_vkCmdSetPrimitiveRestartEnableEXT(commandBuffer, primitiveRestartEnable);
			return;
		}
		pfn_vkCmdSetPrimitiveRestartEnableEXT(commandBuffer, primitiveRestartEnable);
	}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_KHR_maintenance2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetTessellationDomainOriginEXT(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin) const {
		if(!this || !pfn_vkCmdSetTessellationDomainOriginEXT) {
			staticPfn_vkCmdSetTessellationDomainOriginEXT(commandBuffer, domainOrigin);
			return;
		}
		pfn_vkCmdSetTessellationDomainOriginEXT(commandBuffer, domainOrigin);
	}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDepthClampEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable) const {
		if(!this || !pfn_vkCmdSetDepthClampEnableEXT) {
			staticPfn_vkCmdSetDepthClampEnableEXT(commandBuffer, depthClampEnable);
			return;
		}
		pfn_vkCmdSetDepthClampEnableEXT(commandBuffer, depthClampEnable);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetPolygonModeEXT(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode) const {
		if(!this || !pfn_vkCmdSetPolygonModeEXT) {
			staticPfn_vkCmdSetPolygonModeEXT(commandBuffer, polygonMode);
			return;
		}
		pfn_vkCmdSetPolygonModeEXT(commandBuffer, polygonMode);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetRasterizationSamplesEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits rasterizationSamples) const {
		if(!this || !pfn_vkCmdSetRasterizationSamplesEXT) {
			staticPfn_vkCmdSetRasterizationSamplesEXT(commandBuffer, rasterizationSamples);
			return;
		}
		pfn_vkCmdSetRasterizationSamplesEXT(commandBuffer, rasterizationSamples);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetSampleMaskEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples, const VkSampleMask* pSampleMask) const {
		if(!this || !pfn_vkCmdSetSampleMaskEXT) {
			staticPfn_vkCmdSetSampleMaskEXT(commandBuffer, samples, pSampleMask);
			return;
		}
		pfn_vkCmdSetSampleMaskEXT(commandBuffer, samples, pSampleMask);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetAlphaToCoverageEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable) const {
		if(!this || !pfn_vkCmdSetAlphaToCoverageEnableEXT) {
			staticPfn_vkCmdSetAlphaToCoverageEnableEXT(commandBuffer, alphaToCoverageEnable);
			return;
		}
		pfn_vkCmdSetAlphaToCoverageEnableEXT(commandBuffer, alphaToCoverageEnable);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetAlphaToOneEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable) const {
		if(!this || !pfn_vkCmdSetAlphaToOneEnableEXT) {
			staticPfn_vkCmdSetAlphaToOneEnableEXT(commandBuffer, alphaToOneEnable);
			return;
		}
		pfn_vkCmdSetAlphaToOneEnableEXT(commandBuffer, alphaToOneEnable);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetLogicOpEnableEXT(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable) const {
		if(!this || !pfn_vkCmdSetLogicOpEnableEXT) {
			staticPfn_vkCmdSetLogicOpEnableEXT(commandBuffer, logicOpEnable);
			return;
		}
		pfn_vkCmdSetLogicOpEnableEXT(commandBuffer, logicOpEnable);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetColorBlendEnableEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkBool32* pColorBlendEnables) const {
		if(!this || !pfn_vkCmdSetColorBlendEnableEXT) {
			staticPfn_vkCmdSetColorBlendEnableEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendEnables);
			return;
		}
		pfn_vkCmdSetColorBlendEnableEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendEnables);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetColorBlendEquationEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendEquationEXT* pColorBlendEquations) const {
		if(!this || !pfn_vkCmdSetColorBlendEquationEXT) {
			staticPfn_vkCmdSetColorBlendEquationEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendEquations);
			return;
		}
		pfn_vkCmdSetColorBlendEquationEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendEquations);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetColorWriteMaskEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorComponentFlags* pColorWriteMasks) const {
		if(!this || !pfn_vkCmdSetColorWriteMaskEXT) {
			staticPfn_vkCmdSetColorWriteMaskEXT(commandBuffer, firstAttachment, attachmentCount, pColorWriteMasks);
			return;
		}
		pfn_vkCmdSetColorWriteMaskEXT(commandBuffer, firstAttachment, attachmentCount, pColorWriteMasks);
	}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_transform_feedback))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_transform_feedback)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetRasterizationStreamEXT(VkCommandBuffer commandBuffer, uint32_t rasterizationStream) const {
		if(!this || !pfn_vkCmdSetRasterizationStreamEXT) {
			staticPfn_vkCmdSetRasterizationStreamEXT(commandBuffer, rasterizationStream);
			return;
		}
		pfn_vkCmdSetRasterizationStreamEXT(commandBuffer, rasterizationStream);
	}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_conservative_rasterization))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_conservative_rasterization)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetConservativeRasterizationModeEXT(VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode) const {
		if(!this || !pfn_vkCmdSetConservativeRasterizationModeEXT) {
			staticPfn_vkCmdSetConservativeRasterizationModeEXT(commandBuffer, conservativeRasterizationMode);
			return;
		}
		pfn_vkCmdSetConservativeRasterizationModeEXT(commandBuffer, conservativeRasterizationMode);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize) const {
		if(!this || !pfn_vkCmdSetExtraPrimitiveOverestimationSizeEXT) {
			staticPfn_vkCmdSetExtraPrimitiveOverestimationSizeEXT(commandBuffer, extraPrimitiveOverestimationSize);
			return;
		}
		pfn_vkCmdSetExtraPrimitiveOverestimationSizeEXT(commandBuffer, extraPrimitiveOverestimationSize);
	}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_depth_clip_enable))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_depth_clip_enable)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDepthClipEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable) const {
		if(!this || !pfn_vkCmdSetDepthClipEnableEXT) {
			staticPfn_vkCmdSetDepthClipEnableEXT(commandBuffer, depthClipEnable);
			return;
		}
		pfn_vkCmdSetDepthClipEnableEXT(commandBuffer, depthClipEnable);
	}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_sample_locations))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_sample_locations)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetSampleLocationsEnableEXT(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable) const {
		if(!this || !pfn_vkCmdSetSampleLocationsEnableEXT) {
			staticPfn_vkCmdSetSampleLocationsEnableEXT(commandBuffer, sampleLocationsEnable);
			return;
		}
		pfn_vkCmdSetSampleLocationsEnableEXT(commandBuffer, sampleLocationsEnable);
	}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_blend_operation_advanced))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_blend_operation_advanced)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetColorBlendAdvancedEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendAdvancedEXT* pColorBlendAdvanced) const {
		if(!this || !pfn_vkCmdSetColorBlendAdvancedEXT) {
			staticPfn_vkCmdSetColorBlendAdvancedEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendAdvanced);
			return;
		}
		pfn_vkCmdSetColorBlendAdvancedEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendAdvanced);
	}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_provoking_vertex))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_provoking_vertex)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetProvokingVertexModeEXT(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode) const {
		if(!this || !pfn_vkCmdSetProvokingVertexModeEXT) {
			staticPfn_vkCmdSetProvokingVertexModeEXT(commandBuffer, provokingVertexMode);
			return;
		}
		pfn_vkCmdSetProvokingVertexModeEXT(commandBuffer, provokingVertexMode);
	}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_line_rasterization))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_line_rasterization)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetLineRasterizationModeEXT(VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode) const {
		if(!this || !pfn_vkCmdSetLineRasterizationModeEXT) {
			staticPfn_vkCmdSetLineRasterizationModeEXT(commandBuffer, lineRasterizationMode);
			return;
		}
		pfn_vkCmdSetLineRasterizationModeEXT(commandBuffer, lineRasterizationMode);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetLineStippleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable) const {
		if(!this || !pfn_vkCmdSetLineStippleEnableEXT) {
			staticPfn_vkCmdSetLineStippleEnableEXT(commandBuffer, stippledLineEnable);
			return;
		}
		pfn_vkCmdSetLineStippleEnableEXT(commandBuffer, stippledLineEnable);
	}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_depth_clip_control))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_depth_clip_control)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDepthClipNegativeOneToOneEXT(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne) const {
		if(!this || !pfn_vkCmdSetDepthClipNegativeOneToOneEXT) {
			staticPfn_vkCmdSetDepthClipNegativeOneToOneEXT(commandBuffer, negativeOneToOne);
			return;
		}
		pfn_vkCmdSetDepthClipNegativeOneToOneEXT(commandBuffer, negativeOneToOne);
	}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_clip_space_w_scaling))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_clip_space_w_scaling)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetViewportWScalingEnableNV(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable) const {
		if(!this || !pfn_vkCmdSetViewportWScalingEnableNV) {
			staticPfn_vkCmdSetViewportWScalingEnableNV(commandBuffer, viewportWScalingEnable);
			return;
		}
		pfn_vkCmdSetViewportWScalingEnableNV(commandBuffer, viewportWScalingEnable);
	}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_viewport_swizzle))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_viewport_swizzle)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetViewportSwizzleNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportSwizzleNV* pViewportSwizzles) const {
		if(!this || !pfn_vkCmdSetViewportSwizzleNV) {
			staticPfn_vkCmdSetViewportSwizzleNV(commandBuffer, firstViewport, viewportCount, pViewportSwizzles);
			return;
		}
		pfn_vkCmdSetViewportSwizzleNV(commandBuffer, firstViewport, viewportCount, pViewportSwizzles);
	}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_fragment_coverage_to_color))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_fragment_coverage_to_color)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetCoverageToColorEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable) const {
		if(!this || !pfn_vkCmdSetCoverageToColorEnableNV) {
			staticPfn_vkCmdSetCoverageToColorEnableNV(commandBuffer, coverageToColorEnable);
			return;
		}
		pfn_vkCmdSetCoverageToColorEnableNV(commandBuffer, coverageToColorEnable);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetCoverageToColorLocationNV(VkCommandBuffer commandBuffer, uint32_t coverageToColorLocation) const {
		if(!this || !pfn_vkCmdSetCoverageToColorLocationNV) {
			staticPfn_vkCmdSetCoverageToColorLocationNV(commandBuffer, coverageToColorLocation);
			return;
		}
		pfn_vkCmdSetCoverageToColorLocationNV(commandBuffer, coverageToColorLocation);
	}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_framebuffer_mixed_samples))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_framebuffer_mixed_samples)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetCoverageModulationModeNV(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode) const {
		if(!this || !pfn_vkCmdSetCoverageModulationModeNV) {
			staticPfn_vkCmdSetCoverageModulationModeNV(commandBuffer, coverageModulationMode);
			return;
		}
		pfn_vkCmdSetCoverageModulationModeNV(commandBuffer, coverageModulationMode);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetCoverageModulationTableEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable) const {
		if(!this || !pfn_vkCmdSetCoverageModulationTableEnableNV) {
			staticPfn_vkCmdSetCoverageModulationTableEnableNV(commandBuffer, coverageModulationTableEnable);
			return;
		}
		pfn_vkCmdSetCoverageModulationTableEnableNV(commandBuffer, coverageModulationTableEnable);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetCoverageModulationTableNV(VkCommandBuffer commandBuffer, uint32_t coverageModulationTableCount, const float* pCoverageModulationTable) const {
		if(!this || !pfn_vkCmdSetCoverageModulationTableNV) {
			staticPfn_vkCmdSetCoverageModulationTableNV(commandBuffer, coverageModulationTableCount, pCoverageModulationTable);
			return;
		}
		pfn_vkCmdSetCoverageModulationTableNV(commandBuffer, coverageModulationTableCount, pCoverageModulationTable);
	}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_shading_rate_image))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_shading_rate_image)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetShadingRateImageEnableNV(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable) const {
		if(!this || !pfn_vkCmdSetShadingRateImageEnableNV) {
			staticPfn_vkCmdSetShadingRateImageEnableNV(commandBuffer, shadingRateImageEnable);
			return;
		}
		pfn_vkCmdSetShadingRateImageEnableNV(commandBuffer, shadingRateImageEnable);
	}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_coverage_reduction_mode))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_coverage_reduction_mode)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetCoverageReductionModeNV(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode) const {
		if(!this || !pfn_vkCmdSetCoverageReductionModeNV) {
			staticPfn_vkCmdSetCoverageReductionModeNV(commandBuffer, coverageReductionMode);
			return;
		}
		pfn_vkCmdSetCoverageReductionModeNV(commandBuffer, coverageReductionMode);
	}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_representative_fragment_test))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_representative_fragment_test)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetRepresentativeFragmentTestEnableNV(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable) const {
		if(!this || !pfn_vkCmdSetRepresentativeFragmentTestEnableNV) {
			staticPfn_vkCmdSetRepresentativeFragmentTestEnableNV(commandBuffer, representativeFragmentTestEnable);
			return;
		}
		pfn_vkCmdSetRepresentativeFragmentTestEnableNV(commandBuffer, representativeFragmentTestEnable);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreatePrivateDataSlot(VkDevice device, const VkPrivateDataSlotCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPrivateDataSlotEXT* pPrivateDataSlot) const {
		if(!this || !pfn_vkCreatePrivateDataSlot) {
			return staticPfn_vkCreatePrivateDataSlot(device, pCreateInfo, pAllocator, pPrivateDataSlot);
		}
		return pfn_vkCreatePrivateDataSlot(device, pCreateInfo, pAllocator, pPrivateDataSlot);
	}
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreatePrivateDataSlotEXT(VkDevice device, const VkPrivateDataSlotCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPrivateDataSlotEXT* pPrivateDataSlot) const {
		if(!this || !pfn_vkCreatePrivateDataSlotEXT) {
			return staticPfn_vkCreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);
		}
		return pfn_vkCreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlotEXT privateDataSlot, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyPrivateDataSlot) {
			staticPfn_vkDestroyPrivateDataSlot(device, privateDataSlot, pAllocator);
			return;
		}
		pfn_vkDestroyPrivateDataSlot(device, privateDataSlot, pAllocator);
	}
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlotEXT privateDataSlot, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyPrivateDataSlotEXT) {
			staticPfn_vkDestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);
			return;
		}
		pfn_vkDestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlotEXT privateDataSlot, uint64_t data) const {
		if(!this || !pfn_vkSetPrivateData) {
			return staticPfn_vkSetPrivateData(device, objectType, objectHandle, privateDataSlot, data);
		}
		return pfn_vkSetPrivateData(device, objectType, objectHandle, privateDataSlot, data);
	}
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlotEXT privateDataSlot, uint64_t data) const {
		if(!this || !pfn_vkSetPrivateDataEXT) {
			return staticPfn_vkSetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data);
		}
		return pfn_vkSetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlotEXT privateDataSlot, uint64_t* pData) const {
		if(!this || !pfn_vkGetPrivateData) {
			staticPfn_vkGetPrivateData(device, objectType, objectHandle, privateDataSlot, pData);
			return;
		}
		pfn_vkGetPrivateData(device, objectType, objectHandle, privateDataSlot, pData);
	}
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlotEXT privateDataSlot, uint64_t* pData) const {
		if(!this || !pfn_vkGetPrivateDataEXT) {
			staticPfn_vkGetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);
			return;
		}
		pfn_vkGetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2KHR* pCopyBufferInfo) const {
		if(!this || !pfn_vkCmdCopyBuffer2) {
			staticPfn_vkCmdCopyBuffer2(commandBuffer, pCopyBufferInfo);
			return;
		}
		pfn_vkCmdCopyBuffer2(commandBuffer, pCopyBufferInfo);
	}
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2KHR* pCopyBufferInfo) const {
		if(!this || !pfn_vkCmdCopyBuffer2KHR) {
			staticPfn_vkCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);
			return;
		}
		pfn_vkCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo2KHR* pCopyImageInfo) const {
		if(!this || !pfn_vkCmdCopyImage2) {
			staticPfn_vkCmdCopyImage2(commandBuffer, pCopyImageInfo);
			return;
		}
		pfn_vkCmdCopyImage2(commandBuffer, pCopyImageInfo);
	}
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2KHR* pCopyImageInfo) const {
		if(!this || !pfn_vkCmdCopyImage2KHR) {
			staticPfn_vkCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);
			return;
		}
		pfn_vkCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo2KHR* pBlitImageInfo) const {
		if(!this || !pfn_vkCmdBlitImage2) {
			staticPfn_vkCmdBlitImage2(commandBuffer, pBlitImageInfo);
			return;
		}
		pfn_vkCmdBlitImage2(commandBuffer, pBlitImageInfo);
	}
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2KHR* pBlitImageInfo) const {
		if(!this || !pfn_vkCmdBlitImage2KHR) {
			staticPfn_vkCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);
			return;
		}
		pfn_vkCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2KHR* pCopyBufferToImageInfo) const {
		if(!this || !pfn_vkCmdCopyBufferToImage2) {
			staticPfn_vkCmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo);
			return;
		}
		pfn_vkCmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo);
	}
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2KHR* pCopyBufferToImageInfo) const {
		if(!this || !pfn_vkCmdCopyBufferToImage2KHR) {
			staticPfn_vkCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);
			return;
		}
		pfn_vkCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2KHR* pCopyImageToBufferInfo) const {
		if(!this || !pfn_vkCmdCopyImageToBuffer2) {
			staticPfn_vkCmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo);
			return;
		}
		pfn_vkCmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo);
	}
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2KHR* pCopyImageToBufferInfo) const {
		if(!this || !pfn_vkCmdCopyImageToBuffer2KHR) {
			staticPfn_vkCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);
			return;
		}
		pfn_vkCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveImageInfo2KHR* pResolveImageInfo) const {
		if(!this || !pfn_vkCmdResolveImage2) {
			staticPfn_vkCmdResolveImage2(commandBuffer, pResolveImageInfo);
			return;
		}
		pfn_vkCmdResolveImage2(commandBuffer, pResolveImageInfo);
	}
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2KHR* pResolveImageInfo) const {
		if(!this || !pfn_vkCmdResolveImage2KHR) {
			staticPfn_vkCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);
			return;
		}
		pfn_vkCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);
	}
#endif
#if defined(VK_KHR_object_refresh)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdRefreshObjectsKHR(VkCommandBuffer commandBuffer, const VkRefreshObjectListKHR* pRefreshObjects) const {
		if(!this || !pfn_vkCmdRefreshObjectsKHR) {
			staticPfn_vkCmdRefreshObjectsKHR(commandBuffer, pRefreshObjects);
			return;
		}
		pfn_vkCmdRefreshObjectsKHR(commandBuffer, pRefreshObjects);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceRefreshableObjectTypesKHR(VkPhysicalDevice physicalDevice, uint32_t* pRefreshableObjectTypeCount, VkObjectType* pRefreshableObjectTypes) const {
		if(!this || !pfn_vkGetPhysicalDeviceRefreshableObjectTypesKHR) {
			return staticPfn_vkGetPhysicalDeviceRefreshableObjectTypesKHR(physicalDevice, pRefreshableObjectTypeCount, pRefreshableObjectTypes);
		}
		return pfn_vkGetPhysicalDeviceRefreshableObjectTypesKHR(physicalDevice, pRefreshableObjectTypeCount, pRefreshableObjectTypes);
	}
#endif
#if defined(VK_KHR_fragment_shading_rate) && ((defined(VK_KHR_create_renderpass2) || defined(VK_VERSION_1_2)) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D* pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps[2]) const {
		if(!this || !pfn_vkCmdSetFragmentShadingRateKHR) {
			staticPfn_vkCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
			return;
		}
		pfn_vkCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice, uint32_t* pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates) const {
		if(!this || !pfn_vkGetPhysicalDeviceFragmentShadingRatesKHR) {
			return staticPfn_vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
		}
		return pfn_vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
	}
#endif
#if defined(VK_NV_fragment_shading_rate_enums) && (defined(VK_KHR_fragment_shading_rate))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, const VkFragmentShadingRateCombinerOpKHR combinerOps[2]) const {
		if(!this || !pfn_vkCmdSetFragmentShadingRateEnumNV) {
			staticPfn_vkCmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);
			return;
		}
		pfn_vkCmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);
	}
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetAccelerationStructureBuildSizesKHR(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo, const uint32_t* pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo) const {
		if(!this || !pfn_vkGetAccelerationStructureBuildSizesKHR) {
			staticPfn_vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
			return;
		}
		pfn_vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
	}
#endif
#if (defined(VK_EXT_vertex_input_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions) const {
		if(!this || !pfn_vkCmdSetVertexInputEXT) {
			staticPfn_vkCmdSetVertexInputEXT(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
			return;
		}
		pfn_vkCmdSetVertexInputEXT(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
	}
#endif
#if defined(VK_EXT_color_write_enable) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkBool32* pColorWriteEnables) const {
		if(!this || !pfn_vkCmdSetColorWriteEnableEXT) {
			staticPfn_vkCmdSetColorWriteEnableEXT(commandBuffer, attachmentCount, pColorWriteEnables);
			return;
		}
		pfn_vkCmdSetColorWriteEnableEXT(commandBuffer, attachmentCount, pColorWriteEnables);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfoKHR* pDependencyInfo) const {
		if(!this || !pfn_vkCmdSetEvent2) {
			staticPfn_vkCmdSetEvent2(commandBuffer, event, pDependencyInfo);
			return;
		}
		pfn_vkCmdSetEvent2(commandBuffer, event, pDependencyInfo);
	}
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfoKHR* pDependencyInfo) const {
		if(!this || !pfn_vkCmdSetEvent2KHR) {
			staticPfn_vkCmdSetEvent2KHR(commandBuffer, event, pDependencyInfo);
			return;
		}
		pfn_vkCmdSetEvent2KHR(commandBuffer, event, pDependencyInfo);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2KHR stageMask) const {
		if(!this || !pfn_vkCmdResetEvent2) {
			staticPfn_vkCmdResetEvent2(commandBuffer, event, stageMask);
			return;
		}
		pfn_vkCmdResetEvent2(commandBuffer, event, stageMask);
	}
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2KHR stageMask) const {
		if(!this || !pfn_vkCmdResetEvent2KHR) {
			staticPfn_vkCmdResetEvent2KHR(commandBuffer, event, stageMask);
			return;
		}
		pfn_vkCmdResetEvent2KHR(commandBuffer, event, stageMask);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfoKHR* pDependencyInfos) const {
		if(!this || !pfn_vkCmdWaitEvents2) {
			staticPfn_vkCmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos);
			return;
		}
		pfn_vkCmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos);
	}
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfoKHR* pDependencyInfos) const {
		if(!this || !pfn_vkCmdWaitEvents2KHR) {
			staticPfn_vkCmdWaitEvents2KHR(commandBuffer, eventCount, pEvents, pDependencyInfos);
			return;
		}
		pfn_vkCmdWaitEvents2KHR(commandBuffer, eventCount, pEvents, pDependencyInfos);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfoKHR* pDependencyInfo) const {
		if(!this || !pfn_vkCmdPipelineBarrier2) {
			staticPfn_vkCmdPipelineBarrier2(commandBuffer, pDependencyInfo);
			return;
		}
		pfn_vkCmdPipelineBarrier2(commandBuffer, pDependencyInfo);
	}
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfoKHR* pDependencyInfo) const {
		if(!this || !pfn_vkCmdPipelineBarrier2KHR) {
			staticPfn_vkCmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);
			return;
		}
		pfn_vkCmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkQueueSubmit2(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2KHR* pSubmits, VkFence fence) const {
		if(!this || !pfn_vkQueueSubmit2) {
			return staticPfn_vkQueueSubmit2(queue, submitCount, pSubmits, fence);
		}
		return pfn_vkQueueSubmit2(queue, submitCount, pSubmits, fence);
	}
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkQueueSubmit2KHR(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2KHR* pSubmits, VkFence fence) const {
		if(!this || !pfn_vkQueueSubmit2KHR) {
			return staticPfn_vkQueueSubmit2KHR(queue, submitCount, pSubmits, fence);
		}
		return pfn_vkQueueSubmit2KHR(queue, submitCount, pSubmits, fence);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2KHR stage, VkQueryPool queryPool, uint32_t query) const {
		if(!this || !pfn_vkCmdWriteTimestamp2) {
			staticPfn_vkCmdWriteTimestamp2(commandBuffer, stage, queryPool, query);
			return;
		}
		pfn_vkCmdWriteTimestamp2(commandBuffer, stage, queryPool, query);
	}
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2KHR stage, VkQueryPool queryPool, uint32_t query) const {
		if(!this || !pfn_vkCmdWriteTimestamp2KHR) {
			staticPfn_vkCmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query);
			return;
		}
		pfn_vkCmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query);
	}
#endif
#if (defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) && (defined(VK_AMD_buffer_marker))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker) const {
		if(!this || !pfn_vkCmdWriteBufferMarker2AMD) {
			staticPfn_vkCmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer, dstOffset, marker);
			return;
		}
		pfn_vkCmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer, dstOffset, marker);
	}
#endif
#if (defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) && (defined(VK_NV_device_diagnostic_checkpoints))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetQueueCheckpointData2NV(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointData2NV* pCheckpointData) const {
		if(!this || !pfn_vkGetQueueCheckpointData2NV) {
			staticPfn_vkGetQueueCheckpointData2NV(queue, pCheckpointDataCount, pCheckpointData);
			return;
		}
		pfn_vkGetQueueCheckpointData2NV(queue, pCheckpointDataCount, pCheckpointData);
	}
#endif
#if defined(VK_EXT_host_image_copy) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_copy_commands2) && defined(VK_KHR_format_feature_flags2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCopyMemoryToImageEXT(VkDevice device, const VkCopyMemoryToImageInfoEXT* pCopyMemoryToImageInfo) const {
		if(!this || !pfn_vkCopyMemoryToImageEXT) {
			return staticPfn_vkCopyMemoryToImageEXT(device, pCopyMemoryToImageInfo);
		}
		return pfn_vkCopyMemoryToImageEXT(device, pCopyMemoryToImageInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCopyImageToMemoryEXT(VkDevice device, const VkCopyImageToMemoryInfoEXT* pCopyImageToMemoryInfo) const {
		if(!this || !pfn_vkCopyImageToMemoryEXT) {
			return staticPfn_vkCopyImageToMemoryEXT(device, pCopyImageToMemoryInfo);
		}
		return pfn_vkCopyImageToMemoryEXT(device, pCopyImageToMemoryInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCopyImageToImageEXT(VkDevice device, const VkCopyImageToImageInfoEXT* pCopyImageToImageInfo) const {
		if(!this || !pfn_vkCopyImageToImageEXT) {
			return staticPfn_vkCopyImageToImageEXT(device, pCopyImageToImageInfo);
		}
		return pfn_vkCopyImageToImageEXT(device, pCopyImageToImageInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkTransitionImageLayoutEXT(VkDevice device, uint32_t transitionCount, const VkHostImageLayoutTransitionInfoEXT* pTransitions) const {
		if(!this || !pfn_vkTransitionImageLayoutEXT) {
			return staticPfn_vkTransitionImageLayoutEXT(device, transitionCount, pTransitions);
		}
		return pfn_vkTransitionImageLayoutEXT(device, transitionCount, pTransitions);
	}
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, const VkVideoProfileInfoKHR* pVideoProfile, VkVideoCapabilitiesKHR* pCapabilities) const {
		if(!this || !pfn_vkGetPhysicalDeviceVideoCapabilitiesKHR) {
			return staticPfn_vkGetPhysicalDeviceVideoCapabilitiesKHR(physicalDevice, pVideoProfile, pCapabilities);
		}
		return pfn_vkGetPhysicalDeviceVideoCapabilitiesKHR(physicalDevice, pVideoProfile, pCapabilities);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo, uint32_t* pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR* pVideoFormatProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceVideoFormatPropertiesKHR) {
			return staticPfn_vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);
		}
		return pfn_vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);
	}
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo, VkVideoEncodeQualityLevelPropertiesKHR* pQualityLevelProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR) {
			return staticPfn_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(physicalDevice, pQualityLevelInfo, pQualityLevelProperties);
		}
		return pfn_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(physicalDevice, pQualityLevelInfo, pQualityLevelProperties);
	}
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateVideoSessionKHR(VkDevice device, const VkVideoSessionCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkVideoSessionKHR* pVideoSession) const {
		if(!this || !pfn_vkCreateVideoSessionKHR) {
			return staticPfn_vkCreateVideoSessionKHR(device, pCreateInfo, pAllocator, pVideoSession);
		}
		return pfn_vkCreateVideoSessionKHR(device, pCreateInfo, pAllocator, pVideoSession);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyVideoSessionKHR) {
			staticPfn_vkDestroyVideoSessionKHR(device, videoSession, pAllocator);
			return;
		}
		pfn_vkDestroyVideoSessionKHR(device, videoSession, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateVideoSessionParametersKHR(VkDevice device, const VkVideoSessionParametersCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkVideoSessionParametersKHR* pVideoSessionParameters) const {
		if(!this || !pfn_vkCreateVideoSessionParametersKHR) {
			return staticPfn_vkCreateVideoSessionParametersKHR(device, pCreateInfo, pAllocator, pVideoSessionParameters);
		}
		return pfn_vkCreateVideoSessionParametersKHR(device, pCreateInfo, pAllocator, pVideoSessionParameters);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkUpdateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo) const {
		if(!this || !pfn_vkUpdateVideoSessionParametersKHR) {
			return staticPfn_vkUpdateVideoSessionParametersKHR(device, videoSessionParameters, pUpdateInfo);
		}
		return pfn_vkUpdateVideoSessionParametersKHR(device, videoSessionParameters, pUpdateInfo);
	}
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetEncodedVideoSessionParametersKHR(VkDevice device, const VkVideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo, VkVideoEncodeSessionParametersFeedbackInfoKHR* pFeedbackInfo, size_t* pDataSize, void* pData) const {
		if(!this || !pfn_vkGetEncodedVideoSessionParametersKHR) {
			return staticPfn_vkGetEncodedVideoSessionParametersKHR(device, pVideoSessionParametersInfo, pFeedbackInfo, pDataSize, pData);
		}
		return pfn_vkGetEncodedVideoSessionParametersKHR(device, pVideoSessionParametersInfo, pFeedbackInfo, pDataSize, pData);
	}
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyVideoSessionParametersKHR) {
			staticPfn_vkDestroyVideoSessionParametersKHR(device, videoSessionParameters, pAllocator);
			return;
		}
		pfn_vkDestroyVideoSessionParametersKHR(device, videoSessionParameters, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetVideoSessionMemoryRequirementsKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t* pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements) const {
		if(!this || !pfn_vkGetVideoSessionMemoryRequirementsKHR) {
			return staticPfn_vkGetVideoSessionMemoryRequirementsKHR(device, videoSession, pMemoryRequirementsCount, pMemoryRequirements);
		}
		return pfn_vkGetVideoSessionMemoryRequirementsKHR(device, videoSession, pMemoryRequirementsCount, pMemoryRequirements);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkBindVideoSessionMemoryKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t bindSessionMemoryInfoCount, const VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos) const {
		if(!this || !pfn_vkBindVideoSessionMemoryKHR) {
			return staticPfn_vkBindVideoSessionMemoryKHR(device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos);
		}
		return pfn_vkBindVideoSessionMemoryKHR(device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos);
	}
#endif
#if defined(VK_KHR_video_decode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDecodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoDecodeInfoKHR* pDecodeInfo) const {
		if(!this || !pfn_vkCmdDecodeVideoKHR) {
			staticPfn_vkCmdDecodeVideoKHR(commandBuffer, pDecodeInfo);
			return;
		}
		pfn_vkCmdDecodeVideoKHR(commandBuffer, pDecodeInfo);
	}
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBeginVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoBeginCodingInfoKHR* pBeginInfo) const {
		if(!this || !pfn_vkCmdBeginVideoCodingKHR) {
			staticPfn_vkCmdBeginVideoCodingKHR(commandBuffer, pBeginInfo);
			return;
		}
		pfn_vkCmdBeginVideoCodingKHR(commandBuffer, pBeginInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdControlVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoCodingControlInfoKHR* pCodingControlInfo) const {
		if(!this || !pfn_vkCmdControlVideoCodingKHR) {
			staticPfn_vkCmdControlVideoCodingKHR(commandBuffer, pCodingControlInfo);
			return;
		}
		pfn_vkCmdControlVideoCodingKHR(commandBuffer, pCodingControlInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdEndVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoEndCodingInfoKHR* pEndCodingInfo) const {
		if(!this || !pfn_vkCmdEndVideoCodingKHR) {
			staticPfn_vkCmdEndVideoCodingKHR(commandBuffer, pEndCodingInfo);
			return;
		}
		pfn_vkCmdEndVideoCodingKHR(commandBuffer, pEndCodingInfo);
	}
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdEncodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoEncodeInfoKHR* pEncodeInfo) const {
		if(!this || !pfn_vkCmdEncodeVideoKHR) {
			staticPfn_vkCmdEncodeVideoKHR(commandBuffer, pEncodeInfo);
			return;
		}
		pfn_vkCmdEncodeVideoKHR(commandBuffer, pEncodeInfo);
	}
#endif
#if defined(VK_NV_memory_decompression) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDecompressMemoryNV(VkCommandBuffer commandBuffer, uint32_t decompressRegionCount, const VkDecompressMemoryRegionNV* pDecompressMemoryRegions) const {
		if(!this || !pfn_vkCmdDecompressMemoryNV) {
			staticPfn_vkCmdDecompressMemoryNV(commandBuffer, decompressRegionCount, pDecompressMemoryRegions);
			return;
		}
		pfn_vkCmdDecompressMemoryNV(commandBuffer, decompressRegionCount, pDecompressMemoryRegions);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDecompressMemoryIndirectCountNV(VkCommandBuffer commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint32_t stride) const {
		if(!this || !pfn_vkCmdDecompressMemoryIndirectCountNV) {
			staticPfn_vkCmdDecompressMemoryIndirectCountNV(commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress, stride);
			return;
		}
		pfn_vkCmdDecompressMemoryIndirectCountNV(commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress, stride);
	}
#endif
#if defined(VK_NVX_binary_import)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateCuModuleNVX(VkDevice device, const VkCuModuleCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCuModuleNVX* pModule) const {
		if(!this || !pfn_vkCreateCuModuleNVX) {
			return staticPfn_vkCreateCuModuleNVX(device, pCreateInfo, pAllocator, pModule);
		}
		return pfn_vkCreateCuModuleNVX(device, pCreateInfo, pAllocator, pModule);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateCuFunctionNVX(VkDevice device, const VkCuFunctionCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCuFunctionNVX* pFunction) const {
		if(!this || !pfn_vkCreateCuFunctionNVX) {
			return staticPfn_vkCreateCuFunctionNVX(device, pCreateInfo, pAllocator, pFunction);
		}
		return pfn_vkCreateCuFunctionNVX(device, pCreateInfo, pAllocator, pFunction);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyCuModuleNVX) {
			staticPfn_vkDestroyCuModuleNVX(device, module, pAllocator);
			return;
		}
		pfn_vkDestroyCuModuleNVX(device, module, pAllocator);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyCuFunctionNVX) {
			staticPfn_vkDestroyCuFunctionNVX(device, function, pAllocator);
			return;
		}
		pfn_vkDestroyCuFunctionNVX(device, function, pAllocator);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, const VkCuLaunchInfoNVX* pLaunchInfo) const {
		if(!this || !pfn_vkCmdCuLaunchKernelNVX) {
			staticPfn_vkCmdCuLaunchKernelNVX(commandBuffer, pLaunchInfo);
			return;
		}
		pfn_vkCmdCuLaunchKernelNVX(commandBuffer, pLaunchInfo);
	}
#endif
#if defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_synchronization2) && defined(VK_EXT_descriptor_indexing))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDescriptorSetLayoutSizeEXT(VkDevice device, VkDescriptorSetLayout layout, VkDeviceSize* pLayoutSizeInBytes) const {
		if(!this || !pfn_vkGetDescriptorSetLayoutSizeEXT) {
			staticPfn_vkGetDescriptorSetLayoutSizeEXT(device, layout, pLayoutSizeInBytes);
			return;
		}
		pfn_vkGetDescriptorSetLayoutSizeEXT(device, layout, pLayoutSizeInBytes);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDescriptorSetLayoutBindingOffsetEXT(VkDevice device, VkDescriptorSetLayout layout, uint32_t binding, VkDeviceSize* pOffset) const {
		if(!this || !pfn_vkGetDescriptorSetLayoutBindingOffsetEXT) {
			staticPfn_vkGetDescriptorSetLayoutBindingOffsetEXT(device, layout, binding, pOffset);
			return;
		}
		pfn_vkGetDescriptorSetLayoutBindingOffsetEXT(device, layout, binding, pOffset);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDescriptorEXT(VkDevice device, const VkDescriptorGetInfoEXT* pDescriptorInfo, size_t dataSize, void* pDescriptor) const {
		if(!this || !pfn_vkGetDescriptorEXT) {
			staticPfn_vkGetDescriptorEXT(device, pDescriptorInfo, dataSize, pDescriptor);
			return;
		}
		pfn_vkGetDescriptorEXT(device, pDescriptorInfo, dataSize, pDescriptor);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer, uint32_t bufferCount, const VkDescriptorBufferBindingInfoEXT* pBindingInfos) const {
		if(!this || !pfn_vkCmdBindDescriptorBuffersEXT) {
			staticPfn_vkCmdBindDescriptorBuffersEXT(commandBuffer, bufferCount, pBindingInfos);
			return;
		}
		pfn_vkCmdBindDescriptorBuffersEXT(commandBuffer, bufferCount, pBindingInfos);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount, const uint32_t* pBufferIndices, const VkDeviceSize* pOffsets) const {
		if(!this || !pfn_vkCmdSetDescriptorBufferOffsetsEXT) {
			staticPfn_vkCmdSetDescriptorBufferOffsetsEXT(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, pBufferIndices, pOffsets);
			return;
		}
		pfn_vkCmdSetDescriptorBufferOffsetsEXT(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, pBufferIndices, pOffsets);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set) const {
		if(!this || !pfn_vkCmdBindDescriptorBufferEmbeddedSamplersEXT) {
			staticPfn_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(commandBuffer, pipelineBindPoint, layout, set);
			return;
		}
		pfn_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(commandBuffer, pipelineBindPoint, layout, set);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetBufferOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkBufferCaptureDescriptorDataInfoEXT* pInfo, void* pData) const {
		if(!this || !pfn_vkGetBufferOpaqueCaptureDescriptorDataEXT) {
			return staticPfn_vkGetBufferOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
		}
		return pfn_vkGetBufferOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetImageOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageCaptureDescriptorDataInfoEXT* pInfo, void* pData) const {
		if(!this || !pfn_vkGetImageOpaqueCaptureDescriptorDataEXT) {
			return staticPfn_vkGetImageOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
		}
		return pfn_vkGetImageOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageViewCaptureDescriptorDataInfoEXT* pInfo, void* pData) const {
		if(!this || !pfn_vkGetImageViewOpaqueCaptureDescriptorDataEXT) {
			return staticPfn_vkGetImageViewOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
		}
		return pfn_vkGetImageViewOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkSamplerCaptureDescriptorDataInfoEXT* pInfo, void* pData) const {
		if(!this || !pfn_vkGetSamplerOpaqueCaptureDescriptorDataEXT) {
			return staticPfn_vkGetSamplerOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
		}
		return pfn_vkGetSamplerOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
	}
#endif
#if (defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_synchronization2) && defined(VK_EXT_descriptor_indexing))) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo, void* pData) const {
		if(!this || !pfn_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT) {
			return staticPfn_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
		}
		return pfn_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
	}
#endif
#if defined(VK_EXT_pageable_device_local_memory) && (defined(VK_EXT_memory_priority))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkSetDeviceMemoryPriorityEXT(VkDevice device, VkDeviceMemory memory, float priority) const {
		if(!this || !pfn_vkSetDeviceMemoryPriorityEXT) {
			staticPfn_vkSetDeviceMemoryPriorityEXT(device, memory, priority);
			return;
		}
		pfn_vkSetDeviceMemoryPriorityEXT(device, memory, priority);
	}
#endif
#if defined(VK_EXT_acquire_drm_display) && (defined(VK_EXT_direct_mode_display))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkAcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display) const {
		if(!this || !pfn_vkAcquireDrmDisplayEXT) {
			return staticPfn_vkAcquireDrmDisplayEXT(physicalDevice, drmFd, display);
		}
		return pfn_vkAcquireDrmDisplayEXT(physicalDevice, drmFd, display);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR* display) const {
		if(!this || !pfn_vkGetDrmDisplayEXT) {
			return staticPfn_vkGetDrmDisplayEXT(physicalDevice, drmFd, connectorId, display);
		}
		return pfn_vkGetDrmDisplayEXT(physicalDevice, drmFd, connectorId, display);
	}
#endif
#if defined(VK_KHR_present_wait) && (defined(VK_KHR_swapchain) && defined(VK_KHR_present_id))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkWaitForPresentKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout) const {
		if(!this || !pfn_vkWaitForPresentKHR) {
			return staticPfn_vkWaitForPresentKHR(device, swapchain, presentId, timeout);
		}
		return pfn_vkWaitForPresentKHR(device, swapchain, presentId, timeout);
	}
#endif
#if defined(VK_FUCHSIA_buffer_collection) && (defined(VK_FUCHSIA_external_memory) && defined(VK_KHR_sampler_ycbcr_conversion))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateBufferCollectionFUCHSIA(VkDevice device, const VkBufferCollectionCreateInfoFUCHSIA* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferCollectionFUCHSIA* pCollection) const {
		if(!this || !pfn_vkCreateBufferCollectionFUCHSIA) {
			return staticPfn_vkCreateBufferCollectionFUCHSIA(device, pCreateInfo, pAllocator, pCollection);
		}
		return pfn_vkCreateBufferCollectionFUCHSIA(device, pCreateInfo, pAllocator, pCollection);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkSetBufferCollectionBufferConstraintsFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkBufferConstraintsInfoFUCHSIA* pBufferConstraintsInfo) const {
		if(!this || !pfn_vkSetBufferCollectionBufferConstraintsFUCHSIA) {
			return staticPfn_vkSetBufferCollectionBufferConstraintsFUCHSIA(device, collection, pBufferConstraintsInfo);
		}
		return pfn_vkSetBufferCollectionBufferConstraintsFUCHSIA(device, collection, pBufferConstraintsInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkSetBufferCollectionImageConstraintsFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkImageConstraintsInfoFUCHSIA* pImageConstraintsInfo) const {
		if(!this || !pfn_vkSetBufferCollectionImageConstraintsFUCHSIA) {
			return staticPfn_vkSetBufferCollectionImageConstraintsFUCHSIA(device, collection, pImageConstraintsInfo);
		}
		return pfn_vkSetBufferCollectionImageConstraintsFUCHSIA(device, collection, pImageConstraintsInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyBufferCollectionFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyBufferCollectionFUCHSIA) {
			staticPfn_vkDestroyBufferCollectionFUCHSIA(device, collection, pAllocator);
			return;
		}
		pfn_vkDestroyBufferCollectionFUCHSIA(device, collection, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetBufferCollectionPropertiesFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, VkBufferCollectionPropertiesFUCHSIA* pProperties) const {
		if(!this || !pfn_vkGetBufferCollectionPropertiesFUCHSIA) {
			return staticPfn_vkGetBufferCollectionPropertiesFUCHSIA(device, collection, pProperties);
		}
		return pfn_vkGetBufferCollectionPropertiesFUCHSIA(device, collection, pProperties);
	}
#endif
#if defined(VK_NV_cuda_kernel_launch)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateCudaModuleNV(VkDevice device, const VkCudaModuleCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCudaModuleNV* pModule) const {
		if(!this || !pfn_vkCreateCudaModuleNV) {
			return staticPfn_vkCreateCudaModuleNV(device, pCreateInfo, pAllocator, pModule);
		}
		return pfn_vkCreateCudaModuleNV(device, pCreateInfo, pAllocator, pModule);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetCudaModuleCacheNV(VkDevice device, VkCudaModuleNV module, size_t* pCacheSize, void* pCacheData) const {
		if(!this || !pfn_vkGetCudaModuleCacheNV) {
			return staticPfn_vkGetCudaModuleCacheNV(device, module, pCacheSize, pCacheData);
		}
		return pfn_vkGetCudaModuleCacheNV(device, module, pCacheSize, pCacheData);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateCudaFunctionNV(VkDevice device, const VkCudaFunctionCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCudaFunctionNV* pFunction) const {
		if(!this || !pfn_vkCreateCudaFunctionNV) {
			return staticPfn_vkCreateCudaFunctionNV(device, pCreateInfo, pAllocator, pFunction);
		}
		return pfn_vkCreateCudaFunctionNV(device, pCreateInfo, pAllocator, pFunction);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyCudaModuleNV(VkDevice device, VkCudaModuleNV module, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyCudaModuleNV) {
			staticPfn_vkDestroyCudaModuleNV(device, module, pAllocator);
			return;
		}
		pfn_vkDestroyCudaModuleNV(device, module, pAllocator);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyCudaFunctionNV(VkDevice device, VkCudaFunctionNV function, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyCudaFunctionNV) {
			staticPfn_vkDestroyCudaFunctionNV(device, function, pAllocator);
			return;
		}
		pfn_vkDestroyCudaFunctionNV(device, function, pAllocator);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCudaLaunchKernelNV(VkCommandBuffer commandBuffer, const VkCudaLaunchInfoNV* pLaunchInfo) const {
		if(!this || !pfn_vkCmdCudaLaunchKernelNV) {
			staticPfn_vkCmdCudaLaunchKernelNV(commandBuffer, pLaunchInfo);
			return;
		}
		pfn_vkCmdCudaLaunchKernelNV(commandBuffer, pLaunchInfo);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfoKHR* pRenderingInfo) const {
		if(!this || !pfn_vkCmdBeginRendering) {
			staticPfn_vkCmdBeginRendering(commandBuffer, pRenderingInfo);
			return;
		}
		pfn_vkCmdBeginRendering(commandBuffer, pRenderingInfo);
	}
#endif
#if defined(VK_KHR_dynamic_rendering) && (defined(VK_KHR_depth_stencil_resolve) && defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfoKHR* pRenderingInfo) const {
		if(!this || !pfn_vkCmdBeginRenderingKHR) {
			staticPfn_vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo);
			return;
		}
		pfn_vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo);
	}
#endif
#if defined(VK_VERSION_1_3)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdEndRendering(VkCommandBuffer commandBuffer) const {
		if(!this || !pfn_vkCmdEndRendering) {
			staticPfn_vkCmdEndRendering(commandBuffer);
			return;
		}
		pfn_vkCmdEndRendering(commandBuffer);
	}
#endif
#if defined(VK_KHR_dynamic_rendering) && (defined(VK_KHR_depth_stencil_resolve) && defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer) const {
		if(!this || !pfn_vkCmdEndRenderingKHR) {
			staticPfn_vkCmdEndRenderingKHR(commandBuffer);
			return;
		}
		pfn_vkCmdEndRenderingKHR(commandBuffer);
	}
#endif
#if defined(VK_VALVE_descriptor_set_host_mapping) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDescriptorSetLayoutHostMappingInfoVALVE(VkDevice device, const VkDescriptorSetBindingReferenceVALVE* pBindingReference, VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping) const {
		if(!this || !pfn_vkGetDescriptorSetLayoutHostMappingInfoVALVE) {
			staticPfn_vkGetDescriptorSetLayoutHostMappingInfoVALVE(device, pBindingReference, pHostMapping);
			return;
		}
		pfn_vkGetDescriptorSetLayoutHostMappingInfoVALVE(device, pBindingReference, pHostMapping);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDescriptorSetHostMappingVALVE(VkDevice device, VkDescriptorSet descriptorSet, void** ppData) const {
		if(!this || !pfn_vkGetDescriptorSetHostMappingVALVE) {
			staticPfn_vkGetDescriptorSetHostMappingVALVE(device, descriptorSet, ppData);
			return;
		}
		pfn_vkGetDescriptorSetHostMappingVALVE(device, descriptorSet, ppData);
	}
#endif
#if defined(VK_EXT_opacity_micromap) && (defined(VK_KHR_acceleration_structure) && defined(VK_KHR_synchronization2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateMicromapEXT(VkDevice device, const VkMicromapCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkMicromapEXT* pMicromap) const {
		if(!this || !pfn_vkCreateMicromapEXT) {
			return staticPfn_vkCreateMicromapEXT(device, pCreateInfo, pAllocator, pMicromap);
		}
		return pfn_vkCreateMicromapEXT(device, pCreateInfo, pAllocator, pMicromap);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBuildMicromapsEXT(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkMicromapBuildInfoEXT* pInfos) const {
		if(!this || !pfn_vkCmdBuildMicromapsEXT) {
			staticPfn_vkCmdBuildMicromapsEXT(commandBuffer, infoCount, pInfos);
			return;
		}
		pfn_vkCmdBuildMicromapsEXT(commandBuffer, infoCount, pInfos);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkBuildMicromapsEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkMicromapBuildInfoEXT* pInfos) const {
		if(!this || !pfn_vkBuildMicromapsEXT) {
			return staticPfn_vkBuildMicromapsEXT(device, deferredOperation, infoCount, pInfos);
		}
		return pfn_vkBuildMicromapsEXT(device, deferredOperation, infoCount, pInfos);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyMicromapEXT(VkDevice device, VkMicromapEXT micromap, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyMicromapEXT) {
			staticPfn_vkDestroyMicromapEXT(device, micromap, pAllocator);
			return;
		}
		pfn_vkDestroyMicromapEXT(device, micromap, pAllocator);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapInfoEXT* pInfo) const {
		if(!this || !pfn_vkCmdCopyMicromapEXT) {
			staticPfn_vkCmdCopyMicromapEXT(commandBuffer, pInfo);
			return;
		}
		pfn_vkCmdCopyMicromapEXT(commandBuffer, pInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCopyMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapInfoEXT* pInfo) const {
		if(!this || !pfn_vkCopyMicromapEXT) {
			return staticPfn_vkCopyMicromapEXT(device, deferredOperation, pInfo);
		}
		return pfn_vkCopyMicromapEXT(device, deferredOperation, pInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyMicromapToMemoryEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapToMemoryInfoEXT* pInfo) const {
		if(!this || !pfn_vkCmdCopyMicromapToMemoryEXT) {
			staticPfn_vkCmdCopyMicromapToMemoryEXT(commandBuffer, pInfo);
			return;
		}
		pfn_vkCmdCopyMicromapToMemoryEXT(commandBuffer, pInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCopyMicromapToMemoryEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapToMemoryInfoEXT* pInfo) const {
		if(!this || !pfn_vkCopyMicromapToMemoryEXT) {
			return staticPfn_vkCopyMicromapToMemoryEXT(device, deferredOperation, pInfo);
		}
		return pfn_vkCopyMicromapToMemoryEXT(device, deferredOperation, pInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdCopyMemoryToMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMemoryToMicromapInfoEXT* pInfo) const {
		if(!this || !pfn_vkCmdCopyMemoryToMicromapEXT) {
			staticPfn_vkCmdCopyMemoryToMicromapEXT(commandBuffer, pInfo);
			return;
		}
		pfn_vkCmdCopyMemoryToMicromapEXT(commandBuffer, pInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCopyMemoryToMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToMicromapInfoEXT* pInfo) const {
		if(!this || !pfn_vkCopyMemoryToMicromapEXT) {
			return staticPfn_vkCopyMemoryToMicromapEXT(device, deferredOperation, pInfo);
		}
		return pfn_vkCopyMemoryToMicromapEXT(device, deferredOperation, pInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdWriteMicromapsPropertiesEXT(VkCommandBuffer commandBuffer, uint32_t micromapCount, const VkMicromapEXT* pMicromaps, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) const {
		if(!this || !pfn_vkCmdWriteMicromapsPropertiesEXT) {
			staticPfn_vkCmdWriteMicromapsPropertiesEXT(commandBuffer, micromapCount, pMicromaps, queryType, queryPool, firstQuery);
			return;
		}
		pfn_vkCmdWriteMicromapsPropertiesEXT(commandBuffer, micromapCount, pMicromaps, queryType, queryPool, firstQuery);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkWriteMicromapsPropertiesEXT(VkDevice device, uint32_t micromapCount, const VkMicromapEXT* pMicromaps, VkQueryType queryType, size_t dataSize, void* pData, size_t stride) const {
		if(!this || !pfn_vkWriteMicromapsPropertiesEXT) {
			return staticPfn_vkWriteMicromapsPropertiesEXT(device, micromapCount, pMicromaps, queryType, dataSize, pData, stride);
		}
		return pfn_vkWriteMicromapsPropertiesEXT(device, micromapCount, pMicromaps, queryType, dataSize, pData, stride);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDeviceMicromapCompatibilityEXT(VkDevice device, const VkMicromapVersionInfoEXT* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility) const {
		if(!this || !pfn_vkGetDeviceMicromapCompatibilityEXT) {
			staticPfn_vkGetDeviceMicromapCompatibilityEXT(device, pVersionInfo, pCompatibility);
			return;
		}
		pfn_vkGetDeviceMicromapCompatibilityEXT(device, pVersionInfo, pCompatibility);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetMicromapBuildSizesEXT(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkMicromapBuildInfoEXT* pBuildInfo, VkMicromapBuildSizesInfoEXT* pSizeInfo) const {
		if(!this || !pfn_vkGetMicromapBuildSizesEXT) {
			staticPfn_vkGetMicromapBuildSizesEXT(device, buildType, pBuildInfo, pSizeInfo);
			return;
		}
		pfn_vkGetMicromapBuildSizesEXT(device, buildType, pBuildInfo, pSizeInfo);
	}
#endif
#if defined(VK_EXT_shader_module_identifier) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_EXT_pipeline_creation_cache_control))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetShaderModuleIdentifierEXT(VkDevice device, VkShaderModule shaderModule, VkShaderModuleIdentifierEXT* pIdentifier) const {
		if(!this || !pfn_vkGetShaderModuleIdentifierEXT) {
			staticPfn_vkGetShaderModuleIdentifierEXT(device, shaderModule, pIdentifier);
			return;
		}
		pfn_vkGetShaderModuleIdentifierEXT(device, shaderModule, pIdentifier);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetShaderModuleCreateInfoIdentifierEXT(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, VkShaderModuleIdentifierEXT* pIdentifier) const {
		if(!this || !pfn_vkGetShaderModuleCreateInfoIdentifierEXT) {
			staticPfn_vkGetShaderModuleCreateInfoIdentifierEXT(device, pCreateInfo, pIdentifier);
			return;
		}
		pfn_vkGetShaderModuleCreateInfoIdentifierEXT(device, pCreateInfo, pIdentifier);
	}
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetImageSubresourceLayout2KHR(VkDevice device, VkImage image, const VkImageSubresource2EXT* pSubresource, VkSubresourceLayout2EXT* pLayout) const {
		if(!this || !pfn_vkGetImageSubresourceLayout2KHR) {
			staticPfn_vkGetImageSubresourceLayout2KHR(device, image, pSubresource, pLayout);
			return;
		}
		pfn_vkGetImageSubresourceLayout2KHR(device, image, pSubresource, pLayout);
	}
#endif
#if (defined(VK_EXT_host_image_copy) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_copy_commands2) && defined(VK_KHR_format_feature_flags2))) || (defined(VK_EXT_image_compression_control) && (defined(VK_KHR_get_physical_device_properties2)))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetImageSubresourceLayout2EXT(VkDevice device, VkImage image, const VkImageSubresource2EXT* pSubresource, VkSubresourceLayout2EXT* pLayout) const {
		if(!this || !pfn_vkGetImageSubresourceLayout2EXT) {
			staticPfn_vkGetImageSubresourceLayout2EXT(device, image, pSubresource, pLayout);
			return;
		}
		pfn_vkGetImageSubresourceLayout2EXT(device, image, pSubresource, pLayout);
	}
#endif
#if defined(VK_EXT_pipeline_properties) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPipelinePropertiesEXT(VkDevice device, const VkPipelineInfoEXT* pPipelineInfo, VkBaseOutStructure* pPipelineProperties) const {
		if(!this || !pfn_vkGetPipelinePropertiesEXT) {
			return staticPfn_vkGetPipelinePropertiesEXT(device, pPipelineInfo, pPipelineProperties);
		}
		return pfn_vkGetPipelinePropertiesEXT(device, pPipelineInfo, pPipelineProperties);
	}
#endif
#if defined(VK_EXT_metal_objects)
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkExportMetalObjectsEXT(VkDevice device, VkExportMetalObjectsInfoEXT* pMetalObjectsInfo) const {
		if(!this || !pfn_vkExportMetalObjectsEXT) {
			staticPfn_vkExportMetalObjectsEXT(device, pMetalObjectsInfo);
			return;
		}
		pfn_vkExportMetalObjectsEXT(device, pMetalObjectsInfo);
	}
#endif
#if defined(VK_QCOM_tile_properties) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetFramebufferTilePropertiesQCOM(VkDevice device, VkFramebuffer framebuffer, uint32_t* pPropertiesCount, VkTilePropertiesQCOM* pProperties) const {
		if(!this || !pfn_vkGetFramebufferTilePropertiesQCOM) {
			return staticPfn_vkGetFramebufferTilePropertiesQCOM(device, framebuffer, pPropertiesCount, pProperties);
		}
		return pfn_vkGetFramebufferTilePropertiesQCOM(device, framebuffer, pPropertiesCount, pProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetDynamicRenderingTilePropertiesQCOM(VkDevice device, const VkRenderingInfo* pRenderingInfo, VkTilePropertiesQCOM* pProperties) const {
		if(!this || !pfn_vkGetDynamicRenderingTilePropertiesQCOM) {
			return staticPfn_vkGetDynamicRenderingTilePropertiesQCOM(device, pRenderingInfo, pProperties);
		}
		return pfn_vkGetDynamicRenderingTilePropertiesQCOM(device, pRenderingInfo, pProperties);
	}
#endif
#if defined(VK_NV_optical_flow) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_format_feature_flags2) && defined(VK_KHR_synchronization2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceOpticalFlowImageFormatsNV(VkPhysicalDevice physicalDevice, const VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo, uint32_t* pFormatCount, VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceOpticalFlowImageFormatsNV) {
			return staticPfn_vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice, pOpticalFlowImageFormatInfo, pFormatCount, pImageFormatProperties);
		}
		return pfn_vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice, pOpticalFlowImageFormatInfo, pFormatCount, pImageFormatProperties);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateOpticalFlowSessionNV(VkDevice device, const VkOpticalFlowSessionCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkOpticalFlowSessionNV* pSession) const {
		if(!this || !pfn_vkCreateOpticalFlowSessionNV) {
			return staticPfn_vkCreateOpticalFlowSessionNV(device, pCreateInfo, pAllocator, pSession);
		}
		return pfn_vkCreateOpticalFlowSessionNV(device, pCreateInfo, pAllocator, pSession);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionNV session, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyOpticalFlowSessionNV) {
			staticPfn_vkDestroyOpticalFlowSessionNV(device, session, pAllocator);
			return;
		}
		pfn_vkDestroyOpticalFlowSessionNV(device, session, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkBindOpticalFlowSessionImageNV(VkDevice device, VkOpticalFlowSessionNV session, VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view, VkImageLayout layout) const {
		if(!this || !pfn_vkBindOpticalFlowSessionImageNV) {
			return staticPfn_vkBindOpticalFlowSessionImageNV(device, session, bindingPoint, view, layout);
		}
		return pfn_vkBindOpticalFlowSessionImageNV(device, session, bindingPoint, view, layout);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdOpticalFlowExecuteNV(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, const VkOpticalFlowExecuteInfoNV* pExecuteInfo) const {
		if(!this || !pfn_vkCmdOpticalFlowExecuteNV) {
			staticPfn_vkCmdOpticalFlowExecuteNV(commandBuffer, session, pExecuteInfo);
			return;
		}
		pfn_vkCmdOpticalFlowExecuteNV(commandBuffer, session, pExecuteInfo);
	}
#endif
#if defined(VK_EXT_device_fault) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetDeviceFaultInfoEXT(VkDevice device, VkDeviceFaultCountsEXT* pFaultCounts, VkDeviceFaultInfoEXT* pFaultInfo) const {
		if(!this || !pfn_vkGetDeviceFaultInfoEXT) {
			return staticPfn_vkGetDeviceFaultInfoEXT(device, pFaultCounts, pFaultInfo);
		}
		return pfn_vkGetDeviceFaultInfoEXT(device, pFaultCounts, pFaultInfo);
	}
#endif
#if defined(VK_EXT_depth_bias_control) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDepthBias2EXT(VkCommandBuffer commandBuffer, const VkDepthBiasInfoEXT* pDepthBiasInfo) const {
		if(!this || !pfn_vkCmdSetDepthBias2EXT) {
			staticPfn_vkCmdSetDepthBias2EXT(commandBuffer, pDepthBiasInfo);
			return;
		}
		pfn_vkCmdSetDepthBias2EXT(commandBuffer, pDepthBiasInfo);
	}
#endif
#if defined(VK_EXT_swapchain_maintenance1) && (defined(VK_KHR_swapchain) && defined(VK_EXT_surface_maintenance1) && defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkReleaseSwapchainImagesEXT(VkDevice device, const VkReleaseSwapchainImagesInfoEXT* pReleaseInfo) const {
		if(!this || !pfn_vkReleaseSwapchainImagesEXT) {
			return staticPfn_vkReleaseSwapchainImagesEXT(device, pReleaseInfo);
		}
		return pfn_vkReleaseSwapchainImagesEXT(device, pReleaseInfo);
	}
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetDeviceImageSubresourceLayoutKHR(VkDevice device, const VkDeviceImageSubresourceInfoKHR* pInfo, VkSubresourceLayout2KHR* pLayout) const {
		if(!this || !pfn_vkGetDeviceImageSubresourceLayoutKHR) {
			staticPfn_vkGetDeviceImageSubresourceLayoutKHR(device, pInfo, pLayout);
			return;
		}
		pfn_vkGetDeviceImageSubresourceLayoutKHR(device, pInfo, pLayout);
	}
#endif
#if defined(VK_KHR_map_memory2)
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkMapMemory2KHR(VkDevice device, const VkMemoryMapInfoKHR* pMemoryMapInfo, void** ppData) const {
		if(!this || !pfn_vkMapMemory2KHR) {
			return staticPfn_vkMapMemory2KHR(device, pMemoryMapInfo, ppData);
		}
		return pfn_vkMapMemory2KHR(device, pMemoryMapInfo, ppData);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkUnmapMemory2KHR(VkDevice device, const VkMemoryUnmapInfoKHR* pMemoryUnmapInfo) const {
		if(!this || !pfn_vkUnmapMemory2KHR) {
			return staticPfn_vkUnmapMemory2KHR(device, pMemoryUnmapInfo);
		}
		return pfn_vkUnmapMemory2KHR(device, pMemoryUnmapInfo);
	}
#endif
#if defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateShadersEXT(VkDevice device, uint32_t createInfoCount, const VkShaderCreateInfoEXT* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkShaderEXT* pShaders) const {
		if(!this || !pfn_vkCreateShadersEXT) {
			return staticPfn_vkCreateShadersEXT(device, createInfoCount, pCreateInfos, pAllocator, pShaders);
		}
		return pfn_vkCreateShadersEXT(device, createInfoCount, pCreateInfos, pAllocator, pShaders);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkDestroyShaderEXT(VkDevice device, VkShaderEXT shader, const VkAllocationCallbacks* pAllocator) const {
		if(!this || !pfn_vkDestroyShaderEXT) {
			staticPfn_vkDestroyShaderEXT(device, shader, pAllocator);
			return;
		}
		pfn_vkDestroyShaderEXT(device, shader, pAllocator);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetShaderBinaryDataEXT(VkDevice device, VkShaderEXT shader, size_t* pDataSize, void* pData) const {
		if(!this || !pfn_vkGetShaderBinaryDataEXT) {
			return staticPfn_vkGetShaderBinaryDataEXT(device, shader, pDataSize, pData);
		}
		return pfn_vkGetShaderBinaryDataEXT(device, shader, pDataSize, pData);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBindShadersEXT(VkCommandBuffer commandBuffer, uint32_t stageCount, const VkShaderStageFlagBits* pStages, const VkShaderEXT* pShaders) const {
		if(!this || !pfn_vkCmdBindShadersEXT) {
			staticPfn_vkCmdBindShadersEXT(commandBuffer, stageCount, pStages, pShaders);
			return;
		}
		pfn_vkCmdBindShadersEXT(commandBuffer, stageCount, pStages, pShaders);
	}
#endif
#if defined(VK_QNX_external_memory_screen_buffer) && (((defined(VK_KHR_sampler_ycbcr_conversion) && defined(VK_KHR_external_memory) && defined(VK_KHR_dedicated_allocation)) || defined(VK_VERSION_1_1)) && defined(VK_EXT_queue_family_foreign))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetScreenBufferPropertiesQNX(VkDevice device, const struct _screen_buffer* buffer, VkScreenBufferPropertiesQNX* pProperties) const {
		if(!this || !pfn_vkGetScreenBufferPropertiesQNX) {
			return staticPfn_vkGetScreenBufferPropertiesQNX(device, buffer, pProperties);
		}
		return pfn_vkGetScreenBufferPropertiesQNX(device, buffer, pProperties);
	}
#endif
#if defined(VK_KHR_cooperative_matrix) && (defined(VK_KHR_get_physical_device_properties2))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesKHR* pProperties) const {
		if(!this || !pfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR) {
			return staticPfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
		}
		return pfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
	}
#endif
#if defined(VK_AMDX_shader_enqueue) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_synchronization2) && defined(VK_KHR_pipeline_library) && defined(VK_KHR_spirv_1_4))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetExecutionGraphPipelineScratchSizeAMDX(VkDevice device, VkPipeline executionGraph, VkExecutionGraphPipelineScratchSizeAMDX* pSizeInfo) const {
		if(!this || !pfn_vkGetExecutionGraphPipelineScratchSizeAMDX) {
			return staticPfn_vkGetExecutionGraphPipelineScratchSizeAMDX(device, executionGraph, pSizeInfo);
		}
		return pfn_vkGetExecutionGraphPipelineScratchSizeAMDX(device, executionGraph, pSizeInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkGetExecutionGraphPipelineNodeIndexAMDX(VkDevice device, VkPipeline executionGraph, const VkPipelineShaderStageNodeCreateInfoAMDX* pNodeInfo, uint32_t* pNodeIndex) const {
		if(!this || !pfn_vkGetExecutionGraphPipelineNodeIndexAMDX) {
			return staticPfn_vkGetExecutionGraphPipelineNodeIndexAMDX(device, executionGraph, pNodeInfo, pNodeIndex);
		}
		return pfn_vkGetExecutionGraphPipelineNodeIndexAMDX(device, executionGraph, pNodeInfo, pNodeIndex);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkCreateExecutionGraphPipelinesAMDX(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkExecutionGraphPipelineCreateInfoAMDX* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) const {
		if(!this || !pfn_vkCreateExecutionGraphPipelinesAMDX) {
			return staticPfn_vkCreateExecutionGraphPipelinesAMDX(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
		}
		return pfn_vkCreateExecutionGraphPipelinesAMDX(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdInitializeGraphScratchMemoryAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch) const {
		if(!this || !pfn_vkCmdInitializeGraphScratchMemoryAMDX) {
			staticPfn_vkCmdInitializeGraphScratchMemoryAMDX(commandBuffer, scratch);
			return;
		}
		pfn_vkCmdInitializeGraphScratchMemoryAMDX(commandBuffer, scratch);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDispatchGraphAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, const VkDispatchGraphCountInfoAMDX* pCountInfo) const {
		if(!this || !pfn_vkCmdDispatchGraphAMDX) {
			staticPfn_vkCmdDispatchGraphAMDX(commandBuffer, scratch, pCountInfo);
			return;
		}
		pfn_vkCmdDispatchGraphAMDX(commandBuffer, scratch, pCountInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDispatchGraphIndirectAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, const VkDispatchGraphCountInfoAMDX* pCountInfo) const {
		if(!this || !pfn_vkCmdDispatchGraphIndirectAMDX) {
			staticPfn_vkCmdDispatchGraphIndirectAMDX(commandBuffer, scratch, pCountInfo);
			return;
		}
		pfn_vkCmdDispatchGraphIndirectAMDX(commandBuffer, scratch, pCountInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdDispatchGraphIndirectCountAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, VkDeviceAddress countInfo) const {
		if(!this || !pfn_vkCmdDispatchGraphIndirectCountAMDX) {
			staticPfn_vkCmdDispatchGraphIndirectCountAMDX(commandBuffer, scratch, countInfo);
			return;
		}
		pfn_vkCmdDispatchGraphIndirectCountAMDX(commandBuffer, scratch, countInfo);
	}
#endif
#if defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBindDescriptorSets2KHR(VkCommandBuffer commandBuffer, const VkBindDescriptorSetsInfoKHR* pBindDescriptorSetsInfo) const {
		if(!this || !pfn_vkCmdBindDescriptorSets2KHR) {
			staticPfn_vkCmdBindDescriptorSets2KHR(commandBuffer, pBindDescriptorSetsInfo);
			return;
		}
		pfn_vkCmdBindDescriptorSets2KHR(commandBuffer, pBindDescriptorSetsInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdPushConstants2KHR(VkCommandBuffer commandBuffer, const VkPushConstantsInfoKHR* pPushConstantsInfo) const {
		if(!this || !pfn_vkCmdPushConstants2KHR) {
			staticPfn_vkCmdPushConstants2KHR(commandBuffer, pPushConstantsInfo);
			return;
		}
		pfn_vkCmdPushConstants2KHR(commandBuffer, pPushConstantsInfo);
	}
#endif
#if (defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))) && (defined(VK_KHR_push_descriptor))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdPushDescriptorSet2KHR(VkCommandBuffer commandBuffer, const VkPushDescriptorSetInfoKHR* pPushDescriptorSetInfo) const {
		if(!this || !pfn_vkCmdPushDescriptorSet2KHR) {
			staticPfn_vkCmdPushDescriptorSet2KHR(commandBuffer, pPushDescriptorSetInfo);
			return;
		}
		pfn_vkCmdPushDescriptorSet2KHR(commandBuffer, pPushDescriptorSetInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdPushDescriptorSetWithTemplate2KHR(VkCommandBuffer commandBuffer, const VkPushDescriptorSetWithTemplateInfoKHR* pPushDescriptorSetWithTemplateInfo) const {
		if(!this || !pfn_vkCmdPushDescriptorSetWithTemplate2KHR) {
			staticPfn_vkCmdPushDescriptorSetWithTemplate2KHR(commandBuffer, pPushDescriptorSetWithTemplateInfo);
			return;
		}
		pfn_vkCmdPushDescriptorSetWithTemplate2KHR(commandBuffer, pPushDescriptorSetWithTemplateInfo);
	}
#endif
#if (defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))) && (defined(VK_EXT_descriptor_buffer))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetDescriptorBufferOffsets2EXT(VkCommandBuffer commandBuffer, const VkSetDescriptorBufferOffsetsInfoEXT* pSetDescriptorBufferOffsetsInfo) const {
		if(!this || !pfn_vkCmdSetDescriptorBufferOffsets2EXT) {
			staticPfn_vkCmdSetDescriptorBufferOffsets2EXT(commandBuffer, pSetDescriptorBufferOffsetsInfo);
			return;
		}
		pfn_vkCmdSetDescriptorBufferOffsets2EXT(commandBuffer, pSetDescriptorBufferOffsetsInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(VkCommandBuffer commandBuffer, const VkBindDescriptorBufferEmbeddedSamplersInfoEXT* pBindDescriptorBufferEmbeddedSamplersInfo) const {
		if(!this || !pfn_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT) {
			staticPfn_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(commandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo);
			return;
		}
		pfn_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(commandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo);
	}
#endif
#if defined(VK_NV_low_latency2) && (defined(VK_VERSION_1_2) || defined(VK_KHR_timeline_semaphore))
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkSetLatencySleepModeNV(VkDevice device, VkSwapchainKHR swapchain, const VkLatencySleepModeInfoNV* pSleepModeInfo) const {
		if(!this || !pfn_vkSetLatencySleepModeNV) {
			return staticPfn_vkSetLatencySleepModeNV(device, swapchain, pSleepModeInfo);
		}
		return pfn_vkSetLatencySleepModeNV(device, swapchain, pSleepModeInfo);
	}
	VKAPI_ATTR VkResult VKAPI_CALL VulkanLoader::vkLatencySleepNV(VkDevice device, VkSwapchainKHR swapchain, const VkLatencySleepInfoNV* pSleepInfo) const {
		if(!this || !pfn_vkLatencySleepNV) {
			return staticPfn_vkLatencySleepNV(device, swapchain, pSleepInfo);
		}
		return pfn_vkLatencySleepNV(device, swapchain, pSleepInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkSetLatencyMarkerNV(VkDevice device, VkSwapchainKHR swapchain, const VkSetLatencyMarkerInfoNV* pLatencyMarkerInfo) const {
		if(!this || !pfn_vkSetLatencyMarkerNV) {
			staticPfn_vkSetLatencyMarkerNV(device, swapchain, pLatencyMarkerInfo);
			return;
		}
		pfn_vkSetLatencyMarkerNV(device, swapchain, pLatencyMarkerInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkGetLatencyTimingsNV(VkDevice device, VkSwapchainKHR swapchain, VkGetLatencyMarkerInfoNV* pLatencyMarkerInfo) const {
		if(!this || !pfn_vkGetLatencyTimingsNV) {
			staticPfn_vkGetLatencyTimingsNV(device, swapchain, pLatencyMarkerInfo);
			return;
		}
		pfn_vkGetLatencyTimingsNV(device, swapchain, pLatencyMarkerInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkQueueNotifyOutOfBandNV(VkQueue queue, const VkOutOfBandQueueTypeInfoNV* pQueueTypeInfo) const {
		if(!this || !pfn_vkQueueNotifyOutOfBandNV) {
			staticPfn_vkQueueNotifyOutOfBandNV(queue, pQueueTypeInfo);
			return;
		}
		pfn_vkQueueNotifyOutOfBandNV(queue, pQueueTypeInfo);
	}
#endif
#if defined(VK_KHR_dynamic_rendering_local_read) && (defined(VK_KHR_dynamic_rendering))
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetRenderingAttachmentLocationsKHR(VkCommandBuffer commandBuffer, const VkRenderingAttachmentLocationInfoKHR* pLocationInfo) const {
		if(!this || !pfn_vkCmdSetRenderingAttachmentLocationsKHR) {
			staticPfn_vkCmdSetRenderingAttachmentLocationsKHR(commandBuffer, pLocationInfo);
			return;
		}
		pfn_vkCmdSetRenderingAttachmentLocationsKHR(commandBuffer, pLocationInfo);
	}
	VKAPI_ATTR void VKAPI_CALL VulkanLoader::vkCmdSetRenderingInputAttachmentIndicesKHR(VkCommandBuffer commandBuffer, const VkRenderingInputAttachmentIndexInfoKHR* pLocationInfo) const {
		if(!this || !pfn_vkCmdSetRenderingInputAttachmentIndicesKHR) {
			staticPfn_vkCmdSetRenderingInputAttachmentIndicesKHR(commandBuffer, pLocationInfo);
			return;
		}
		pfn_vkCmdSetRenderingInputAttachmentIndicesKHR(commandBuffer, pLocationInfo);
	}
#endif
}

#if defined(VK_VERSION_1_0)
VKAPI_ATTR VkResult VKAPI_CALL vkCreateInstance(const VkInstanceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkInstance* pInstance) {
	return wfe::staticPfn_vkCreateInstance(pCreateInfo, pAllocator, pInstance);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyInstance(VkInstance instance, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyInstance(instance, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkEnumeratePhysicalDevices(VkInstance instance, uint32_t* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices) {
	return wfe::staticPfn_vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);
}
VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL vkGetDeviceProcAddr(VkDevice device, const char* pName) {
	return wfe::staticPfn_vkGetDeviceProcAddr(device, pName);
}
VKAPI_ATTR PFN_vkVoidFunction VKAPI_CALL vkGetInstanceProcAddr(VkInstance instance, const char* pName) {
	return wfe::staticPfn_vkGetInstanceProcAddr(instance, pName);
}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceProperties(physicalDevice, pProperties);
}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures) {
	wfe::staticPfn_vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures);
}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties) {
	return wfe::staticPfn_vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDevice(VkPhysicalDevice physicalDevice, const VkDeviceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDevice* pDevice) {
	return wfe::staticPfn_vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyDevice(VkDevice device, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyDevice(device, pAllocator);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateInstanceVersion(uint32_t* pApiVersion) {
	return wfe::staticPfn_vkEnumerateInstanceVersion(pApiVersion);
}
#endif
#if defined(VK_VERSION_1_0)
VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateInstanceLayerProperties(uint32_t* pPropertyCount, VkLayerProperties* pProperties) {
	return wfe::staticPfn_vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateInstanceExtensionProperties(const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties) {
	return wfe::staticPfn_vkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkLayerProperties* pProperties) {
	return wfe::staticPfn_vkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, const char* pLayerName, uint32_t* pPropertyCount, VkExtensionProperties* pProperties) {
	return wfe::staticPfn_vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties);
}
VKAPI_ATTR void VKAPI_CALL vkGetDeviceQueue(VkDevice device, uint32_t queueFamilyIndex, uint32_t queueIndex, VkQueue* pQueue) {
	wfe::staticPfn_vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
}
VKAPI_ATTR VkResult VKAPI_CALL vkQueueSubmit(VkQueue queue, uint32_t submitCount, const VkSubmitInfo* pSubmits, VkFence fence) {
	return wfe::staticPfn_vkQueueSubmit(queue, submitCount, pSubmits, fence);
}
VKAPI_ATTR VkResult VKAPI_CALL vkQueueWaitIdle(VkQueue queue) {
	return wfe::staticPfn_vkQueueWaitIdle(queue);
}
VKAPI_ATTR VkResult VKAPI_CALL vkDeviceWaitIdle(VkDevice device) {
	return wfe::staticPfn_vkDeviceWaitIdle(device);
}
VKAPI_ATTR VkResult VKAPI_CALL vkAllocateMemory(VkDevice device, const VkMemoryAllocateInfo* pAllocateInfo, const VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory) {
	return wfe::staticPfn_vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory);
}
VKAPI_ATTR void VKAPI_CALL vkFreeMemory(VkDevice device, VkDeviceMemory memory, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkFreeMemory(device, memory, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void** ppData) {
	return wfe::staticPfn_vkMapMemory(device, memory, offset, size, flags, ppData);
}
VKAPI_ATTR void VKAPI_CALL vkUnmapMemory(VkDevice device, VkDeviceMemory memory) {
	wfe::staticPfn_vkUnmapMemory(device, memory);
}
VKAPI_ATTR VkResult VKAPI_CALL vkFlushMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges) {
	return wfe::staticPfn_vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
}
VKAPI_ATTR VkResult VKAPI_CALL vkInvalidateMappedMemoryRanges(VkDevice device, uint32_t memoryRangeCount, const VkMappedMemoryRange* pMemoryRanges) {
	return wfe::staticPfn_vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
}
VKAPI_ATTR void VKAPI_CALL vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes) {
	wfe::staticPfn_vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);
}
VKAPI_ATTR void VKAPI_CALL vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements) {
	wfe::staticPfn_vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);
}
VKAPI_ATTR VkResult VKAPI_CALL vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset) {
	return wfe::staticPfn_vkBindBufferMemory(device, buffer, memory, memoryOffset);
}
VKAPI_ATTR void VKAPI_CALL vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements) {
	wfe::staticPfn_vkGetImageMemoryRequirements(device, image, pMemoryRequirements);
}
VKAPI_ATTR VkResult VKAPI_CALL vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset) {
	return wfe::staticPfn_vkBindImageMemory(device, image, memory, memoryOffset);
}
VKAPI_ATTR void VKAPI_CALL vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements) {
	wfe::staticPfn_vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint32_t* pPropertyCount, VkSparseImageFormatProperties* pProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkQueueBindSparse(VkQueue queue, uint32_t bindInfoCount, const VkBindSparseInfo* pBindInfo, VkFence fence) {
	return wfe::staticPfn_vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateFence(VkDevice device, const VkFenceCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence) {
	return wfe::staticPfn_vkCreateFence(device, pCreateInfo, pAllocator, pFence);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyFence(VkDevice device, VkFence fence, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyFence(device, fence, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkResetFences(VkDevice device, uint32_t fenceCount, const VkFence* pFences) {
	return wfe::staticPfn_vkResetFences(device, fenceCount, pFences);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetFenceStatus(VkDevice device, VkFence fence) {
	return wfe::staticPfn_vkGetFenceStatus(device, fence);
}
VKAPI_ATTR VkResult VKAPI_CALL vkWaitForFences(VkDevice device, uint32_t fenceCount, const VkFence* pFences, VkBool32 waitAll, uint64_t timeout) {
	return wfe::staticPfn_vkWaitForFences(device, fenceCount, pFences, waitAll, timeout);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSemaphore(VkDevice device, const VkSemaphoreCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore) {
	return wfe::staticPfn_vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);
}
VKAPI_ATTR void VKAPI_CALL vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroySemaphore(device, semaphore, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateEvent(VkDevice device, const VkEventCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkEvent* pEvent) {
	return wfe::staticPfn_vkCreateEvent(device, pCreateInfo, pAllocator, pEvent);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyEvent(VkDevice device, VkEvent event, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyEvent(device, event, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetEventStatus(VkDevice device, VkEvent event) {
	return wfe::staticPfn_vkGetEventStatus(device, event);
}
VKAPI_ATTR VkResult VKAPI_CALL vkSetEvent(VkDevice device, VkEvent event) {
	return wfe::staticPfn_vkSetEvent(device, event);
}
VKAPI_ATTR VkResult VKAPI_CALL vkResetEvent(VkDevice device, VkEvent event) {
	return wfe::staticPfn_vkResetEvent(device, event);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateQueryPool(VkDevice device, const VkQueryPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool) {
	return wfe::staticPfn_vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyQueryPool(device, queryPool, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, size_t dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags) {
	return wfe::staticPfn_vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
}
#endif
#if defined(VK_VERSION_1_2)
VKAPI_ATTR void VKAPI_CALL vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) {
	wfe::staticPfn_vkResetQueryPool(device, queryPool, firstQuery, queryCount);
}
#endif
#if defined(VK_EXT_host_query_reset) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) {
	wfe::staticPfn_vkResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);
}
#endif
#if defined(VK_VERSION_1_0)
VKAPI_ATTR VkResult VKAPI_CALL vkCreateBuffer(VkDevice device, const VkBufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer) {
	return wfe::staticPfn_vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyBuffer(VkDevice device, VkBuffer buffer, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyBuffer(device, buffer, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateBufferView(VkDevice device, const VkBufferViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferView* pView) {
	return wfe::staticPfn_vkCreateBufferView(device, pCreateInfo, pAllocator, pView);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyBufferView(VkDevice device, VkBufferView bufferView, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyBufferView(device, bufferView, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateImage(VkDevice device, const VkImageCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImage* pImage) {
	return wfe::staticPfn_vkCreateImage(device, pCreateInfo, pAllocator, pImage);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyImage(VkDevice device, VkImage image, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyImage(device, image, pAllocator);
}
VKAPI_ATTR void VKAPI_CALL vkGetImageSubresourceLayout(VkDevice device, VkImage image, const VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout) {
	wfe::staticPfn_vkGetImageSubresourceLayout(device, image, pSubresource, pLayout);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateImageView(VkDevice device, const VkImageViewCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkImageView* pView) {
	return wfe::staticPfn_vkCreateImageView(device, pCreateInfo, pAllocator, pView);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyImageView(VkDevice device, VkImageView imageView, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyImageView(device, imageView, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateShaderModule(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule) {
	return wfe::staticPfn_vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyShaderModule(device, shaderModule, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreatePipelineCache(VkDevice device, const VkPipelineCacheCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache) {
	return wfe::staticPfn_vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyPipelineCache(device, pipelineCache, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, size_t* pDataSize, void* pData) {
	return wfe::staticPfn_vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData);
}
VKAPI_ATTR VkResult VKAPI_CALL vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint32_t srcCacheCount, const VkPipelineCache* pSrcCaches) {
	return wfe::staticPfn_vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkGraphicsPipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
	return wfe::staticPfn_vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkComputePipelineCreateInfo* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
	return wfe::staticPfn_vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}
#endif
#if defined(VK_HUAWEI_subpass_shading) && (defined(VK_KHR_create_renderpass2) && defined(VK_KHR_synchronization2))
VKAPI_ATTR VkResult VKAPI_CALL vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice device, VkRenderPass renderpass, VkExtent2D* pMaxWorkgroupSize) {
	return wfe::staticPfn_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device, renderpass, pMaxWorkgroupSize);
}
#endif
#if defined(VK_VERSION_1_0)
VKAPI_ATTR void VKAPI_CALL vkDestroyPipeline(VkDevice device, VkPipeline pipeline, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyPipeline(device, pipeline, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreatePipelineLayout(VkDevice device, const VkPipelineLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout) {
	return wfe::staticPfn_vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyPipelineLayout(device, pipelineLayout, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSampler(VkDevice device, const VkSamplerCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSampler* pSampler) {
	return wfe::staticPfn_vkCreateSampler(device, pCreateInfo, pAllocator, pSampler);
}
VKAPI_ATTR void VKAPI_CALL vkDestroySampler(VkDevice device, VkSampler sampler, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroySampler(device, sampler, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDescriptorSetLayout(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout) {
	return wfe::staticPfn_vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDescriptorPool(VkDevice device, const VkDescriptorPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool) {
	return wfe::staticPfn_vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyDescriptorPool(device, descriptorPool, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags) {
	return wfe::staticPfn_vkResetDescriptorPool(device, descriptorPool, flags);
}
VKAPI_ATTR VkResult VKAPI_CALL vkAllocateDescriptorSets(VkDevice device, const VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets) {
	return wfe::staticPfn_vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);
}
VKAPI_ATTR VkResult VKAPI_CALL vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets) {
	return wfe::staticPfn_vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);
}
VKAPI_ATTR void VKAPI_CALL vkUpdateDescriptorSets(VkDevice device, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites, uint32_t descriptorCopyCount, const VkCopyDescriptorSet* pDescriptorCopies) {
	wfe::staticPfn_vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateFramebuffer(VkDevice device, const VkFramebufferCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer) {
	return wfe::staticPfn_vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyFramebuffer(device, framebuffer, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateRenderPass(VkDevice device, const VkRenderPassCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) {
	return wfe::staticPfn_vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyRenderPass(device, renderPass, pAllocator);
}
VKAPI_ATTR void VKAPI_CALL vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity) {
	wfe::staticPfn_vkGetRenderAreaGranularity(device, renderPass, pGranularity);
}
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
VKAPI_ATTR void VKAPI_CALL vkGetRenderingAreaGranularityKHR(VkDevice device, const VkRenderingAreaInfoKHR* pRenderingAreaInfo, VkExtent2D* pGranularity) {
	wfe::staticPfn_vkGetRenderingAreaGranularityKHR(device, pRenderingAreaInfo, pGranularity);
}
#endif
#if defined(VK_VERSION_1_0)
VKAPI_ATTR VkResult VKAPI_CALL vkCreateCommandPool(VkDevice device, const VkCommandPoolCreateInfo* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool) {
	return wfe::staticPfn_vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyCommandPool(device, commandPool, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags) {
	return wfe::staticPfn_vkResetCommandPool(device, commandPool, flags);
}
VKAPI_ATTR VkResult VKAPI_CALL vkAllocateCommandBuffers(VkDevice device, const VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers) {
	return wfe::staticPfn_vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);
}
VKAPI_ATTR void VKAPI_CALL vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers) {
	wfe::staticPfn_vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);
}
VKAPI_ATTR VkResult VKAPI_CALL vkBeginCommandBuffer(VkCommandBuffer commandBuffer, const VkCommandBufferBeginInfo* pBeginInfo) {
	return wfe::staticPfn_vkBeginCommandBuffer(commandBuffer, pBeginInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkEndCommandBuffer(VkCommandBuffer commandBuffer) {
	return wfe::staticPfn_vkEndCommandBuffer(commandBuffer);
}
VKAPI_ATTR VkResult VKAPI_CALL vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags) {
	return wfe::staticPfn_vkResetCommandBuffer(commandBuffer, flags);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) {
	wfe::staticPfn_vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
}
#endif
#if defined(VK_EXT_attachment_feedback_loop_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_EXT_attachment_feedback_loop_layout))
VKAPI_ATTR void VKAPI_CALL vkCmdSetAttachmentFeedbackLoopEnableEXT(VkCommandBuffer commandBuffer, VkImageAspectFlags aspectMask) {
	wfe::staticPfn_vkCmdSetAttachmentFeedbackLoopEnableEXT(commandBuffer, aspectMask);
}
#endif
#if defined(VK_VERSION_1_0)
VKAPI_ATTR void VKAPI_CALL vkCmdSetViewport(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewport* pViewports) {
	wfe::staticPfn_vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetScissor(VkCommandBuffer commandBuffer, uint32_t firstScissor, uint32_t scissorCount, const VkRect2D* pScissors) {
	wfe::staticPfn_vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth) {
	wfe::staticPfn_vkCmdSetLineWidth(commandBuffer, lineWidth);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor) {
	wfe::staticPfn_vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, const float blendConstants[4]) {
	wfe::staticPfn_vkCmdSetBlendConstants(commandBuffer, blendConstants);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds) {
	wfe::staticPfn_vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t compareMask) {
	wfe::staticPfn_vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t writeMask) {
	wfe::staticPfn_vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint32_t reference) {
	wfe::staticPfn_vkCmdSetStencilReference(commandBuffer, faceMask, reference);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t descriptorSetCount, const VkDescriptorSet* pDescriptorSets, uint32_t dynamicOffsetCount, const uint32_t* pDynamicOffsets) {
	wfe::staticPfn_vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType) {
	wfe::staticPfn_vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets) {
	wfe::staticPfn_vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDraw(VkCommandBuffer commandBuffer, uint32_t vertexCount, uint32_t instanceCount, uint32_t firstVertex, uint32_t firstInstance) {
	wfe::staticPfn_vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint32_t indexCount, uint32_t instanceCount, uint32_t firstIndex, int32_t vertexOffset, uint32_t firstInstance) {
	wfe::staticPfn_vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
}
#endif
#if defined(VK_EXT_multi_draw) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawInfoEXT* pVertexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride) {
	wfe::staticPfn_vkCmdDrawMultiEXT(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint32_t drawCount, const VkMultiDrawIndexedInfoEXT* pIndexInfo, uint32_t instanceCount, uint32_t firstInstance, uint32_t stride, const int32_t* pVertexOffset) {
	wfe::staticPfn_vkCmdDrawMultiIndexedEXT(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset);
}
#endif
#if defined(VK_VERSION_1_0)
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
	wfe::staticPfn_vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
	wfe::staticPfn_vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDispatch(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
	wfe::staticPfn_vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) {
	wfe::staticPfn_vkCmdDispatchIndirect(commandBuffer, buffer, offset);
}
#endif
#if defined(VK_HUAWEI_subpass_shading) && (defined(VK_KHR_create_renderpass2) && defined(VK_KHR_synchronization2))
VKAPI_ATTR void VKAPI_CALL vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer) {
	wfe::staticPfn_vkCmdSubpassShadingHUAWEI(commandBuffer);
}
#endif
#if defined(VK_HUAWEI_cluster_culling_shader) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkCmdDrawClusterHUAWEI(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
	wfe::staticPfn_vkCmdDrawClusterHUAWEI(commandBuffer, groupCountX, groupCountY, groupCountZ);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDrawClusterIndirectHUAWEI(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset) {
	wfe::staticPfn_vkCmdDrawClusterIndirectHUAWEI(commandBuffer, buffer, offset);
}
#endif
#if defined(VK_NV_device_generated_commands_compute) && (defined(VK_NV_device_generated_commands))
VKAPI_ATTR void VKAPI_CALL vkCmdUpdatePipelineIndirectBufferNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline) {
	wfe::staticPfn_vkCmdUpdatePipelineIndirectBufferNV(commandBuffer, pipelineBindPoint, pipeline);
}
#endif
#if defined(VK_VERSION_1_0)
VKAPI_ATTR void VKAPI_CALL vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferCopy* pRegions) {
	wfe::staticPfn_vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
}
VKAPI_ATTR void VKAPI_CALL vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageCopy* pRegions) {
	wfe::staticPfn_vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageBlit* pRegions, VkFilter filter) {
	wfe::staticPfn_vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
}
VKAPI_ATTR void VKAPI_CALL vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkBufferImageCopy* pRegions) {
	wfe::staticPfn_vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
}
VKAPI_ATTR void VKAPI_CALL vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint32_t regionCount, const VkBufferImageCopy* pRegions) {
	wfe::staticPfn_vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
}
#endif
#if defined(VK_NV_copy_memory_indirect) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address))
VKAPI_ATTR void VKAPI_CALL vkCmdCopyMemoryIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride) {
	wfe::staticPfn_vkCmdCopyMemoryIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride);
}
VKAPI_ATTR void VKAPI_CALL vkCmdCopyMemoryToImageIndirectNV(VkCommandBuffer commandBuffer, VkDeviceAddress copyBufferAddress, uint32_t copyCount, uint32_t stride, VkImage dstImage, VkImageLayout dstImageLayout, const VkImageSubresourceLayers* pImageSubresources) {
	wfe::staticPfn_vkCmdCopyMemoryToImageIndirectNV(commandBuffer, copyBufferAddress, copyCount, stride, dstImage, dstImageLayout, pImageSubresources);
}
#endif
#if defined(VK_VERSION_1_0)
VKAPI_ATTR void VKAPI_CALL vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, const void* pData) {
	wfe::staticPfn_vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
}
VKAPI_ATTR void VKAPI_CALL vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint32_t data) {
	wfe::staticPfn_vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
}
VKAPI_ATTR void VKAPI_CALL vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearColorValue* pColor, uint32_t rangeCount, const VkImageSubresourceRange* pRanges) {
	wfe::staticPfn_vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
}
VKAPI_ATTR void VKAPI_CALL vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, const VkClearDepthStencilValue* pDepthStencil, uint32_t rangeCount, const VkImageSubresourceRange* pRanges) {
	wfe::staticPfn_vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
}
VKAPI_ATTR void VKAPI_CALL vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkClearAttachment* pAttachments, uint32_t rectCount, const VkClearRect* pRects) {
	wfe::staticPfn_vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
}
VKAPI_ATTR void VKAPI_CALL vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint32_t regionCount, const VkImageResolve* pRegions) {
	wfe::staticPfn_vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) {
	wfe::staticPfn_vkCmdSetEvent(commandBuffer, event, stageMask);
}
VKAPI_ATTR void VKAPI_CALL vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags stageMask) {
	wfe::staticPfn_vkCmdResetEvent(commandBuffer, event, stageMask);
}
VKAPI_ATTR void VKAPI_CALL vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers) {
	wfe::staticPfn_vkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}
VKAPI_ATTR void VKAPI_CALL vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint32_t memoryBarrierCount, const VkMemoryBarrier* pMemoryBarriers, uint32_t bufferMemoryBarrierCount, const VkBufferMemoryBarrier* pBufferMemoryBarriers, uint32_t imageMemoryBarrierCount, const VkImageMemoryBarrier* pImageMemoryBarriers) {
	wfe::staticPfn_vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags) {
	wfe::staticPfn_vkCmdBeginQuery(commandBuffer, queryPool, query, flags);
}
VKAPI_ATTR void VKAPI_CALL vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query) {
	wfe::staticPfn_vkCmdEndQuery(commandBuffer, queryPool, query);
}
#endif
#if defined(VK_EXT_conditional_rendering) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin) {
	wfe::staticPfn_vkCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);
}
VKAPI_ATTR void VKAPI_CALL vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer) {
	wfe::staticPfn_vkCmdEndConditionalRenderingEXT(commandBuffer);
}
#endif
#if defined(VK_VERSION_1_0)
VKAPI_ATTR void VKAPI_CALL vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount) {
	wfe::staticPfn_vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
}
VKAPI_ATTR void VKAPI_CALL vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint32_t query) {
	wfe::staticPfn_vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
}
VKAPI_ATTR void VKAPI_CALL vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t firstQuery, uint32_t queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags) {
	wfe::staticPfn_vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
}
VKAPI_ATTR void VKAPI_CALL vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint32_t offset, uint32_t size, const void* pValues) {
	wfe::staticPfn_vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents) {
	wfe::staticPfn_vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
}
VKAPI_ATTR void VKAPI_CALL vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents) {
	wfe::staticPfn_vkCmdNextSubpass(commandBuffer, contents);
}
VKAPI_ATTR void VKAPI_CALL vkCmdEndRenderPass(VkCommandBuffer commandBuffer) {
	wfe::staticPfn_vkCmdEndRenderPass(commandBuffer);
}
VKAPI_ATTR void VKAPI_CALL vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint32_t commandBufferCount, const VkCommandBuffer* pCommandBuffers) {
	wfe::staticPfn_vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
}
#endif
#if defined(VK_KHR_android_surface) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateAndroidSurfaceKHR(VkInstance instance, const VkAndroidSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return wfe::staticPfn_vkCreateAndroidSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#if defined(VK_KHR_display) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPropertiesKHR* pProperties) {
	return wfe::staticPfn_vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties) {
	return wfe::staticPfn_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint32_t planeIndex, uint32_t* pDisplayCount, VkDisplayKHR* pDisplays) {
	return wfe::staticPfn_vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModePropertiesKHR* pProperties) {
	return wfe::staticPfn_vkGetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, const VkDisplayModeCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode) {
	return wfe::staticPfn_vkCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint32_t planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities) {
	return wfe::staticPfn_vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, const VkDisplaySurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return wfe::staticPfn_vkCreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#if defined(VK_KHR_display_swapchain) && (defined(VK_KHR_swapchain) && defined(VK_KHR_display))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSharedSwapchainsKHR(VkDevice device, uint32_t swapchainCount, const VkSwapchainCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains) {
	return wfe::staticPfn_vkCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
}
#endif
#if defined(VK_KHR_surface)
VKAPI_ATTR void VKAPI_CALL vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroySurfaceKHR(instance, surface, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported) {
	return wfe::staticPfn_vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities) {
	return wfe::staticPfn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats) {
	return wfe::staticPfn_vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes) {
	return wfe::staticPfn_vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
}
#endif
#if defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSwapchainKHR(VkDevice device, const VkSwapchainCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain) {
	return wfe::staticPfn_vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);
}
VKAPI_ATTR void VKAPI_CALL vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroySwapchainKHR(device, swapchain, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pSwapchainImageCount, VkImage* pSwapchainImages) {
	return wfe::staticPfn_vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);
}
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t timeout, VkSemaphore semaphore, VkFence fence, uint32_t* pImageIndex) {
	return wfe::staticPfn_vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);
}
VKAPI_ATTR VkResult VKAPI_CALL vkQueuePresentKHR(VkQueue queue, const VkPresentInfoKHR* pPresentInfo) {
	return wfe::staticPfn_vkQueuePresentKHR(queue, pPresentInfo);
}
#endif
#if defined(VK_NN_vi_surface) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateViSurfaceNN(VkInstance instance, const VkViSurfaceCreateInfoNN* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return wfe::staticPfn_vkCreateViSurfaceNN(instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#if defined(VK_KHR_wayland_surface) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateWaylandSurfaceKHR(VkInstance instance, const VkWaylandSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return wfe::staticPfn_vkCreateWaylandSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
}
VKAPI_ATTR VkBool32 VKAPI_CALL vkGetPhysicalDeviceWaylandPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, struct wl_display* display) {
	return wfe::staticPfn_vkGetPhysicalDeviceWaylandPresentationSupportKHR(physicalDevice, queueFamilyIndex, display);
}
#endif
#if defined(VK_KHR_win32_surface) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateWin32SurfaceKHR(VkInstance instance, const VkWin32SurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return wfe::staticPfn_vkCreateWin32SurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
}
VKAPI_ATTR VkBool32 VKAPI_CALL vkGetPhysicalDeviceWin32PresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex) {
	return wfe::staticPfn_vkGetPhysicalDeviceWin32PresentationSupportKHR(physicalDevice, queueFamilyIndex);
}
#endif
#if defined(VK_KHR_xlib_surface) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateXlibSurfaceKHR(VkInstance instance, const VkXlibSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return wfe::staticPfn_vkCreateXlibSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
}
VKAPI_ATTR VkBool32 VKAPI_CALL vkGetPhysicalDeviceXlibPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, Display* dpy, VisualID visualID) {
	return wfe::staticPfn_vkGetPhysicalDeviceXlibPresentationSupportKHR(physicalDevice, queueFamilyIndex, dpy, visualID);
}
#endif
#if defined(VK_KHR_xcb_surface) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateXcbSurfaceKHR(VkInstance instance, const VkXcbSurfaceCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return wfe::staticPfn_vkCreateXcbSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
}
VKAPI_ATTR VkBool32 VKAPI_CALL vkGetPhysicalDeviceXcbPresentationSupportKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, xcb_connection_t* connection, xcb_visualid_t visual_id) {
	return wfe::staticPfn_vkGetPhysicalDeviceXcbPresentationSupportKHR(physicalDevice, queueFamilyIndex, connection, visual_id);
}
#endif
#if defined(VK_EXT_directfb_surface) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDirectFBSurfaceEXT(VkInstance instance, const VkDirectFBSurfaceCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return wfe::staticPfn_vkCreateDirectFBSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
}
VKAPI_ATTR VkBool32 VKAPI_CALL vkGetPhysicalDeviceDirectFBPresentationSupportEXT(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, IDirectFB* dfb) {
	return wfe::staticPfn_vkGetPhysicalDeviceDirectFBPresentationSupportEXT(physicalDevice, queueFamilyIndex, dfb);
}
#endif
#if defined(VK_FUCHSIA_imagepipe_surface) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateImagePipeSurfaceFUCHSIA(VkInstance instance, const VkImagePipeSurfaceCreateInfoFUCHSIA* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return wfe::staticPfn_vkCreateImagePipeSurfaceFUCHSIA(instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#if defined(VK_GGP_stream_descriptor_surface) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateStreamDescriptorSurfaceGGP(VkInstance instance, const VkStreamDescriptorSurfaceCreateInfoGGP* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return wfe::staticPfn_vkCreateStreamDescriptorSurfaceGGP(instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#if defined(VK_QNX_screen_surface) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateScreenSurfaceQNX(VkInstance instance, const VkScreenSurfaceCreateInfoQNX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return wfe::staticPfn_vkCreateScreenSurfaceQNX(instance, pCreateInfo, pAllocator, pSurface);
}
VKAPI_ATTR VkBool32 VKAPI_CALL vkGetPhysicalDeviceScreenPresentationSupportQNX(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, struct _screen_window* window) {
	return wfe::staticPfn_vkGetPhysicalDeviceScreenPresentationSupportQNX(physicalDevice, queueFamilyIndex, window);
}
#endif
#if defined(VK_EXT_debug_report)
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDebugReportCallbackEXT(VkInstance instance, const VkDebugReportCallbackCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback) {
	return wfe::staticPfn_vkCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyDebugReportCallbackEXT(instance, callback, pAllocator);
}
VKAPI_ATTR void VKAPI_CALL vkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, uint64_t object, size_t location, int32_t messageCode, const char* pLayerPrefix, const char* pMessage) {
	wfe::staticPfn_vkDebugReportMessageEXT(instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
}
#endif
#if defined(VK_EXT_debug_marker) && (defined(VK_EXT_debug_report))
VKAPI_ATTR VkResult VKAPI_CALL vkDebugMarkerSetObjectNameEXT(VkDevice device, const VkDebugMarkerObjectNameInfoEXT* pNameInfo) {
	return wfe::staticPfn_vkDebugMarkerSetObjectNameEXT(device, pNameInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkDebugMarkerSetObjectTagEXT(VkDevice device, const VkDebugMarkerObjectTagInfoEXT* pTagInfo) {
	return wfe::staticPfn_vkDebugMarkerSetObjectTagEXT(device, pTagInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo) {
	wfe::staticPfn_vkCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer) {
	wfe::staticPfn_vkCmdDebugMarkerEndEXT(commandBuffer);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, const VkDebugMarkerMarkerInfoEXT* pMarkerInfo) {
	wfe::staticPfn_vkCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
}
#endif
#if defined(VK_NV_external_memory_capabilities)
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties) {
	return wfe::staticPfn_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
}
#endif
#if defined(VK_NV_external_memory_win32) && (defined(VK_NV_external_memory))
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryWin32HandleNV(VkDevice device, VkDeviceMemory memory, VkExternalMemoryHandleTypeFlagsNV handleType, HANDLE* pHandle) {
	return wfe::staticPfn_vkGetMemoryWin32HandleNV(device, memory, handleType, pHandle);
}
#endif
#if defined(VK_NV_device_generated_commands) && (defined(VK_VERSION_1_1) && defined(VK_KHR_buffer_device_address))
VKAPI_ATTR void VKAPI_CALL vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo) {
	wfe::staticPfn_vkCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, const VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo) {
	wfe::staticPfn_vkCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint32_t groupIndex) {
	wfe::staticPfn_vkCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
}
VKAPI_ATTR void VKAPI_CALL vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice device, const VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2* pMemoryRequirements) {
	wfe::staticPfn_vkGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateIndirectCommandsLayoutNV(VkDevice device, const VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNV* pIndirectCommandsLayout) {
	return wfe::staticPfn_vkCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2KHR* pFeatures) {
	wfe::staticPfn_vkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures);
}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2KHR* pFeatures) {
	wfe::staticPfn_vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2KHR* pProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceProperties2(physicalDevice, pProperties);
}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2KHR* pProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2KHR* pFormatProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);
}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2KHR* pFormatProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2KHR* pImageFormatInfo, VkImageFormatProperties2KHR* pImageFormatProperties) {
	return wfe::staticPfn_vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties);
}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceImageFormatInfo2KHR* pImageFormatInfo, VkImageFormatProperties2KHR* pImageFormatProperties) {
	return wfe::staticPfn_vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice, pImageFormatInfo, pImageFormatProperties);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2KHR* pQueueFamilyProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t* pQueueFamilyPropertyCount, VkQueueFamilyProperties2KHR* pQueueFamilyProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2KHR* pMemoryProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);
}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2KHR* pMemoryProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2KHR* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2KHR* pProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
}
#endif
#if defined(VK_KHR_get_physical_device_properties2)
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSparseImageFormatInfo2KHR* pFormatInfo, uint32_t* pPropertyCount, VkSparseImageFormatProperties2KHR* pProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
}
#endif
#if defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set, uint32_t descriptorWriteCount, const VkWriteDescriptorSet* pDescriptorWrites) {
	wfe::staticPfn_vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlagsKHR flags) {
	wfe::staticPfn_vkTrimCommandPool(device, commandPool, flags);
}
#endif
#if defined(VK_KHR_maintenance1)
VKAPI_ATTR void VKAPI_CALL vkTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlagsKHR flags) {
	wfe::staticPfn_vkTrimCommandPoolKHR(device, commandPool, flags);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfoKHR* pExternalBufferInfo, VkExternalBufferPropertiesKHR* pExternalBufferProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
}
#endif
#if defined(VK_KHR_external_memory_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalBufferInfoKHR* pExternalBufferInfo, VkExternalBufferPropertiesKHR* pExternalBufferProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
}
#endif
#if defined(VK_KHR_external_memory_win32) && (defined(VK_KHR_external_memory))
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryWin32HandleKHR(VkDevice device, const VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle) {
	return wfe::staticPfn_vkGetMemoryWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryWin32HandlePropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, HANDLE handle, VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties) {
	return wfe::staticPfn_vkGetMemoryWin32HandlePropertiesKHR(device, handleType, handle, pMemoryWin32HandleProperties);
}
#endif
#if defined(VK_KHR_external_memory_fd) && (defined(VK_KHR_external_memory) || defined(VK_VERSION_1_1))
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryFdKHR(VkDevice device, const VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd) {
	return wfe::staticPfn_vkGetMemoryFdKHR(device, pGetFdInfo, pFd);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties) {
	return wfe::staticPfn_vkGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);
}
#endif
#if defined(VK_FUCHSIA_external_memory) && (defined(VK_KHR_external_memory_capabilities) && defined(VK_KHR_external_memory))
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryZirconHandleFUCHSIA(VkDevice device, const VkMemoryGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo, zx_handle_t* pZirconHandle) {
	return wfe::staticPfn_vkGetMemoryZirconHandleFUCHSIA(device, pGetZirconHandleInfo, pZirconHandle);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryZirconHandlePropertiesFUCHSIA(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, zx_handle_t zirconHandle, VkMemoryZirconHandlePropertiesFUCHSIA* pMemoryZirconHandleProperties) {
	return wfe::staticPfn_vkGetMemoryZirconHandlePropertiesFUCHSIA(device, handleType, zirconHandle, pMemoryZirconHandleProperties);
}
#endif
#if defined(VK_NV_external_memory_rdma) && (defined(VK_KHR_external_memory))
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryRemoteAddressNV(VkDevice device, const VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo, VkRemoteAddressNV* pAddress) {
	return wfe::staticPfn_vkGetMemoryRemoteAddressNV(device, pMemoryGetRemoteAddressInfo, pAddress);
}
#endif
#if defined(VK_NV_external_memory_sci_buf) && (defined(VK_VERSION_1_1))
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemorySciBufNV(VkDevice device, const VkMemoryGetSciBufInfoNV* pGetSciBufInfo, NvSciBufObj* pHandle) {
	return wfe::staticPfn_vkGetMemorySciBufNV(device, pGetSciBufInfo, pHandle);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV(VkPhysicalDevice physicalDevice, VkExternalMemoryHandleTypeFlagBits handleType, NvSciBufObj handle, VkMemorySciBufPropertiesNV* pMemorySciBufProperties) {
	return wfe::staticPfn_vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV(physicalDevice, handleType, handle, pMemorySciBufProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSciBufAttributesNV(VkPhysicalDevice physicalDevice, NvSciBufAttrList pAttributes) {
	return wfe::staticPfn_vkGetPhysicalDeviceSciBufAttributesNV(physicalDevice, pAttributes);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfoKHR* pExternalSemaphoreInfo, VkExternalSemaphorePropertiesKHR* pExternalSemaphoreProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
}
#endif
#if defined(VK_KHR_external_semaphore_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalSemaphoreInfoKHR* pExternalSemaphoreInfo, VkExternalSemaphorePropertiesKHR* pExternalSemaphoreProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
}
#endif
#if defined(VK_KHR_external_semaphore_win32) && (defined(VK_KHR_external_semaphore))
VKAPI_ATTR VkResult VKAPI_CALL vkGetSemaphoreWin32HandleKHR(VkDevice device, const VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle) {
	return wfe::staticPfn_vkGetSemaphoreWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
}
VKAPI_ATTR VkResult VKAPI_CALL vkImportSemaphoreWin32HandleKHR(VkDevice device, const VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo) {
	return wfe::staticPfn_vkImportSemaphoreWin32HandleKHR(device, pImportSemaphoreWin32HandleInfo);
}
#endif
#if defined(VK_KHR_external_semaphore_fd) && (defined(VK_KHR_external_semaphore) || defined(VK_VERSION_1_1))
VKAPI_ATTR VkResult VKAPI_CALL vkGetSemaphoreFdKHR(VkDevice device, const VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd) {
	return wfe::staticPfn_vkGetSemaphoreFdKHR(device, pGetFdInfo, pFd);
}
VKAPI_ATTR VkResult VKAPI_CALL vkImportSemaphoreFdKHR(VkDevice device, const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo) {
	return wfe::staticPfn_vkImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);
}
#endif
#if defined(VK_FUCHSIA_external_semaphore) && (defined(VK_KHR_external_semaphore_capabilities) && defined(VK_KHR_external_semaphore))
VKAPI_ATTR VkResult VKAPI_CALL vkGetSemaphoreZirconHandleFUCHSIA(VkDevice device, const VkSemaphoreGetZirconHandleInfoFUCHSIA* pGetZirconHandleInfo, zx_handle_t* pZirconHandle) {
	return wfe::staticPfn_vkGetSemaphoreZirconHandleFUCHSIA(device, pGetZirconHandleInfo, pZirconHandle);
}
VKAPI_ATTR VkResult VKAPI_CALL vkImportSemaphoreZirconHandleFUCHSIA(VkDevice device, const VkImportSemaphoreZirconHandleInfoFUCHSIA* pImportSemaphoreZirconHandleInfo) {
	return wfe::staticPfn_vkImportSemaphoreZirconHandleFUCHSIA(device, pImportSemaphoreZirconHandleInfo);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfoKHR* pExternalFenceInfo, VkExternalFencePropertiesKHR* pExternalFenceProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
}
#endif
#if defined(VK_KHR_external_fence_capabilities) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceExternalFenceInfoKHR* pExternalFenceInfo, VkExternalFencePropertiesKHR* pExternalFenceProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
}
#endif
#if defined(VK_KHR_external_fence_win32) && (defined(VK_KHR_external_fence))
VKAPI_ATTR VkResult VKAPI_CALL vkGetFenceWin32HandleKHR(VkDevice device, const VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo, HANDLE* pHandle) {
	return wfe::staticPfn_vkGetFenceWin32HandleKHR(device, pGetWin32HandleInfo, pHandle);
}
VKAPI_ATTR VkResult VKAPI_CALL vkImportFenceWin32HandleKHR(VkDevice device, const VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo) {
	return wfe::staticPfn_vkImportFenceWin32HandleKHR(device, pImportFenceWin32HandleInfo);
}
#endif
#if defined(VK_KHR_external_fence_fd) && (defined(VK_KHR_external_fence) || defined(VK_VERSION_1_1))
VKAPI_ATTR VkResult VKAPI_CALL vkGetFenceFdKHR(VkDevice device, const VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd) {
	return wfe::staticPfn_vkGetFenceFdKHR(device, pGetFdInfo, pFd);
}
VKAPI_ATTR VkResult VKAPI_CALL vkImportFenceFdKHR(VkDevice device, const VkImportFenceFdInfoKHR* pImportFenceFdInfo) {
	return wfe::staticPfn_vkImportFenceFdKHR(device, pImportFenceFdInfo);
}
#endif
#if (defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))) || (defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1)))
VKAPI_ATTR VkResult VKAPI_CALL vkGetFenceSciSyncFenceNV(VkDevice device, const VkFenceGetSciSyncInfoNV* pGetSciSyncHandleInfo, void* pHandle) {
	return wfe::staticPfn_vkGetFenceSciSyncFenceNV(device, pGetSciSyncHandleInfo, pHandle);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetFenceSciSyncObjNV(VkDevice device, const VkFenceGetSciSyncInfoNV* pGetSciSyncHandleInfo, void* pHandle) {
	return wfe::staticPfn_vkGetFenceSciSyncObjNV(device, pGetSciSyncHandleInfo, pHandle);
}
VKAPI_ATTR VkResult VKAPI_CALL vkImportFenceSciSyncFenceNV(VkDevice device, const VkImportFenceSciSyncInfoNV* pImportFenceSciSyncInfo) {
	return wfe::staticPfn_vkImportFenceSciSyncFenceNV(device, pImportFenceSciSyncInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkImportFenceSciSyncObjNV(VkDevice device, const VkImportFenceSciSyncInfoNV* pImportFenceSciSyncInfo) {
	return wfe::staticPfn_vkImportFenceSciSyncObjNV(device, pImportFenceSciSyncInfo);
}
#endif
#if defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))
VKAPI_ATTR VkResult VKAPI_CALL vkGetSemaphoreSciSyncObjNV(VkDevice device, const VkSemaphoreGetSciSyncInfoNV* pGetSciSyncInfo, void* pHandle) {
	return wfe::staticPfn_vkGetSemaphoreSciSyncObjNV(device, pGetSciSyncInfo, pHandle);
}
VKAPI_ATTR VkResult VKAPI_CALL vkImportSemaphoreSciSyncObjNV(VkDevice device, const VkImportSemaphoreSciSyncInfoNV* pImportSemaphoreSciSyncInfo) {
	return wfe::staticPfn_vkImportSemaphoreSciSyncObjNV(device, pImportSemaphoreSciSyncInfo);
}
#endif
#if (defined(VK_NV_external_sci_sync) && (defined(VK_VERSION_1_1))) || (defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1)))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSciSyncAttributesNV(VkPhysicalDevice physicalDevice, const VkSciSyncAttributesInfoNV* pSciSyncAttributesInfo, NvSciSyncAttrList pAttributes) {
	return wfe::staticPfn_vkGetPhysicalDeviceSciSyncAttributesNV(physicalDevice, pSciSyncAttributesInfo, pAttributes);
}
#endif
#if defined(VK_NV_external_sci_sync2) && (defined(VK_VERSION_1_1))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSemaphoreSciSyncPoolNV(VkDevice device, const VkSemaphoreSciSyncPoolCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSemaphoreSciSyncPoolNV* pSemaphorePool) {
	return wfe::staticPfn_vkCreateSemaphoreSciSyncPoolNV(device, pCreateInfo, pAllocator, pSemaphorePool);
}
VKAPI_ATTR void VKAPI_CALL vkDestroySemaphoreSciSyncPoolNV(VkDevice device, VkSemaphoreSciSyncPoolNV semaphorePool, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroySemaphoreSciSyncPoolNV(device, semaphorePool, pAllocator);
}
#endif
#if defined(VK_EXT_direct_mode_display) && (defined(VK_KHR_display))
VKAPI_ATTR VkResult VKAPI_CALL vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display) {
	return wfe::staticPfn_vkReleaseDisplayEXT(physicalDevice, display);
}
#endif
#if defined(VK_EXT_acquire_xlib_display) && (defined(VK_EXT_direct_mode_display))
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireXlibDisplayEXT(VkPhysicalDevice physicalDevice, Display* dpy, VkDisplayKHR display) {
	return wfe::staticPfn_vkAcquireXlibDisplayEXT(physicalDevice, dpy, display);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetRandROutputDisplayEXT(VkPhysicalDevice physicalDevice, Display* dpy, RROutput rrOutput, VkDisplayKHR* pDisplay) {
	return wfe::staticPfn_vkGetRandROutputDisplayEXT(physicalDevice, dpy, rrOutput, pDisplay);
}
#endif
#if defined(VK_NV_acquire_winrt_display) && (defined(VK_EXT_direct_mode_display))
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireWinrtDisplayNV(VkPhysicalDevice physicalDevice, VkDisplayKHR display) {
	return wfe::staticPfn_vkAcquireWinrtDisplayNV(physicalDevice, display);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetWinrtDisplayNV(VkPhysicalDevice physicalDevice, uint32_t deviceRelativeId, VkDisplayKHR* pDisplay) {
	return wfe::staticPfn_vkGetWinrtDisplayNV(physicalDevice, deviceRelativeId, pDisplay);
}
#endif
#if defined(VK_EXT_display_control) && (defined(VK_EXT_display_surface_counter) && defined(VK_KHR_swapchain))
VKAPI_ATTR VkResult VKAPI_CALL vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, const VkDisplayPowerInfoEXT* pDisplayPowerInfo) {
	return wfe::staticPfn_vkDisplayPowerControlEXT(device, display, pDisplayPowerInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkRegisterDeviceEventEXT(VkDevice device, const VkDeviceEventInfoEXT* pDeviceEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence) {
	return wfe::staticPfn_vkRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);
}
VKAPI_ATTR VkResult VKAPI_CALL vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, const VkDisplayEventInfoEXT* pDisplayEventInfo, const VkAllocationCallbacks* pAllocator, VkFence* pFence) {
	return wfe::staticPfn_vkRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, uint64_t* pCounterValue) {
	return wfe::staticPfn_vkGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);
}
#endif
#if defined(VK_EXT_display_surface_counter) && (defined(VK_KHR_display))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities) {
	return wfe::staticPfn_vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, pSurfaceCapabilities);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR VkResult VKAPI_CALL vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupPropertiesKHR* pPhysicalDeviceGroupProperties) {
	return wfe::staticPfn_vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
}
#endif
#if defined(VK_KHR_device_group_creation)
VKAPI_ATTR VkResult VKAPI_CALL vkEnumeratePhysicalDeviceGroupsKHR(VkInstance instance, uint32_t* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupPropertiesKHR* pPhysicalDeviceGroupProperties) {
	return wfe::staticPfn_vkEnumeratePhysicalDeviceGroupsKHR(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlagsKHR* pPeerMemoryFeatures) {
	wfe::staticPfn_vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
}
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
VKAPI_ATTR void VKAPI_CALL vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint32_t heapIndex, uint32_t localDeviceIndex, uint32_t remoteDeviceIndex, VkPeerMemoryFeatureFlagsKHR* pPeerMemoryFeatures) {
	wfe::staticPfn_vkGetDeviceGroupPeerMemoryFeaturesKHR(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR VkResult VKAPI_CALL vkBindBufferMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfoKHR* pBindInfos) {
	return wfe::staticPfn_vkBindBufferMemory2(device, bindInfoCount, pBindInfos);
}
#endif
#if defined(VK_KHR_bind_memory2)
VKAPI_ATTR VkResult VKAPI_CALL vkBindBufferMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindBufferMemoryInfoKHR* pBindInfos) {
	return wfe::staticPfn_vkBindBufferMemory2KHR(device, bindInfoCount, pBindInfos);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR VkResult VKAPI_CALL vkBindImageMemory2(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfoKHR* pBindInfos) {
	return wfe::staticPfn_vkBindImageMemory2(device, bindInfoCount, pBindInfos);
}
#endif
#if defined(VK_KHR_bind_memory2)
VKAPI_ATTR VkResult VKAPI_CALL vkBindImageMemory2KHR(VkDevice device, uint32_t bindInfoCount, const VkBindImageMemoryInfoKHR* pBindInfos) {
	return wfe::staticPfn_vkBindImageMemory2KHR(device, bindInfoCount, pBindInfos);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint32_t deviceMask) {
	wfe::staticPfn_vkCmdSetDeviceMask(commandBuffer, deviceMask);
}
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
VKAPI_ATTR void VKAPI_CALL vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint32_t deviceMask) {
	wfe::staticPfn_vkCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
}
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_surface)))
VKAPI_ATTR VkResult VKAPI_CALL vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities) {
	return wfe::staticPfn_vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes) {
	return wfe::staticPfn_vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);
}
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_swapchain)))
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireNextImage2KHR(VkDevice device, const VkAcquireNextImageInfoKHR* pAcquireInfo, uint32_t* pImageIndex) {
	return wfe::staticPfn_vkAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
	wfe::staticPfn_vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
}
#endif
#if defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))
VKAPI_ATTR void VKAPI_CALL vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint32_t baseGroupX, uint32_t baseGroupY, uint32_t baseGroupZ, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
	wfe::staticPfn_vkCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
}
#endif
#if ((defined(VK_KHR_swapchain) && (defined(VK_KHR_surface))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_device_group) && (defined(VK_KHR_device_group_creation))) && (defined(VK_KHR_surface)))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint32_t* pRectCount, VkRect2D* pRects) {
	return wfe::staticPfn_vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, pRectCount, pRects);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDescriptorUpdateTemplate(VkDevice device, const VkDescriptorUpdateTemplateCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplateKHR* pDescriptorUpdateTemplate) {
	return wfe::staticPfn_vkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
}
#endif
#if defined(VK_KHR_descriptor_update_template)
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDescriptorUpdateTemplateKHR(VkDevice device, const VkDescriptorUpdateTemplateCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplateKHR* pDescriptorUpdateTemplate) {
	return wfe::staticPfn_vkCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);
}
#endif
#if defined(VK_KHR_descriptor_update_template)
VKAPI_ATTR void VKAPI_CALL vkDestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, const void* pData) {
	wfe::staticPfn_vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);
}
#endif
#if defined(VK_KHR_descriptor_update_template)
VKAPI_ATTR void VKAPI_CALL vkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplateKHR descriptorUpdateTemplate, const void* pData) {
	wfe::staticPfn_vkUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData);
}
#endif
#if (((defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_VERSION_1_1))) || ((defined(VK_KHR_push_descriptor) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_KHR_descriptor_update_template)))) || ((defined(VK_KHR_descriptor_update_template)) && (defined(VK_KHR_push_descriptor)))
VKAPI_ATTR void VKAPI_CALL vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint32_t set, const void* pData) {
	wfe::staticPfn_vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
}
#endif
#if defined(VK_EXT_hdr_metadata) && (defined(VK_KHR_swapchain))
VKAPI_ATTR void VKAPI_CALL vkSetHdrMetadataEXT(VkDevice device, uint32_t swapchainCount, const VkSwapchainKHR* pSwapchains, const VkHdrMetadataEXT* pMetadata) {
	wfe::staticPfn_vkSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);
}
#endif
#if defined(VK_KHR_shared_presentable_image) && (defined(VK_KHR_swapchain) && defined(VK_KHR_get_surface_capabilities2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)))
VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain) {
	return wfe::staticPfn_vkGetSwapchainStatusKHR(device, swapchain);
}
#endif
#if defined(VK_GOOGLE_display_timing) && (defined(VK_KHR_swapchain))
VKAPI_ATTR VkResult VKAPI_CALL vkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties) {
	return wfe::staticPfn_vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint32_t* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings) {
	return wfe::staticPfn_vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings);
}
#endif
#if defined(VK_MVK_ios_surface) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateIOSSurfaceMVK(VkInstance instance, const VkIOSSurfaceCreateInfoMVK* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return wfe::staticPfn_vkCreateIOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#if defined(VK_MVK_macos_surface) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateMacOSSurfaceMVK(VkInstance instance, const VkMacOSSurfaceCreateInfoMVK* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return wfe::staticPfn_vkCreateMacOSSurfaceMVK(instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#if defined(VK_EXT_metal_surface) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateMetalSurfaceEXT(VkInstance instance, const VkMetalSurfaceCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return wfe::staticPfn_vkCreateMetalSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#if defined(VK_NV_clip_space_w_scaling)
VKAPI_ATTR void VKAPI_CALL vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportWScalingNV* pViewportWScalings) {
	wfe::staticPfn_vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
}
#endif
#if defined(VK_EXT_discard_rectangles) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint32_t firstDiscardRectangle, uint32_t discardRectangleCount, const VkRect2D* pDiscardRectangles) {
	wfe::staticPfn_vkCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetDiscardRectangleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 discardRectangleEnable) {
	wfe::staticPfn_vkCmdSetDiscardRectangleEnableEXT(commandBuffer, discardRectangleEnable);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetDiscardRectangleModeEXT(VkCommandBuffer commandBuffer, VkDiscardRectangleModeEXT discardRectangleMode) {
	wfe::staticPfn_vkCmdSetDiscardRectangleModeEXT(commandBuffer, discardRectangleMode);
}
#endif
#if defined(VK_EXT_sample_locations) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, const VkSampleLocationsInfoEXT* pSampleLocationsInfo) {
	wfe::staticPfn_vkCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties) {
	wfe::staticPfn_vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, pMultisampleProperties);
}
#endif
#if defined(VK_KHR_get_surface_capabilities2) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities) {
	return wfe::staticPfn_vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats) {
	return wfe::staticPfn_vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
}
#endif
#if defined(VK_KHR_get_display_properties2) && (defined(VK_KHR_display))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayProperties2KHR* pProperties) {
	return wfe::staticPfn_vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, pPropertyCount, pProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties) {
	return wfe::staticPfn_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, pPropertyCount, pProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint32_t* pPropertyCount, VkDisplayModeProperties2KHR* pProperties) {
	return wfe::staticPfn_vkGetDisplayModeProperties2KHR(physicalDevice, display, pPropertyCount, pProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities) {
	return wfe::staticPfn_vkGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkGetBufferMemoryRequirements2(VkDevice device, const VkBufferMemoryRequirementsInfo2KHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) {
	wfe::staticPfn_vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);
}
#endif
#if defined(VK_KHR_get_memory_requirements2)
VKAPI_ATTR void VKAPI_CALL vkGetBufferMemoryRequirements2KHR(VkDevice device, const VkBufferMemoryRequirementsInfo2KHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) {
	wfe::staticPfn_vkGetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkGetImageMemoryRequirements2(VkDevice device, const VkImageMemoryRequirementsInfo2KHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) {
	wfe::staticPfn_vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);
}
#endif
#if defined(VK_KHR_get_memory_requirements2)
VKAPI_ATTR void VKAPI_CALL vkGetImageMemoryRequirements2KHR(VkDevice device, const VkImageMemoryRequirementsInfo2KHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) {
	wfe::staticPfn_vkGetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkGetImageSparseMemoryRequirements2(VkDevice device, const VkImageSparseMemoryRequirementsInfo2KHR* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2KHR* pSparseMemoryRequirements) {
	wfe::staticPfn_vkGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
#endif
#if defined(VK_KHR_get_memory_requirements2)
VKAPI_ATTR void VKAPI_CALL vkGetImageSparseMemoryRequirements2KHR(VkDevice device, const VkImageSparseMemoryRequirementsInfo2KHR* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2KHR* pSparseMemoryRequirements) {
	wfe::staticPfn_vkGetImageSparseMemoryRequirements2KHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkGetDeviceBufferMemoryRequirements(VkDevice device, const VkDeviceBufferMemoryRequirementsKHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) {
	wfe::staticPfn_vkGetDeviceBufferMemoryRequirements(device, pInfo, pMemoryRequirements);
}
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkGetDeviceBufferMemoryRequirementsKHR(VkDevice device, const VkDeviceBufferMemoryRequirementsKHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) {
	wfe::staticPfn_vkGetDeviceBufferMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkGetDeviceImageMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirementsKHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) {
	wfe::staticPfn_vkGetDeviceImageMemoryRequirements(device, pInfo, pMemoryRequirements);
}
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkGetDeviceImageMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirementsKHR* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) {
	wfe::staticPfn_vkGetDeviceImageMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkGetDeviceImageSparseMemoryRequirements(VkDevice device, const VkDeviceImageMemoryRequirementsKHR* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2KHR* pSparseMemoryRequirements) {
	wfe::staticPfn_vkGetDeviceImageSparseMemoryRequirements(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
#endif
#if defined(VK_KHR_maintenance4) && (defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, const VkDeviceImageMemoryRequirementsKHR* pInfo, uint32_t* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2KHR* pSparseMemoryRequirements) {
	wfe::staticPfn_vkGetDeviceImageSparseMemoryRequirementsKHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSamplerYcbcrConversion(VkDevice device, const VkSamplerYcbcrConversionCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversionKHR* pYcbcrConversion) {
	return wfe::staticPfn_vkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);
}
#endif
#if defined(VK_KHR_sampler_ycbcr_conversion) && (defined(VK_KHR_maintenance1) && defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_memory_requirements2) && defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateSamplerYcbcrConversionKHR(VkDevice device, const VkSamplerYcbcrConversionCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversionKHR* pYcbcrConversion) {
	return wfe::staticPfn_vkCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionKHR ycbcrConversion, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);
}
#endif
#if defined(VK_KHR_sampler_ycbcr_conversion) && (defined(VK_KHR_maintenance1) && defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_memory_requirements2) && defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkDestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversionKHR ycbcrConversion, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkGetDeviceQueue2(VkDevice device, const VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue) {
	wfe::staticPfn_vkGetDeviceQueue2(device, pQueueInfo, pQueue);
}
#endif
#if defined(VK_EXT_validation_cache)
VKAPI_ATTR VkResult VKAPI_CALL vkCreateValidationCacheEXT(VkDevice device, const VkValidationCacheCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkValidationCacheEXT* pValidationCache) {
	return wfe::staticPfn_vkCreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyValidationCacheEXT(device, validationCache, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, size_t* pDataSize, void* pData) {
	return wfe::staticPfn_vkGetValidationCacheDataEXT(device, validationCache, pDataSize, pData);
}
VKAPI_ATTR VkResult VKAPI_CALL vkMergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint32_t srcCacheCount, const VkValidationCacheEXT* pSrcCaches) {
	return wfe::staticPfn_vkMergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);
}
#endif
#if defined(VK_VERSION_1_1)
VKAPI_ATTR void VKAPI_CALL vkGetDescriptorSetLayoutSupport(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupportKHR* pSupport) {
	wfe::staticPfn_vkGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);
}
#endif
#if defined(VK_KHR_maintenance3) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkGetDescriptorSetLayoutSupportKHR(VkDevice device, const VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupportKHR* pSupport) {
	wfe::staticPfn_vkGetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);
}
#endif
#if defined(VK_ANDROID_native_buffer)
VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainGrallocUsageANDROID(VkDevice device, VkFormat format, VkImageUsageFlags imageUsage, int* grallocUsage) {
	return wfe::staticPfn_vkGetSwapchainGrallocUsageANDROID(device, format, imageUsage, grallocUsage);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetSwapchainGrallocUsage2ANDROID(VkDevice device, VkFormat format, VkImageUsageFlags imageUsage, VkSwapchainImageUsageFlagsANDROID swapchainImageUsage, uint64_t* grallocConsumerUsage, uint64_t* grallocProducerUsage) {
	return wfe::staticPfn_vkGetSwapchainGrallocUsage2ANDROID(device, format, imageUsage, swapchainImageUsage, grallocConsumerUsage, grallocProducerUsage);
}
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireImageANDROID(VkDevice device, VkImage image, int nativeFenceFd, VkSemaphore semaphore, VkFence fence) {
	return wfe::staticPfn_vkAcquireImageANDROID(device, image, nativeFenceFd, semaphore, fence);
}
VKAPI_ATTR VkResult VKAPI_CALL vkQueueSignalReleaseImageANDROID(VkQueue queue, uint32_t waitSemaphoreCount, const VkSemaphore* pWaitSemaphores, VkImage image, int* pNativeFenceFd) {
	return wfe::staticPfn_vkQueueSignalReleaseImageANDROID(queue, waitSemaphoreCount, pWaitSemaphores, image, pNativeFenceFd);
}
#endif
#if defined(VK_AMD_shader_info)
VKAPI_ATTR VkResult VKAPI_CALL vkGetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, size_t* pInfoSize, void* pInfo) {
	return wfe::staticPfn_vkGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
}
#endif
#if defined(VK_AMD_display_native_hdr) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
VKAPI_ATTR void VKAPI_CALL vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable) {
	wfe::staticPfn_vkSetLocalDimmingAMD(device, swapChain, localDimmingEnable);
}
#endif
#if defined(VK_KHR_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains) {
	return wfe::staticPfn_vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(physicalDevice, pTimeDomainCount, pTimeDomains);
}
#endif
#if defined(VK_EXT_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint32_t* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains) {
	return wfe::staticPfn_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, pTimeDomainCount, pTimeDomains);
}
#endif
#if defined(VK_KHR_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR VkResult VKAPI_CALL vkGetCalibratedTimestampsKHR(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoEXT* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation) {
	return wfe::staticPfn_vkGetCalibratedTimestampsKHR(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
}
#endif
#if defined(VK_EXT_calibrated_timestamps) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR VkResult VKAPI_CALL vkGetCalibratedTimestampsEXT(VkDevice device, uint32_t timestampCount, const VkCalibratedTimestampInfoEXT* pTimestampInfos, uint64_t* pTimestamps, uint64_t* pMaxDeviation) {
	return wfe::staticPfn_vkGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
}
#endif
#if defined(VK_EXT_debug_utils)
VKAPI_ATTR VkResult VKAPI_CALL vkSetDebugUtilsObjectNameEXT(VkDevice device, const VkDebugUtilsObjectNameInfoEXT* pNameInfo) {
	return wfe::staticPfn_vkSetDebugUtilsObjectNameEXT(device, pNameInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkSetDebugUtilsObjectTagEXT(VkDevice device, const VkDebugUtilsObjectTagInfoEXT* pTagInfo) {
	return wfe::staticPfn_vkSetDebugUtilsObjectTagEXT(device, pTagInfo);
}
VKAPI_ATTR void VKAPI_CALL vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo) {
	wfe::staticPfn_vkQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
}
VKAPI_ATTR void VKAPI_CALL vkQueueEndDebugUtilsLabelEXT(VkQueue queue) {
	wfe::staticPfn_vkQueueEndDebugUtilsLabelEXT(queue);
}
VKAPI_ATTR void VKAPI_CALL vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, const VkDebugUtilsLabelEXT* pLabelInfo) {
	wfe::staticPfn_vkQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo) {
	wfe::staticPfn_vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer) {
	wfe::staticPfn_vkCmdEndDebugUtilsLabelEXT(commandBuffer);
}
VKAPI_ATTR void VKAPI_CALL vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, const VkDebugUtilsLabelEXT* pLabelInfo) {
	wfe::staticPfn_vkCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDebugUtilsMessengerEXT(VkInstance instance, const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pMessenger) {
	return wfe::staticPfn_vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);
}
VKAPI_ATTR void VKAPI_CALL vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData) {
	wfe::staticPfn_vkSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, pCallbackData);
}
#endif
#if defined(VK_EXT_external_memory_host) && (defined(VK_KHR_external_memory) || defined(VK_VERSION_1_1))
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, const void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties) {
	return wfe::staticPfn_vkGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties);
}
#endif
#if defined(VK_AMD_buffer_marker)
VKAPI_ATTR void VKAPI_CALL vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker) {
	wfe::staticPfn_vkCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
}
#endif
#if defined(VK_VERSION_1_2)
VKAPI_ATTR VkResult VKAPI_CALL vkCreateRenderPass2(VkDevice device, const VkRenderPassCreateInfo2KHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) {
	return wfe::staticPfn_vkCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);
}
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateRenderPass2KHR(VkDevice device, const VkRenderPassCreateInfo2KHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass) {
	return wfe::staticPfn_vkCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);
}
#endif
#if defined(VK_VERSION_1_2)
VKAPI_ATTR void VKAPI_CALL vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfoKHR* pSubpassBeginInfo) {
	wfe::staticPfn_vkCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
}
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
VKAPI_ATTR void VKAPI_CALL vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, const VkRenderPassBeginInfo* pRenderPassBegin, const VkSubpassBeginInfoKHR* pSubpassBeginInfo) {
	wfe::staticPfn_vkCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
}
#endif
#if defined(VK_VERSION_1_2)
VKAPI_ATTR void VKAPI_CALL vkCmdNextSubpass2(VkCommandBuffer commandBuffer, const VkSubpassBeginInfoKHR* pSubpassBeginInfo, const VkSubpassEndInfoKHR* pSubpassEndInfo) {
	wfe::staticPfn_vkCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
}
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
VKAPI_ATTR void VKAPI_CALL vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, const VkSubpassBeginInfoKHR* pSubpassBeginInfo, const VkSubpassEndInfoKHR* pSubpassEndInfo) {
	wfe::staticPfn_vkCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
}
#endif
#if defined(VK_VERSION_1_2)
VKAPI_ATTR void VKAPI_CALL vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, const VkSubpassEndInfoKHR* pSubpassEndInfo) {
	wfe::staticPfn_vkCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
}
#endif
#if defined(VK_KHR_create_renderpass2) && (defined(VK_KHR_multiview) && defined(VK_KHR_maintenance2))
VKAPI_ATTR void VKAPI_CALL vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, const VkSubpassEndInfoKHR* pSubpassEndInfo) {
	wfe::staticPfn_vkCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
}
#endif
#if defined(VK_VERSION_1_2)
VKAPI_ATTR VkResult VKAPI_CALL vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, uint64_t* pValue) {
	return wfe::staticPfn_vkGetSemaphoreCounterValue(device, semaphore, pValue);
}
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR VkResult VKAPI_CALL vkGetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, uint64_t* pValue) {
	return wfe::staticPfn_vkGetSemaphoreCounterValueKHR(device, semaphore, pValue);
}
#endif
#if defined(VK_VERSION_1_2)
VKAPI_ATTR VkResult VKAPI_CALL vkWaitSemaphores(VkDevice device, const VkSemaphoreWaitInfoKHR* pWaitInfo, uint64_t timeout) {
	return wfe::staticPfn_vkWaitSemaphores(device, pWaitInfo, timeout);
}
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR VkResult VKAPI_CALL vkWaitSemaphoresKHR(VkDevice device, const VkSemaphoreWaitInfoKHR* pWaitInfo, uint64_t timeout) {
	return wfe::staticPfn_vkWaitSemaphoresKHR(device, pWaitInfo, timeout);
}
#endif
#if defined(VK_VERSION_1_2)
VKAPI_ATTR VkResult VKAPI_CALL vkSignalSemaphore(VkDevice device, const VkSemaphoreSignalInfoKHR* pSignalInfo) {
	return wfe::staticPfn_vkSignalSemaphore(device, pSignalInfo);
}
#endif
#if defined(VK_KHR_timeline_semaphore) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR VkResult VKAPI_CALL vkSignalSemaphoreKHR(VkDevice device, const VkSemaphoreSignalInfoKHR* pSignalInfo) {
	return wfe::staticPfn_vkSignalSemaphoreKHR(device, pSignalInfo);
}
#endif
#if defined(VK_ANDROID_external_memory_android_hardware_buffer) && (defined(VK_KHR_sampler_ycbcr_conversion) && defined(VK_KHR_external_memory) && defined(VK_EXT_queue_family_foreign) && defined(VK_KHR_dedicated_allocation))
VKAPI_ATTR VkResult VKAPI_CALL vkGetAndroidHardwareBufferPropertiesANDROID(VkDevice device, const struct AHardwareBuffer* buffer, VkAndroidHardwareBufferPropertiesANDROID* pProperties) {
	return wfe::staticPfn_vkGetAndroidHardwareBufferPropertiesANDROID(device, buffer, pProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetMemoryAndroidHardwareBufferANDROID(VkDevice device, const VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo, struct AHardwareBuffer** pBuffer) {
	return wfe::staticPfn_vkGetMemoryAndroidHardwareBufferANDROID(device, pInfo, pBuffer);
}
#endif
#if defined(VK_VERSION_1_2)
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	wfe::staticPfn_vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#if defined(VK_KHR_draw_indirect_count)
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	wfe::staticPfn_vkCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#if defined(VK_AMD_draw_indirect_count)
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	wfe::staticPfn_vkCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#if defined(VK_VERSION_1_2)
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	wfe::staticPfn_vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#if defined(VK_KHR_draw_indirect_count)
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	wfe::staticPfn_vkCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#if defined(VK_AMD_draw_indirect_count)
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	wfe::staticPfn_vkCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#if defined(VK_NV_device_diagnostic_checkpoints) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, const void* pCheckpointMarker) {
	wfe::staticPfn_vkCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);
}
VKAPI_ATTR void VKAPI_CALL vkGetQueueCheckpointDataNV(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData) {
	wfe::staticPfn_vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);
}
#endif
#if defined(VK_EXT_transform_feedback) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes) {
	wfe::staticPfn_vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets) {
	wfe::staticPfn_vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
}
VKAPI_ATTR void VKAPI_CALL vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint32_t firstCounterBuffer, uint32_t counterBufferCount, const VkBuffer* pCounterBuffers, const VkDeviceSize* pCounterBufferOffsets) {
	wfe::staticPfn_vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, VkQueryControlFlags flags, uint32_t index) {
	wfe::staticPfn_vkCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);
}
VKAPI_ATTR void VKAPI_CALL vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint32_t query, uint32_t index) {
	wfe::staticPfn_vkCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint32_t instanceCount, uint32_t firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint32_t counterOffset, uint32_t vertexStride) {
	wfe::staticPfn_vkCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
}
#endif
#if defined(VK_NV_scissor_exclusive) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkRect2D* pExclusiveScissors) {
	wfe::staticPfn_vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetExclusiveScissorEnableNV(VkCommandBuffer commandBuffer, uint32_t firstExclusiveScissor, uint32_t exclusiveScissorCount, const VkBool32* pExclusiveScissorEnables) {
	wfe::staticPfn_vkCmdSetExclusiveScissorEnableNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissorEnables);
}
#endif
#if defined(VK_NV_shading_rate_image) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout) {
	wfe::staticPfn_vkCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkShadingRatePaletteNV* pShadingRatePalettes) {
	wfe::staticPfn_vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint32_t customSampleOrderCount, const VkCoarseSampleOrderCustomNV* pCustomSampleOrders) {
	wfe::staticPfn_vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
}
#endif
#if defined(VK_NV_mesh_shader) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint32_t taskCount, uint32_t firstTask) {
	wfe::staticPfn_vkCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
	wfe::staticPfn_vkCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	wfe::staticPfn_vkCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#if defined(VK_EXT_mesh_shader) && (defined(VK_KHR_spirv_1_4))
VKAPI_ATTR void VKAPI_CALL vkCmdDrawMeshTasksEXT(VkCommandBuffer commandBuffer, uint32_t groupCountX, uint32_t groupCountY, uint32_t groupCountZ) {
	wfe::staticPfn_vkCmdDrawMeshTasksEXT(commandBuffer, groupCountX, groupCountY, groupCountZ);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDrawMeshTasksIndirectEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint32_t drawCount, uint32_t stride) {
	wfe::staticPfn_vkCmdDrawMeshTasksIndirectEXT(commandBuffer, buffer, offset, drawCount, stride);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDrawMeshTasksIndirectCountEXT(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint32_t maxDrawCount, uint32_t stride) {
	wfe::staticPfn_vkCmdDrawMeshTasksIndirectCountEXT(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
VKAPI_ATTR VkResult VKAPI_CALL vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint32_t shader) {
	return wfe::staticPfn_vkCompileDeferredNV(device, pipeline, shader);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateAccelerationStructureNV(VkDevice device, const VkAccelerationStructureCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkAccelerationStructureNV* pAccelerationStructure) {
	return wfe::staticPfn_vkCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure);
}
#endif
#if defined(VK_HUAWEI_invocation_mask) && (defined(VK_KHR_ray_tracing_pipeline) && defined(VK_KHR_synchronization2))
VKAPI_ATTR void VKAPI_CALL vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout) {
	wfe::staticPfn_vkCmdBindInvocationMaskHUAWEI(commandBuffer, imageView, imageLayout);
}
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
VKAPI_ATTR void VKAPI_CALL vkDestroyAccelerationStructureKHR(VkDevice device, VkAccelerationStructureKHR accelerationStructure, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);
}
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
VKAPI_ATTR void VKAPI_CALL vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);
}
VKAPI_ATTR void VKAPI_CALL vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, const VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements) {
	wfe::staticPfn_vkGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
}
VKAPI_ATTR VkResult VKAPI_CALL vkBindAccelerationStructureMemoryNV(VkDevice device, uint32_t bindInfoCount, const VkBindAccelerationStructureMemoryInfoNV* pBindInfos) {
	return wfe::staticPfn_vkBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);
}
VKAPI_ATTR void VKAPI_CALL vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode) {
	wfe::staticPfn_vkCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
}
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
VKAPI_ATTR void VKAPI_CALL vkCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureInfoKHR* pInfo) {
	wfe::staticPfn_vkCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCopyAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureInfoKHR* pInfo) {
	return wfe::staticPfn_vkCopyAccelerationStructureKHR(device, deferredOperation, pInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo) {
	wfe::staticPfn_vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCopyAccelerationStructureToMemoryKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyAccelerationStructureToMemoryInfoKHR* pInfo) {
	return wfe::staticPfn_vkCopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo) {
	wfe::staticPfn_vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCopyMemoryToAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToAccelerationStructureInfoKHR* pInfo) {
	return wfe::staticPfn_vkCopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) {
	wfe::staticPfn_vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
}
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
VKAPI_ATTR void VKAPI_CALL vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint32_t accelerationStructureCount, const VkAccelerationStructureNV* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) {
	wfe::staticPfn_vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, const VkAccelerationStructureInfoNV* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset) {
	wfe::staticPfn_vkCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
}
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
VKAPI_ATTR VkResult VKAPI_CALL vkWriteAccelerationStructuresPropertiesKHR(VkDevice device, uint32_t accelerationStructureCount, const VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, size_t dataSize, void* pData, size_t stride) {
	return wfe::staticPfn_vkWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
}
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
VKAPI_ATTR void VKAPI_CALL vkCmdTraceRaysKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint32_t width, uint32_t height, uint32_t depth) {
	wfe::staticPfn_vkCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
}
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
VKAPI_ATTR void VKAPI_CALL vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint32_t width, uint32_t height, uint32_t depth) {
	wfe::staticPfn_vkCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
}
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
VKAPI_ATTR VkResult VKAPI_CALL vkGetRayTracingShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData) {
	return wfe::staticPfn_vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
}
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
VKAPI_ATTR VkResult VKAPI_CALL vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData) {
	return wfe::staticPfn_vkGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, pData);
}
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
VKAPI_ATTR VkResult VKAPI_CALL vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint32_t firstGroup, uint32_t groupCount, size_t dataSize, void* pData) {
	return wfe::staticPfn_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
}
#endif
#if defined(VK_NV_ray_tracing) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_get_memory_requirements2))
VKAPI_ATTR VkResult VKAPI_CALL vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, size_t dataSize, void* pData) {
	return wfe::staticPfn_vkGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoNV* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
	return wfe::staticPfn_vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkRayTracingPipelineCreateInfoKHR* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
	return wfe::staticPfn_vkCreateRayTracingPipelinesKHR(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}
#endif
#if defined(VK_NV_cooperative_matrix) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties) {
	return wfe::staticPfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, pPropertyCount, pProperties);
}
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
VKAPI_ATTR void VKAPI_CALL vkCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, const VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, const VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress) {
	wfe::staticPfn_vkCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
}
#endif
#if (defined(VK_KHR_ray_tracing_maintenance1) && (defined(VK_KHR_acceleration_structure))) && (defined(VK_KHR_ray_tracing_pipeline))
VKAPI_ATTR void VKAPI_CALL vkCmdTraceRaysIndirect2KHR(VkCommandBuffer commandBuffer, VkDeviceAddress indirectDeviceAddress) {
	wfe::staticPfn_vkCmdTraceRaysIndirect2KHR(commandBuffer, indirectDeviceAddress);
}
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
VKAPI_ATTR void VKAPI_CALL vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice device, const VkAccelerationStructureVersionInfoKHR* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility) {
	wfe::staticPfn_vkGetDeviceAccelerationStructureCompatibilityKHR(device, pVersionInfo, pCompatibility);
}
#endif
#if defined(VK_KHR_ray_tracing_pipeline) && (defined(VK_KHR_spirv_1_4) && defined(VK_KHR_acceleration_structure))
VKAPI_ATTR VkDeviceSize VKAPI_CALL vkGetRayTracingShaderGroupStackSizeKHR(VkDevice device, VkPipeline pipeline, uint32_t group, VkShaderGroupShaderKHR groupShader) {
	return wfe::staticPfn_vkGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint32_t pipelineStackSize) {
	wfe::staticPfn_vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);
}
#endif
#if defined(VK_NVX_image_view_handle)
VKAPI_ATTR uint32_t VKAPI_CALL vkGetImageViewHandleNVX(VkDevice device, const VkImageViewHandleInfoNVX* pInfo) {
	return wfe::staticPfn_vkGetImageViewHandleNVX(device, pInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetImageViewAddressNVX(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX* pProperties) {
	return wfe::staticPfn_vkGetImageViewAddressNVX(device, imageView, pProperties);
}
#endif
#if defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSurfacePresentModes2EXT(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint32_t* pPresentModeCount, VkPresentModeKHR* pPresentModes) {
	return wfe::staticPfn_vkGetPhysicalDeviceSurfacePresentModes2EXT(physicalDevice, pSurfaceInfo, pPresentModeCount, pPresentModes);
}
#endif
#if ((defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))) && (defined(VK_KHR_device_group))) || ((defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))) && (defined(VK_VERSION_1_1)))
VKAPI_ATTR VkResult VKAPI_CALL vkGetDeviceGroupSurfacePresentModes2EXT(VkDevice device, const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkDeviceGroupPresentModeFlagsKHR* pModes) {
	return wfe::staticPfn_vkGetDeviceGroupSurfacePresentModes2EXT(device, pSurfaceInfo, pModes);
}
#endif
#if defined(VK_EXT_full_screen_exclusive) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_surface) && defined(VK_KHR_get_surface_capabilities2) && defined(VK_KHR_swapchain))
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain) {
	return wfe::staticPfn_vkAcquireFullScreenExclusiveModeEXT(device, swapchain);
}
VKAPI_ATTR VkResult VKAPI_CALL vkReleaseFullScreenExclusiveModeEXT(VkDevice device, VkSwapchainKHR swapchain) {
	return wfe::staticPfn_vkReleaseFullScreenExclusiveModeEXT(device, swapchain);
}
#endif
#if defined(VK_KHR_performance_query) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR VkResult VKAPI_CALL vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint32_t queueFamilyIndex, uint32_t* pCounterCount, VkPerformanceCounterKHR* pCounters, VkPerformanceCounterDescriptionKHR* pCounterDescriptions) {
	return wfe::staticPfn_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
}
VKAPI_ATTR void VKAPI_CALL vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, const VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, uint32_t* pNumPasses) {
	wfe::staticPfn_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
}
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireProfilingLockKHR(VkDevice device, const VkAcquireProfilingLockInfoKHR* pInfo) {
	return wfe::staticPfn_vkAcquireProfilingLockKHR(device, pInfo);
}
VKAPI_ATTR void VKAPI_CALL vkReleaseProfilingLockKHR(VkDevice device) {
	wfe::staticPfn_vkReleaseProfilingLockKHR(device);
}
#endif
#if defined(VK_EXT_image_drm_format_modifier) && (((defined(VK_KHR_bind_memory2) && defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_sampler_ycbcr_conversion)) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_image_format_list) || defined(VK_VERSION_1_2)))
VKAPI_ATTR VkResult VKAPI_CALL vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* pProperties) {
	return wfe::staticPfn_vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);
}
#endif
#if defined(VK_VERSION_1_2)
VKAPI_ATTR uint64_t VKAPI_CALL vkGetBufferOpaqueCaptureAddress(VkDevice device, const VkBufferDeviceAddressInfoKHR* pInfo) {
	return wfe::staticPfn_vkGetBufferOpaqueCaptureAddress(device, pInfo);
}
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
VKAPI_ATTR uint64_t VKAPI_CALL vkGetBufferOpaqueCaptureAddressKHR(VkDevice device, const VkBufferDeviceAddressInfoKHR* pInfo) {
	return wfe::staticPfn_vkGetBufferOpaqueCaptureAddressKHR(device, pInfo);
}
#endif
#if defined(VK_VERSION_1_2)
VKAPI_ATTR VkDeviceAddress VKAPI_CALL vkGetBufferDeviceAddress(VkDevice device, const VkBufferDeviceAddressInfoKHR* pInfo) {
	return wfe::staticPfn_vkGetBufferDeviceAddress(device, pInfo);
}
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
VKAPI_ATTR VkDeviceAddress VKAPI_CALL vkGetBufferDeviceAddressKHR(VkDevice device, const VkBufferDeviceAddressInfoKHR* pInfo) {
	return wfe::staticPfn_vkGetBufferDeviceAddressKHR(device, pInfo);
}
#endif
#if defined(VK_EXT_buffer_device_address) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR VkDeviceAddress VKAPI_CALL vkGetBufferDeviceAddressEXT(VkDevice device, const VkBufferDeviceAddressInfoKHR* pInfo) {
	return wfe::staticPfn_vkGetBufferDeviceAddressEXT(device, pInfo);
}
#endif
#if defined(VK_EXT_headless_surface) && (defined(VK_KHR_surface))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateHeadlessSurfaceEXT(VkInstance instance, const VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface) {
	return wfe::staticPfn_vkCreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#if defined(VK_NV_coverage_reduction_mode) && (defined(VK_NV_framebuffer_mixed_samples) && defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint32_t* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations) {
	return wfe::staticPfn_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, pCombinationCount, pCombinations);
}
#endif
#if defined(VK_INTEL_performance_query)
VKAPI_ATTR VkResult VKAPI_CALL vkInitializePerformanceApiINTEL(VkDevice device, const VkInitializePerformanceApiInfoINTEL* pInitializeInfo) {
	return wfe::staticPfn_vkInitializePerformanceApiINTEL(device, pInitializeInfo);
}
VKAPI_ATTR void VKAPI_CALL vkUninitializePerformanceApiINTEL(VkDevice device) {
	wfe::staticPfn_vkUninitializePerformanceApiINTEL(device);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceMarkerInfoINTEL* pMarkerInfo) {
	return wfe::staticPfn_vkCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, const VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo) {
	return wfe::staticPfn_vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, const VkPerformanceOverrideInfoINTEL* pOverrideInfo) {
	return wfe::staticPfn_vkCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkAcquirePerformanceConfigurationINTEL(VkDevice device, const VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VkPerformanceConfigurationINTEL* pConfiguration) {
	return wfe::staticPfn_vkAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration);
}
VKAPI_ATTR VkResult VKAPI_CALL vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration) {
	return wfe::staticPfn_vkReleasePerformanceConfigurationINTEL(device, configuration);
}
VKAPI_ATTR VkResult VKAPI_CALL vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration) {
	return wfe::staticPfn_vkQueueSetPerformanceConfigurationINTEL(queue, configuration);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue) {
	return wfe::staticPfn_vkGetPerformanceParameterINTEL(device, parameter, pValue);
}
#endif
#if defined(VK_VERSION_1_2)
VKAPI_ATTR uint64_t VKAPI_CALL vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfoKHR* pInfo) {
	return wfe::staticPfn_vkGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);
}
#endif
#if defined(VK_KHR_buffer_device_address) && ((defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_device_group)) || defined(VK_VERSION_1_1))
VKAPI_ATTR uint64_t VKAPI_CALL vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice device, const VkDeviceMemoryOpaqueCaptureAddressInfoKHR* pInfo) {
	return wfe::staticPfn_vkGetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);
}
#endif
#if defined(VK_KHR_pipeline_executable_properties) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPipelineExecutablePropertiesKHR(VkDevice device, const VkPipelineInfoKHR* pPipelineInfo, uint32_t* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties) {
	return wfe::staticPfn_vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPipelineExecutableStatisticsKHR(VkDevice device, const VkPipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics) {
	return wfe::staticPfn_vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, const VkPipelineExecutableInfoKHR* pExecutableInfo, uint32_t* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations) {
	return wfe::staticPfn_vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
}
#endif
#if defined(VK_KHR_line_rasterization) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdSetLineStippleKHR(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern) {
	wfe::staticPfn_vkCmdSetLineStippleKHR(commandBuffer, lineStippleFactor, lineStipplePattern);
}
#endif
#if defined(VK_EXT_line_rasterization) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint32_t lineStippleFactor, uint16_t lineStipplePattern) {
	wfe::staticPfn_vkCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolPropertiesEXT* pToolProperties) {
	return wfe::staticPfn_vkGetPhysicalDeviceToolProperties(physicalDevice, pToolCount, pToolProperties);
}
#endif
#if defined(VK_EXT_tooling_info)
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint32_t* pToolCount, VkPhysicalDeviceToolPropertiesEXT* pToolProperties) {
	return wfe::staticPfn_vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties);
}
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateAccelerationStructureKHR(VkDevice device, const VkAccelerationStructureCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkAccelerationStructureKHR* pAccelerationStructure) {
	return wfe::staticPfn_vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos) {
	wfe::staticPfn_vkCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkDeviceAddress* pIndirectDeviceAddresses, const uint32_t* pIndirectStrides, const uint32_t* const* ppMaxPrimitiveCounts) {
	wfe::staticPfn_vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
}
VKAPI_ATTR VkResult VKAPI_CALL vkBuildAccelerationStructuresKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkAccelerationStructureBuildGeometryInfoKHR* pInfos, const VkAccelerationStructureBuildRangeInfoKHR* const* ppBuildRangeInfos) {
	return wfe::staticPfn_vkBuildAccelerationStructuresKHR(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
}
VKAPI_ATTR VkDeviceAddress VKAPI_CALL vkGetAccelerationStructureDeviceAddressKHR(VkDevice device, const VkAccelerationStructureDeviceAddressInfoKHR* pInfo) {
	return wfe::staticPfn_vkGetAccelerationStructureDeviceAddressKHR(device, pInfo);
}
#endif
#if defined(VK_KHR_deferred_host_operations)
VKAPI_ATTR VkResult VKAPI_CALL vkCreateDeferredOperationKHR(VkDevice device, const VkAllocationCallbacks* pAllocator, VkDeferredOperationKHR* pDeferredOperation) {
	return wfe::staticPfn_vkCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyDeferredOperationKHR(device, operation, pAllocator);
}
VKAPI_ATTR uint32_t VKAPI_CALL vkGetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation) {
	return wfe::staticPfn_vkGetDeferredOperationMaxConcurrencyKHR(device, operation);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation) {
	return wfe::staticPfn_vkGetDeferredOperationResultKHR(device, operation);
}
VKAPI_ATTR VkResult VKAPI_CALL vkDeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation) {
	return wfe::staticPfn_vkDeferredOperationJoinKHR(device, operation);
}
#endif
#if defined(VK_NV_device_generated_commands_compute) && (defined(VK_NV_device_generated_commands))
VKAPI_ATTR void VKAPI_CALL vkGetPipelineIndirectMemoryRequirementsNV(VkDevice device, const VkComputePipelineCreateInfo* pCreateInfo, VkMemoryRequirements2* pMemoryRequirements) {
	wfe::staticPfn_vkGetPipelineIndirectMemoryRequirementsNV(device, pCreateInfo, pMemoryRequirements);
}
VKAPI_ATTR VkDeviceAddress VKAPI_CALL vkGetPipelineIndirectDeviceAddressNV(VkDevice device, const VkPipelineIndirectDeviceAddressInfoNV* pInfo) {
	return wfe::staticPfn_vkGetPipelineIndirectDeviceAddressNV(device, pInfo);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode) {
	wfe::staticPfn_vkCmdSetCullMode(commandBuffer, cullMode);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode) {
	wfe::staticPfn_vkCmdSetCullModeEXT(commandBuffer, cullMode);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace) {
	wfe::staticPfn_vkCmdSetFrontFace(commandBuffer, frontFace);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace) {
	wfe::staticPfn_vkCmdSetFrontFaceEXT(commandBuffer, frontFace);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) {
	wfe::staticPfn_vkCmdSetPrimitiveTopology(commandBuffer, primitiveTopology);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology) {
	wfe::staticPfn_vkCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports) {
	wfe::staticPfn_vkCmdSetViewportWithCount(commandBuffer, viewportCount, pViewports);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint32_t viewportCount, const VkViewport* pViewports) {
	wfe::staticPfn_vkCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors) {
	wfe::staticPfn_vkCmdSetScissorWithCount(commandBuffer, scissorCount, pScissors);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint32_t scissorCount, const VkRect2D* pScissors) {
	wfe::staticPfn_vkCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);
}
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
VKAPI_ATTR void VKAPI_CALL vkCmdBindIndexBuffer2KHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkDeviceSize size, VkIndexType indexType) {
	wfe::staticPfn_vkCmdBindIndexBuffer2KHR(commandBuffer, buffer, offset, size, indexType);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides) {
	wfe::staticPfn_vkCmdBindVertexBuffers2(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint32_t firstBinding, uint32_t bindingCount, const VkBuffer* pBuffers, const VkDeviceSize* pOffsets, const VkDeviceSize* pSizes, const VkDeviceSize* pStrides) {
	wfe::staticPfn_vkCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable) {
	wfe::staticPfn_vkCmdSetDepthTestEnable(commandBuffer, depthTestEnable);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable) {
	wfe::staticPfn_vkCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable) {
	wfe::staticPfn_vkCmdSetDepthWriteEnable(commandBuffer, depthWriteEnable);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable) {
	wfe::staticPfn_vkCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp) {
	wfe::staticPfn_vkCmdSetDepthCompareOp(commandBuffer, depthCompareOp);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp) {
	wfe::staticPfn_vkCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable) {
	wfe::staticPfn_vkCmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable) {
	wfe::staticPfn_vkCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable) {
	wfe::staticPfn_vkCmdSetStencilTestEnable(commandBuffer, stencilTestEnable);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable) {
	wfe::staticPfn_vkCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) {
	wfe::staticPfn_vkCmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp) {
	wfe::staticPfn_vkCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint32_t patchControlPoints) {
	wfe::staticPfn_vkCmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable) {
	wfe::staticPfn_vkCmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable) {
	wfe::staticPfn_vkCmdSetRasterizerDiscardEnableEXT(commandBuffer, rasterizerDiscardEnable);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable) {
	wfe::staticPfn_vkCmdSetDepthBiasEnable(commandBuffer, depthBiasEnable);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable) {
	wfe::staticPfn_vkCmdSetDepthBiasEnableEXT(commandBuffer, depthBiasEnable);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp) {
	wfe::staticPfn_vkCmdSetLogicOpEXT(commandBuffer, logicOp);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable) {
	wfe::staticPfn_vkCmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable) {
	wfe::staticPfn_vkCmdSetPrimitiveRestartEnableEXT(commandBuffer, primitiveRestartEnable);
}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_KHR_maintenance2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetTessellationDomainOriginEXT(VkCommandBuffer commandBuffer, VkTessellationDomainOrigin domainOrigin) {
	wfe::staticPfn_vkCmdSetTessellationDomainOriginEXT(commandBuffer, domainOrigin);
}
#endif
#if (defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthClampEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClampEnable) {
	wfe::staticPfn_vkCmdSetDepthClampEnableEXT(commandBuffer, depthClampEnable);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetPolygonModeEXT(VkCommandBuffer commandBuffer, VkPolygonMode polygonMode) {
	wfe::staticPfn_vkCmdSetPolygonModeEXT(commandBuffer, polygonMode);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetRasterizationSamplesEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits rasterizationSamples) {
	wfe::staticPfn_vkCmdSetRasterizationSamplesEXT(commandBuffer, rasterizationSamples);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetSampleMaskEXT(VkCommandBuffer commandBuffer, VkSampleCountFlagBits samples, const VkSampleMask* pSampleMask) {
	wfe::staticPfn_vkCmdSetSampleMaskEXT(commandBuffer, samples, pSampleMask);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetAlphaToCoverageEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToCoverageEnable) {
	wfe::staticPfn_vkCmdSetAlphaToCoverageEnableEXT(commandBuffer, alphaToCoverageEnable);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetAlphaToOneEnableEXT(VkCommandBuffer commandBuffer, VkBool32 alphaToOneEnable) {
	wfe::staticPfn_vkCmdSetAlphaToOneEnableEXT(commandBuffer, alphaToOneEnable);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetLogicOpEnableEXT(VkCommandBuffer commandBuffer, VkBool32 logicOpEnable) {
	wfe::staticPfn_vkCmdSetLogicOpEnableEXT(commandBuffer, logicOpEnable);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetColorBlendEnableEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkBool32* pColorBlendEnables) {
	wfe::staticPfn_vkCmdSetColorBlendEnableEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendEnables);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetColorBlendEquationEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendEquationEXT* pColorBlendEquations) {
	wfe::staticPfn_vkCmdSetColorBlendEquationEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendEquations);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetColorWriteMaskEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorComponentFlags* pColorWriteMasks) {
	wfe::staticPfn_vkCmdSetColorWriteMaskEXT(commandBuffer, firstAttachment, attachmentCount, pColorWriteMasks);
}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_transform_feedback))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_transform_feedback)))
VKAPI_ATTR void VKAPI_CALL vkCmdSetRasterizationStreamEXT(VkCommandBuffer commandBuffer, uint32_t rasterizationStream) {
	wfe::staticPfn_vkCmdSetRasterizationStreamEXT(commandBuffer, rasterizationStream);
}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_conservative_rasterization))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_conservative_rasterization)))
VKAPI_ATTR void VKAPI_CALL vkCmdSetConservativeRasterizationModeEXT(VkCommandBuffer commandBuffer, VkConservativeRasterizationModeEXT conservativeRasterizationMode) {
	wfe::staticPfn_vkCmdSetConservativeRasterizationModeEXT(commandBuffer, conservativeRasterizationMode);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetExtraPrimitiveOverestimationSizeEXT(VkCommandBuffer commandBuffer, float extraPrimitiveOverestimationSize) {
	wfe::staticPfn_vkCmdSetExtraPrimitiveOverestimationSizeEXT(commandBuffer, extraPrimitiveOverestimationSize);
}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_depth_clip_enable))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_depth_clip_enable)))
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthClipEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthClipEnable) {
	wfe::staticPfn_vkCmdSetDepthClipEnableEXT(commandBuffer, depthClipEnable);
}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_sample_locations))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_sample_locations)))
VKAPI_ATTR void VKAPI_CALL vkCmdSetSampleLocationsEnableEXT(VkCommandBuffer commandBuffer, VkBool32 sampleLocationsEnable) {
	wfe::staticPfn_vkCmdSetSampleLocationsEnableEXT(commandBuffer, sampleLocationsEnable);
}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_blend_operation_advanced))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_blend_operation_advanced)))
VKAPI_ATTR void VKAPI_CALL vkCmdSetColorBlendAdvancedEXT(VkCommandBuffer commandBuffer, uint32_t firstAttachment, uint32_t attachmentCount, const VkColorBlendAdvancedEXT* pColorBlendAdvanced) {
	wfe::staticPfn_vkCmdSetColorBlendAdvancedEXT(commandBuffer, firstAttachment, attachmentCount, pColorBlendAdvanced);
}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_provoking_vertex))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_provoking_vertex)))
VKAPI_ATTR void VKAPI_CALL vkCmdSetProvokingVertexModeEXT(VkCommandBuffer commandBuffer, VkProvokingVertexModeEXT provokingVertexMode) {
	wfe::staticPfn_vkCmdSetProvokingVertexModeEXT(commandBuffer, provokingVertexMode);
}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_line_rasterization))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_line_rasterization)))
VKAPI_ATTR void VKAPI_CALL vkCmdSetLineRasterizationModeEXT(VkCommandBuffer commandBuffer, VkLineRasterizationModeEXT lineRasterizationMode) {
	wfe::staticPfn_vkCmdSetLineRasterizationModeEXT(commandBuffer, lineRasterizationMode);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetLineStippleEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stippledLineEnable) {
	wfe::staticPfn_vkCmdSetLineStippleEnableEXT(commandBuffer, stippledLineEnable);
}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_EXT_depth_clip_control))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_EXT_depth_clip_control)))
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthClipNegativeOneToOneEXT(VkCommandBuffer commandBuffer, VkBool32 negativeOneToOne) {
	wfe::staticPfn_vkCmdSetDepthClipNegativeOneToOneEXT(commandBuffer, negativeOneToOne);
}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_clip_space_w_scaling))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_clip_space_w_scaling)))
VKAPI_ATTR void VKAPI_CALL vkCmdSetViewportWScalingEnableNV(VkCommandBuffer commandBuffer, VkBool32 viewportWScalingEnable) {
	wfe::staticPfn_vkCmdSetViewportWScalingEnableNV(commandBuffer, viewportWScalingEnable);
}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_viewport_swizzle))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_viewport_swizzle)))
VKAPI_ATTR void VKAPI_CALL vkCmdSetViewportSwizzleNV(VkCommandBuffer commandBuffer, uint32_t firstViewport, uint32_t viewportCount, const VkViewportSwizzleNV* pViewportSwizzles) {
	wfe::staticPfn_vkCmdSetViewportSwizzleNV(commandBuffer, firstViewport, viewportCount, pViewportSwizzles);
}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_fragment_coverage_to_color))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_fragment_coverage_to_color)))
VKAPI_ATTR void VKAPI_CALL vkCmdSetCoverageToColorEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageToColorEnable) {
	wfe::staticPfn_vkCmdSetCoverageToColorEnableNV(commandBuffer, coverageToColorEnable);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetCoverageToColorLocationNV(VkCommandBuffer commandBuffer, uint32_t coverageToColorLocation) {
	wfe::staticPfn_vkCmdSetCoverageToColorLocationNV(commandBuffer, coverageToColorLocation);
}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_framebuffer_mixed_samples))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_framebuffer_mixed_samples)))
VKAPI_ATTR void VKAPI_CALL vkCmdSetCoverageModulationModeNV(VkCommandBuffer commandBuffer, VkCoverageModulationModeNV coverageModulationMode) {
	wfe::staticPfn_vkCmdSetCoverageModulationModeNV(commandBuffer, coverageModulationMode);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetCoverageModulationTableEnableNV(VkCommandBuffer commandBuffer, VkBool32 coverageModulationTableEnable) {
	wfe::staticPfn_vkCmdSetCoverageModulationTableEnableNV(commandBuffer, coverageModulationTableEnable);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetCoverageModulationTableNV(VkCommandBuffer commandBuffer, uint32_t coverageModulationTableCount, const float* pCoverageModulationTable) {
	wfe::staticPfn_vkCmdSetCoverageModulationTableNV(commandBuffer, coverageModulationTableCount, pCoverageModulationTable);
}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_shading_rate_image))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_shading_rate_image)))
VKAPI_ATTR void VKAPI_CALL vkCmdSetShadingRateImageEnableNV(VkCommandBuffer commandBuffer, VkBool32 shadingRateImageEnable) {
	wfe::staticPfn_vkCmdSetShadingRateImageEnableNV(commandBuffer, shadingRateImageEnable);
}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_coverage_reduction_mode))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_coverage_reduction_mode)))
VKAPI_ATTR void VKAPI_CALL vkCmdSetCoverageReductionModeNV(VkCommandBuffer commandBuffer, VkCoverageReductionModeNV coverageReductionMode) {
	wfe::staticPfn_vkCmdSetCoverageReductionModeNV(commandBuffer, coverageReductionMode);
}
#endif
#if ((defined(VK_EXT_extended_dynamic_state3) && (defined(VK_KHR_get_physical_device_properties2))) && (defined(VK_NV_representative_fragment_test))) || ((defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))) && (defined(VK_NV_representative_fragment_test)))
VKAPI_ATTR void VKAPI_CALL vkCmdSetRepresentativeFragmentTestEnableNV(VkCommandBuffer commandBuffer, VkBool32 representativeFragmentTestEnable) {
	wfe::staticPfn_vkCmdSetRepresentativeFragmentTestEnableNV(commandBuffer, representativeFragmentTestEnable);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR VkResult VKAPI_CALL vkCreatePrivateDataSlot(VkDevice device, const VkPrivateDataSlotCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPrivateDataSlotEXT* pPrivateDataSlot) {
	return wfe::staticPfn_vkCreatePrivateDataSlot(device, pCreateInfo, pAllocator, pPrivateDataSlot);
}
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR VkResult VKAPI_CALL vkCreatePrivateDataSlotEXT(VkDevice device, const VkPrivateDataSlotCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkPrivateDataSlotEXT* pPrivateDataSlot) {
	return wfe::staticPfn_vkCreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlotEXT privateDataSlot, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyPrivateDataSlot(device, privateDataSlot, pAllocator);
}
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlotEXT privateDataSlot, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR VkResult VKAPI_CALL vkSetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlotEXT privateDataSlot, uint64_t data) {
	return wfe::staticPfn_vkSetPrivateData(device, objectType, objectHandle, privateDataSlot, data);
}
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR VkResult VKAPI_CALL vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlotEXT privateDataSlot, uint64_t data) {
	return wfe::staticPfn_vkSetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkGetPrivateData(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlotEXT privateDataSlot, uint64_t* pData) {
	wfe::staticPfn_vkGetPrivateData(device, objectType, objectHandle, privateDataSlot, pData);
}
#endif
#if defined(VK_EXT_private_data) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, uint64_t objectHandle, VkPrivateDataSlotEXT privateDataSlot, uint64_t* pData) {
	wfe::staticPfn_vkGetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2KHR* pCopyBufferInfo) {
	wfe::staticPfn_vkCmdCopyBuffer2(commandBuffer, pCopyBufferInfo);
}
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferInfo2KHR* pCopyBufferInfo) {
	wfe::staticPfn_vkCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdCopyImage2(VkCommandBuffer commandBuffer, const VkCopyImageInfo2KHR* pCopyImageInfo) {
	wfe::staticPfn_vkCmdCopyImage2(commandBuffer, pCopyImageInfo);
}
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, const VkCopyImageInfo2KHR* pCopyImageInfo) {
	wfe::staticPfn_vkCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdBlitImage2(VkCommandBuffer commandBuffer, const VkBlitImageInfo2KHR* pBlitImageInfo) {
	wfe::staticPfn_vkCmdBlitImage2(commandBuffer, pBlitImageInfo);
}
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, const VkBlitImageInfo2KHR* pBlitImageInfo) {
	wfe::staticPfn_vkCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2KHR* pCopyBufferToImageInfo) {
	wfe::staticPfn_vkCmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo);
}
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, const VkCopyBufferToImageInfo2KHR* pCopyBufferToImageInfo) {
	wfe::staticPfn_vkCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2KHR* pCopyImageToBufferInfo) {
	wfe::staticPfn_vkCmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo);
}
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, const VkCopyImageToBufferInfo2KHR* pCopyImageToBufferInfo) {
	wfe::staticPfn_vkCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdResolveImage2(VkCommandBuffer commandBuffer, const VkResolveImageInfo2KHR* pResolveImageInfo) {
	wfe::staticPfn_vkCmdResolveImage2(commandBuffer, pResolveImageInfo);
}
#endif
#if defined(VK_KHR_copy_commands2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, const VkResolveImageInfo2KHR* pResolveImageInfo) {
	wfe::staticPfn_vkCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);
}
#endif
#if defined(VK_KHR_object_refresh)
VKAPI_ATTR void VKAPI_CALL vkCmdRefreshObjectsKHR(VkCommandBuffer commandBuffer, const VkRefreshObjectListKHR* pRefreshObjects) {
	wfe::staticPfn_vkCmdRefreshObjectsKHR(commandBuffer, pRefreshObjects);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceRefreshableObjectTypesKHR(VkPhysicalDevice physicalDevice, uint32_t* pRefreshableObjectTypeCount, VkObjectType* pRefreshableObjectTypes) {
	return wfe::staticPfn_vkGetPhysicalDeviceRefreshableObjectTypesKHR(physicalDevice, pRefreshableObjectTypeCount, pRefreshableObjectTypes);
}
#endif
#if defined(VK_KHR_fragment_shading_rate) && ((defined(VK_KHR_create_renderpass2) || defined(VK_VERSION_1_2)) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)))
VKAPI_ATTR void VKAPI_CALL vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, const VkExtent2D* pFragmentSize, const VkFragmentShadingRateCombinerOpKHR combinerOps[2]) {
	wfe::staticPfn_vkCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice, uint32_t* pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates) {
	return wfe::staticPfn_vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
}
#endif
#if defined(VK_NV_fragment_shading_rate_enums) && (defined(VK_KHR_fragment_shading_rate))
VKAPI_ATTR void VKAPI_CALL vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, const VkFragmentShadingRateCombinerOpKHR combinerOps[2]) {
	wfe::staticPfn_vkCmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);
}
#endif
#if defined(VK_KHR_acceleration_structure) && (defined(VK_VERSION_1_1) && defined(VK_EXT_descriptor_indexing) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_deferred_host_operations))
VKAPI_ATTR void VKAPI_CALL vkGetAccelerationStructureBuildSizesKHR(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo, const uint32_t* pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo) {
	wfe::staticPfn_vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
}
#endif
#if (defined(VK_EXT_vertex_input_dynamic_state) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) || (defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3))))
VKAPI_ATTR void VKAPI_CALL vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint32_t vertexBindingDescriptionCount, const VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint32_t vertexAttributeDescriptionCount, const VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions) {
	wfe::staticPfn_vkCmdSetVertexInputEXT(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
}
#endif
#if defined(VK_EXT_color_write_enable) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint32_t attachmentCount, const VkBool32* pColorWriteEnables) {
	wfe::staticPfn_vkCmdSetColorWriteEnableEXT(commandBuffer, attachmentCount, pColorWriteEnables);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfoKHR* pDependencyInfo) {
	wfe::staticPfn_vkCmdSetEvent2(commandBuffer, event, pDependencyInfo);
}
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, const VkDependencyInfoKHR* pDependencyInfo) {
	wfe::staticPfn_vkCmdSetEvent2KHR(commandBuffer, event, pDependencyInfo);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2KHR stageMask) {
	wfe::staticPfn_vkCmdResetEvent2(commandBuffer, event, stageMask);
}
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent event, VkPipelineStageFlags2KHR stageMask) {
	wfe::staticPfn_vkCmdResetEvent2KHR(commandBuffer, event, stageMask);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfoKHR* pDependencyInfos) {
	wfe::staticPfn_vkCmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos);
}
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint32_t eventCount, const VkEvent* pEvents, const VkDependencyInfoKHR* pDependencyInfos) {
	wfe::staticPfn_vkCmdWaitEvents2KHR(commandBuffer, eventCount, pEvents, pDependencyInfos);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, const VkDependencyInfoKHR* pDependencyInfo) {
	wfe::staticPfn_vkCmdPipelineBarrier2(commandBuffer, pDependencyInfo);
}
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, const VkDependencyInfoKHR* pDependencyInfo) {
	wfe::staticPfn_vkCmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR VkResult VKAPI_CALL vkQueueSubmit2(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2KHR* pSubmits, VkFence fence) {
	return wfe::staticPfn_vkQueueSubmit2(queue, submitCount, pSubmits, fence);
}
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR VkResult VKAPI_CALL vkQueueSubmit2KHR(VkQueue queue, uint32_t submitCount, const VkSubmitInfo2KHR* pSubmits, VkFence fence) {
	return wfe::staticPfn_vkQueueSubmit2KHR(queue, submitCount, pSubmits, fence);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2KHR stage, VkQueryPool queryPool, uint32_t query) {
	wfe::staticPfn_vkCmdWriteTimestamp2(commandBuffer, stage, queryPool, query);
}
#endif
#if defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2KHR stage, VkQueryPool queryPool, uint32_t query) {
	wfe::staticPfn_vkCmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query);
}
#endif
#if (defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) && (defined(VK_AMD_buffer_marker))
VKAPI_ATTR void VKAPI_CALL vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint32_t marker) {
	wfe::staticPfn_vkCmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer, dstOffset, marker);
}
#endif
#if (defined(VK_KHR_synchronization2) && (defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1))) && (defined(VK_NV_device_diagnostic_checkpoints))
VKAPI_ATTR void VKAPI_CALL vkGetQueueCheckpointData2NV(VkQueue queue, uint32_t* pCheckpointDataCount, VkCheckpointData2NV* pCheckpointData) {
	wfe::staticPfn_vkGetQueueCheckpointData2NV(queue, pCheckpointDataCount, pCheckpointData);
}
#endif
#if defined(VK_EXT_host_image_copy) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_copy_commands2) && defined(VK_KHR_format_feature_flags2))
VKAPI_ATTR VkResult VKAPI_CALL vkCopyMemoryToImageEXT(VkDevice device, const VkCopyMemoryToImageInfoEXT* pCopyMemoryToImageInfo) {
	return wfe::staticPfn_vkCopyMemoryToImageEXT(device, pCopyMemoryToImageInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCopyImageToMemoryEXT(VkDevice device, const VkCopyImageToMemoryInfoEXT* pCopyImageToMemoryInfo) {
	return wfe::staticPfn_vkCopyImageToMemoryEXT(device, pCopyImageToMemoryInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCopyImageToImageEXT(VkDevice device, const VkCopyImageToImageInfoEXT* pCopyImageToImageInfo) {
	return wfe::staticPfn_vkCopyImageToImageEXT(device, pCopyImageToImageInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkTransitionImageLayoutEXT(VkDevice device, uint32_t transitionCount, const VkHostImageLayoutTransitionInfoEXT* pTransitions) {
	return wfe::staticPfn_vkTransitionImageLayoutEXT(device, transitionCount, pTransitions);
}
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceVideoCapabilitiesKHR(VkPhysicalDevice physicalDevice, const VkVideoProfileInfoKHR* pVideoProfile, VkVideoCapabilitiesKHR* pCapabilities) {
	return wfe::staticPfn_vkGetPhysicalDeviceVideoCapabilitiesKHR(physicalDevice, pVideoProfile, pCapabilities);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceVideoFormatPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoFormatInfoKHR* pVideoFormatInfo, uint32_t* pVideoFormatPropertyCount, VkVideoFormatPropertiesKHR* pVideoFormatProperties) {
	return wfe::staticPfn_vkGetPhysicalDeviceVideoFormatPropertiesKHR(physicalDevice, pVideoFormatInfo, pVideoFormatPropertyCount, pVideoFormatProperties);
}
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(VkPhysicalDevice physicalDevice, const VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR* pQualityLevelInfo, VkVideoEncodeQualityLevelPropertiesKHR* pQualityLevelProperties) {
	return wfe::staticPfn_vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(physicalDevice, pQualityLevelInfo, pQualityLevelProperties);
}
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateVideoSessionKHR(VkDevice device, const VkVideoSessionCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkVideoSessionKHR* pVideoSession) {
	return wfe::staticPfn_vkCreateVideoSessionKHR(device, pCreateInfo, pAllocator, pVideoSession);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyVideoSessionKHR(VkDevice device, VkVideoSessionKHR videoSession, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyVideoSessionKHR(device, videoSession, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateVideoSessionParametersKHR(VkDevice device, const VkVideoSessionParametersCreateInfoKHR* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkVideoSessionParametersKHR* pVideoSessionParameters) {
	return wfe::staticPfn_vkCreateVideoSessionParametersKHR(device, pCreateInfo, pAllocator, pVideoSessionParameters);
}
VKAPI_ATTR VkResult VKAPI_CALL vkUpdateVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkVideoSessionParametersUpdateInfoKHR* pUpdateInfo) {
	return wfe::staticPfn_vkUpdateVideoSessionParametersKHR(device, videoSessionParameters, pUpdateInfo);
}
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
VKAPI_ATTR VkResult VKAPI_CALL vkGetEncodedVideoSessionParametersKHR(VkDevice device, const VkVideoEncodeSessionParametersGetInfoKHR* pVideoSessionParametersInfo, VkVideoEncodeSessionParametersFeedbackInfoKHR* pFeedbackInfo, size_t* pDataSize, void* pData) {
	return wfe::staticPfn_vkGetEncodedVideoSessionParametersKHR(device, pVideoSessionParametersInfo, pFeedbackInfo, pDataSize, pData);
}
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
VKAPI_ATTR void VKAPI_CALL vkDestroyVideoSessionParametersKHR(VkDevice device, VkVideoSessionParametersKHR videoSessionParameters, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyVideoSessionParametersKHR(device, videoSessionParameters, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetVideoSessionMemoryRequirementsKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t* pMemoryRequirementsCount, VkVideoSessionMemoryRequirementsKHR* pMemoryRequirements) {
	return wfe::staticPfn_vkGetVideoSessionMemoryRequirementsKHR(device, videoSession, pMemoryRequirementsCount, pMemoryRequirements);
}
VKAPI_ATTR VkResult VKAPI_CALL vkBindVideoSessionMemoryKHR(VkDevice device, VkVideoSessionKHR videoSession, uint32_t bindSessionMemoryInfoCount, const VkBindVideoSessionMemoryInfoKHR* pBindSessionMemoryInfos) {
	return wfe::staticPfn_vkBindVideoSessionMemoryKHR(device, videoSession, bindSessionMemoryInfoCount, pBindSessionMemoryInfos);
}
#endif
#if defined(VK_KHR_video_decode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
VKAPI_ATTR void VKAPI_CALL vkCmdDecodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoDecodeInfoKHR* pDecodeInfo) {
	wfe::staticPfn_vkCmdDecodeVideoKHR(commandBuffer, pDecodeInfo);
}
#endif
#if defined(VK_KHR_video_queue) && (defined(VK_VERSION_1_1) && defined(VK_KHR_synchronization2))
VKAPI_ATTR void VKAPI_CALL vkCmdBeginVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoBeginCodingInfoKHR* pBeginInfo) {
	wfe::staticPfn_vkCmdBeginVideoCodingKHR(commandBuffer, pBeginInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdControlVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoCodingControlInfoKHR* pCodingControlInfo) {
	wfe::staticPfn_vkCmdControlVideoCodingKHR(commandBuffer, pCodingControlInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdEndVideoCodingKHR(VkCommandBuffer commandBuffer, const VkVideoEndCodingInfoKHR* pEndCodingInfo) {
	wfe::staticPfn_vkCmdEndVideoCodingKHR(commandBuffer, pEndCodingInfo);
}
#endif
#if defined(VK_KHR_video_encode_queue) && (defined(VK_KHR_video_queue) && defined(VK_KHR_synchronization2))
VKAPI_ATTR void VKAPI_CALL vkCmdEncodeVideoKHR(VkCommandBuffer commandBuffer, const VkVideoEncodeInfoKHR* pEncodeInfo) {
	wfe::staticPfn_vkCmdEncodeVideoKHR(commandBuffer, pEncodeInfo);
}
#endif
#if defined(VK_NV_memory_decompression) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address))
VKAPI_ATTR void VKAPI_CALL vkCmdDecompressMemoryNV(VkCommandBuffer commandBuffer, uint32_t decompressRegionCount, const VkDecompressMemoryRegionNV* pDecompressMemoryRegions) {
	wfe::staticPfn_vkCmdDecompressMemoryNV(commandBuffer, decompressRegionCount, pDecompressMemoryRegions);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDecompressMemoryIndirectCountNV(VkCommandBuffer commandBuffer, VkDeviceAddress indirectCommandsAddress, VkDeviceAddress indirectCommandsCountAddress, uint32_t stride) {
	wfe::staticPfn_vkCmdDecompressMemoryIndirectCountNV(commandBuffer, indirectCommandsAddress, indirectCommandsCountAddress, stride);
}
#endif
#if defined(VK_NVX_binary_import)
VKAPI_ATTR VkResult VKAPI_CALL vkCreateCuModuleNVX(VkDevice device, const VkCuModuleCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCuModuleNVX* pModule) {
	return wfe::staticPfn_vkCreateCuModuleNVX(device, pCreateInfo, pAllocator, pModule);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateCuFunctionNVX(VkDevice device, const VkCuFunctionCreateInfoNVX* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCuFunctionNVX* pFunction) {
	return wfe::staticPfn_vkCreateCuFunctionNVX(device, pCreateInfo, pAllocator, pFunction);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyCuModuleNVX(device, module, pAllocator);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyCuFunctionNVX(device, function, pAllocator);
}
VKAPI_ATTR void VKAPI_CALL vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, const VkCuLaunchInfoNVX* pLaunchInfo) {
	wfe::staticPfn_vkCmdCuLaunchKernelNVX(commandBuffer, pLaunchInfo);
}
#endif
#if defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_synchronization2) && defined(VK_EXT_descriptor_indexing))
VKAPI_ATTR void VKAPI_CALL vkGetDescriptorSetLayoutSizeEXT(VkDevice device, VkDescriptorSetLayout layout, VkDeviceSize* pLayoutSizeInBytes) {
	wfe::staticPfn_vkGetDescriptorSetLayoutSizeEXT(device, layout, pLayoutSizeInBytes);
}
VKAPI_ATTR void VKAPI_CALL vkGetDescriptorSetLayoutBindingOffsetEXT(VkDevice device, VkDescriptorSetLayout layout, uint32_t binding, VkDeviceSize* pOffset) {
	wfe::staticPfn_vkGetDescriptorSetLayoutBindingOffsetEXT(device, layout, binding, pOffset);
}
VKAPI_ATTR void VKAPI_CALL vkGetDescriptorEXT(VkDevice device, const VkDescriptorGetInfoEXT* pDescriptorInfo, size_t dataSize, void* pDescriptor) {
	wfe::staticPfn_vkGetDescriptorEXT(device, pDescriptorInfo, dataSize, pDescriptor);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBindDescriptorBuffersEXT(VkCommandBuffer commandBuffer, uint32_t bufferCount, const VkDescriptorBufferBindingInfoEXT* pBindingInfos) {
	wfe::staticPfn_vkCmdBindDescriptorBuffersEXT(commandBuffer, bufferCount, pBindingInfos);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetDescriptorBufferOffsetsEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t firstSet, uint32_t setCount, const uint32_t* pBufferIndices, const VkDeviceSize* pOffsets) {
	wfe::staticPfn_vkCmdSetDescriptorBufferOffsetsEXT(commandBuffer, pipelineBindPoint, layout, firstSet, setCount, pBufferIndices, pOffsets);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBindDescriptorBufferEmbeddedSamplersEXT(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint32_t set) {
	wfe::staticPfn_vkCmdBindDescriptorBufferEmbeddedSamplersEXT(commandBuffer, pipelineBindPoint, layout, set);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetBufferOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkBufferCaptureDescriptorDataInfoEXT* pInfo, void* pData) {
	return wfe::staticPfn_vkGetBufferOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetImageOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageCaptureDescriptorDataInfoEXT* pInfo, void* pData) {
	return wfe::staticPfn_vkGetImageOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetImageViewOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkImageViewCaptureDescriptorDataInfoEXT* pInfo, void* pData) {
	return wfe::staticPfn_vkGetImageViewOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetSamplerOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkSamplerCaptureDescriptorDataInfoEXT* pInfo, void* pData) {
	return wfe::staticPfn_vkGetSamplerOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
}
#endif
#if (defined(VK_EXT_descriptor_buffer) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_buffer_device_address) && defined(VK_KHR_synchronization2) && defined(VK_EXT_descriptor_indexing))) && (defined(VK_KHR_acceleration_structure) || defined(VK_NV_ray_tracing))
VKAPI_ATTR VkResult VKAPI_CALL vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(VkDevice device, const VkAccelerationStructureCaptureDescriptorDataInfoEXT* pInfo, void* pData) {
	return wfe::staticPfn_vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(device, pInfo, pData);
}
#endif
#if defined(VK_EXT_pageable_device_local_memory) && (defined(VK_EXT_memory_priority))
VKAPI_ATTR void VKAPI_CALL vkSetDeviceMemoryPriorityEXT(VkDevice device, VkDeviceMemory memory, float priority) {
	wfe::staticPfn_vkSetDeviceMemoryPriorityEXT(device, memory, priority);
}
#endif
#if defined(VK_EXT_acquire_drm_display) && (defined(VK_EXT_direct_mode_display))
VKAPI_ATTR VkResult VKAPI_CALL vkAcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, VkDisplayKHR display) {
	return wfe::staticPfn_vkAcquireDrmDisplayEXT(physicalDevice, drmFd, display);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetDrmDisplayEXT(VkPhysicalDevice physicalDevice, int32_t drmFd, uint32_t connectorId, VkDisplayKHR* display) {
	return wfe::staticPfn_vkGetDrmDisplayEXT(physicalDevice, drmFd, connectorId, display);
}
#endif
#if defined(VK_KHR_present_wait) && (defined(VK_KHR_swapchain) && defined(VK_KHR_present_id))
VKAPI_ATTR VkResult VKAPI_CALL vkWaitForPresentKHR(VkDevice device, VkSwapchainKHR swapchain, uint64_t presentId, uint64_t timeout) {
	return wfe::staticPfn_vkWaitForPresentKHR(device, swapchain, presentId, timeout);
}
#endif
#if defined(VK_FUCHSIA_buffer_collection) && (defined(VK_FUCHSIA_external_memory) && defined(VK_KHR_sampler_ycbcr_conversion))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateBufferCollectionFUCHSIA(VkDevice device, const VkBufferCollectionCreateInfoFUCHSIA* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkBufferCollectionFUCHSIA* pCollection) {
	return wfe::staticPfn_vkCreateBufferCollectionFUCHSIA(device, pCreateInfo, pAllocator, pCollection);
}
VKAPI_ATTR VkResult VKAPI_CALL vkSetBufferCollectionBufferConstraintsFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkBufferConstraintsInfoFUCHSIA* pBufferConstraintsInfo) {
	return wfe::staticPfn_vkSetBufferCollectionBufferConstraintsFUCHSIA(device, collection, pBufferConstraintsInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkSetBufferCollectionImageConstraintsFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkImageConstraintsInfoFUCHSIA* pImageConstraintsInfo) {
	return wfe::staticPfn_vkSetBufferCollectionImageConstraintsFUCHSIA(device, collection, pImageConstraintsInfo);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyBufferCollectionFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyBufferCollectionFUCHSIA(device, collection, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetBufferCollectionPropertiesFUCHSIA(VkDevice device, VkBufferCollectionFUCHSIA collection, VkBufferCollectionPropertiesFUCHSIA* pProperties) {
	return wfe::staticPfn_vkGetBufferCollectionPropertiesFUCHSIA(device, collection, pProperties);
}
#endif
#if defined(VK_NV_cuda_kernel_launch)
VKAPI_ATTR VkResult VKAPI_CALL vkCreateCudaModuleNV(VkDevice device, const VkCudaModuleCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCudaModuleNV* pModule) {
	return wfe::staticPfn_vkCreateCudaModuleNV(device, pCreateInfo, pAllocator, pModule);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetCudaModuleCacheNV(VkDevice device, VkCudaModuleNV module, size_t* pCacheSize, void* pCacheData) {
	return wfe::staticPfn_vkGetCudaModuleCacheNV(device, module, pCacheSize, pCacheData);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateCudaFunctionNV(VkDevice device, const VkCudaFunctionCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkCudaFunctionNV* pFunction) {
	return wfe::staticPfn_vkCreateCudaFunctionNV(device, pCreateInfo, pAllocator, pFunction);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyCudaModuleNV(VkDevice device, VkCudaModuleNV module, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyCudaModuleNV(device, module, pAllocator);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyCudaFunctionNV(VkDevice device, VkCudaFunctionNV function, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyCudaFunctionNV(device, function, pAllocator);
}
VKAPI_ATTR void VKAPI_CALL vkCmdCudaLaunchKernelNV(VkCommandBuffer commandBuffer, const VkCudaLaunchInfoNV* pLaunchInfo) {
	wfe::staticPfn_vkCmdCudaLaunchKernelNV(commandBuffer, pLaunchInfo);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdBeginRendering(VkCommandBuffer commandBuffer, const VkRenderingInfoKHR* pRenderingInfo) {
	wfe::staticPfn_vkCmdBeginRendering(commandBuffer, pRenderingInfo);
}
#endif
#if defined(VK_KHR_dynamic_rendering) && (defined(VK_KHR_depth_stencil_resolve) && defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, const VkRenderingInfoKHR* pRenderingInfo) {
	wfe::staticPfn_vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo);
}
#endif
#if defined(VK_VERSION_1_3)
VKAPI_ATTR void VKAPI_CALL vkCmdEndRendering(VkCommandBuffer commandBuffer) {
	wfe::staticPfn_vkCmdEndRendering(commandBuffer);
}
#endif
#if defined(VK_KHR_dynamic_rendering) && (defined(VK_KHR_depth_stencil_resolve) && defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer) {
	wfe::staticPfn_vkCmdEndRenderingKHR(commandBuffer);
}
#endif
#if defined(VK_VALVE_descriptor_set_host_mapping) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkGetDescriptorSetLayoutHostMappingInfoVALVE(VkDevice device, const VkDescriptorSetBindingReferenceVALVE* pBindingReference, VkDescriptorSetLayoutHostMappingInfoVALVE* pHostMapping) {
	wfe::staticPfn_vkGetDescriptorSetLayoutHostMappingInfoVALVE(device, pBindingReference, pHostMapping);
}
VKAPI_ATTR void VKAPI_CALL vkGetDescriptorSetHostMappingVALVE(VkDevice device, VkDescriptorSet descriptorSet, void** ppData) {
	wfe::staticPfn_vkGetDescriptorSetHostMappingVALVE(device, descriptorSet, ppData);
}
#endif
#if defined(VK_EXT_opacity_micromap) && (defined(VK_KHR_acceleration_structure) && defined(VK_KHR_synchronization2))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateMicromapEXT(VkDevice device, const VkMicromapCreateInfoEXT* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkMicromapEXT* pMicromap) {
	return wfe::staticPfn_vkCreateMicromapEXT(device, pCreateInfo, pAllocator, pMicromap);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBuildMicromapsEXT(VkCommandBuffer commandBuffer, uint32_t infoCount, const VkMicromapBuildInfoEXT* pInfos) {
	wfe::staticPfn_vkCmdBuildMicromapsEXT(commandBuffer, infoCount, pInfos);
}
VKAPI_ATTR VkResult VKAPI_CALL vkBuildMicromapsEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, uint32_t infoCount, const VkMicromapBuildInfoEXT* pInfos) {
	return wfe::staticPfn_vkBuildMicromapsEXT(device, deferredOperation, infoCount, pInfos);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyMicromapEXT(VkDevice device, VkMicromapEXT micromap, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyMicromapEXT(device, micromap, pAllocator);
}
VKAPI_ATTR void VKAPI_CALL vkCmdCopyMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapInfoEXT* pInfo) {
	wfe::staticPfn_vkCmdCopyMicromapEXT(commandBuffer, pInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCopyMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapInfoEXT* pInfo) {
	return wfe::staticPfn_vkCopyMicromapEXT(device, deferredOperation, pInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdCopyMicromapToMemoryEXT(VkCommandBuffer commandBuffer, const VkCopyMicromapToMemoryInfoEXT* pInfo) {
	wfe::staticPfn_vkCmdCopyMicromapToMemoryEXT(commandBuffer, pInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCopyMicromapToMemoryEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMicromapToMemoryInfoEXT* pInfo) {
	return wfe::staticPfn_vkCopyMicromapToMemoryEXT(device, deferredOperation, pInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdCopyMemoryToMicromapEXT(VkCommandBuffer commandBuffer, const VkCopyMemoryToMicromapInfoEXT* pInfo) {
	wfe::staticPfn_vkCmdCopyMemoryToMicromapEXT(commandBuffer, pInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCopyMemoryToMicromapEXT(VkDevice device, VkDeferredOperationKHR deferredOperation, const VkCopyMemoryToMicromapInfoEXT* pInfo) {
	return wfe::staticPfn_vkCopyMemoryToMicromapEXT(device, deferredOperation, pInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdWriteMicromapsPropertiesEXT(VkCommandBuffer commandBuffer, uint32_t micromapCount, const VkMicromapEXT* pMicromaps, VkQueryType queryType, VkQueryPool queryPool, uint32_t firstQuery) {
	wfe::staticPfn_vkCmdWriteMicromapsPropertiesEXT(commandBuffer, micromapCount, pMicromaps, queryType, queryPool, firstQuery);
}
VKAPI_ATTR VkResult VKAPI_CALL vkWriteMicromapsPropertiesEXT(VkDevice device, uint32_t micromapCount, const VkMicromapEXT* pMicromaps, VkQueryType queryType, size_t dataSize, void* pData, size_t stride) {
	return wfe::staticPfn_vkWriteMicromapsPropertiesEXT(device, micromapCount, pMicromaps, queryType, dataSize, pData, stride);
}
VKAPI_ATTR void VKAPI_CALL vkGetDeviceMicromapCompatibilityEXT(VkDevice device, const VkMicromapVersionInfoEXT* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility) {
	wfe::staticPfn_vkGetDeviceMicromapCompatibilityEXT(device, pVersionInfo, pCompatibility);
}
VKAPI_ATTR void VKAPI_CALL vkGetMicromapBuildSizesEXT(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, const VkMicromapBuildInfoEXT* pBuildInfo, VkMicromapBuildSizesInfoEXT* pSizeInfo) {
	wfe::staticPfn_vkGetMicromapBuildSizesEXT(device, buildType, pBuildInfo, pSizeInfo);
}
#endif
#if defined(VK_EXT_shader_module_identifier) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_EXT_pipeline_creation_cache_control))
VKAPI_ATTR void VKAPI_CALL vkGetShaderModuleIdentifierEXT(VkDevice device, VkShaderModule shaderModule, VkShaderModuleIdentifierEXT* pIdentifier) {
	wfe::staticPfn_vkGetShaderModuleIdentifierEXT(device, shaderModule, pIdentifier);
}
VKAPI_ATTR void VKAPI_CALL vkGetShaderModuleCreateInfoIdentifierEXT(VkDevice device, const VkShaderModuleCreateInfo* pCreateInfo, VkShaderModuleIdentifierEXT* pIdentifier) {
	wfe::staticPfn_vkGetShaderModuleCreateInfoIdentifierEXT(device, pCreateInfo, pIdentifier);
}
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
VKAPI_ATTR void VKAPI_CALL vkGetImageSubresourceLayout2KHR(VkDevice device, VkImage image, const VkImageSubresource2EXT* pSubresource, VkSubresourceLayout2EXT* pLayout) {
	wfe::staticPfn_vkGetImageSubresourceLayout2KHR(device, image, pSubresource, pLayout);
}
#endif
#if (defined(VK_EXT_host_image_copy) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_copy_commands2) && defined(VK_KHR_format_feature_flags2))) || (defined(VK_EXT_image_compression_control) && (defined(VK_KHR_get_physical_device_properties2)))
VKAPI_ATTR void VKAPI_CALL vkGetImageSubresourceLayout2EXT(VkDevice device, VkImage image, const VkImageSubresource2EXT* pSubresource, VkSubresourceLayout2EXT* pLayout) {
	wfe::staticPfn_vkGetImageSubresourceLayout2EXT(device, image, pSubresource, pLayout);
}
#endif
#if defined(VK_EXT_pipeline_properties) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPipelinePropertiesEXT(VkDevice device, const VkPipelineInfoEXT* pPipelineInfo, VkBaseOutStructure* pPipelineProperties) {
	return wfe::staticPfn_vkGetPipelinePropertiesEXT(device, pPipelineInfo, pPipelineProperties);
}
#endif
#if defined(VK_EXT_metal_objects)
VKAPI_ATTR void VKAPI_CALL vkExportMetalObjectsEXT(VkDevice device, VkExportMetalObjectsInfoEXT* pMetalObjectsInfo) {
	wfe::staticPfn_vkExportMetalObjectsEXT(device, pMetalObjectsInfo);
}
#endif
#if defined(VK_QCOM_tile_properties) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR VkResult VKAPI_CALL vkGetFramebufferTilePropertiesQCOM(VkDevice device, VkFramebuffer framebuffer, uint32_t* pPropertiesCount, VkTilePropertiesQCOM* pProperties) {
	return wfe::staticPfn_vkGetFramebufferTilePropertiesQCOM(device, framebuffer, pPropertiesCount, pProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetDynamicRenderingTilePropertiesQCOM(VkDevice device, const VkRenderingInfo* pRenderingInfo, VkTilePropertiesQCOM* pProperties) {
	return wfe::staticPfn_vkGetDynamicRenderingTilePropertiesQCOM(device, pRenderingInfo, pProperties);
}
#endif
#if defined(VK_NV_optical_flow) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_format_feature_flags2) && defined(VK_KHR_synchronization2))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceOpticalFlowImageFormatsNV(VkPhysicalDevice physicalDevice, const VkOpticalFlowImageFormatInfoNV* pOpticalFlowImageFormatInfo, uint32_t* pFormatCount, VkOpticalFlowImageFormatPropertiesNV* pImageFormatProperties) {
	return wfe::staticPfn_vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physicalDevice, pOpticalFlowImageFormatInfo, pFormatCount, pImageFormatProperties);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateOpticalFlowSessionNV(VkDevice device, const VkOpticalFlowSessionCreateInfoNV* pCreateInfo, const VkAllocationCallbacks* pAllocator, VkOpticalFlowSessionNV* pSession) {
	return wfe::staticPfn_vkCreateOpticalFlowSessionNV(device, pCreateInfo, pAllocator, pSession);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyOpticalFlowSessionNV(VkDevice device, VkOpticalFlowSessionNV session, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyOpticalFlowSessionNV(device, session, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkBindOpticalFlowSessionImageNV(VkDevice device, VkOpticalFlowSessionNV session, VkOpticalFlowSessionBindingPointNV bindingPoint, VkImageView view, VkImageLayout layout) {
	return wfe::staticPfn_vkBindOpticalFlowSessionImageNV(device, session, bindingPoint, view, layout);
}
VKAPI_ATTR void VKAPI_CALL vkCmdOpticalFlowExecuteNV(VkCommandBuffer commandBuffer, VkOpticalFlowSessionNV session, const VkOpticalFlowExecuteInfoNV* pExecuteInfo) {
	wfe::staticPfn_vkCmdOpticalFlowExecuteNV(commandBuffer, session, pExecuteInfo);
}
#endif
#if defined(VK_EXT_device_fault) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR VkResult VKAPI_CALL vkGetDeviceFaultInfoEXT(VkDevice device, VkDeviceFaultCountsEXT* pFaultCounts, VkDeviceFaultInfoEXT* pFaultInfo) {
	return wfe::staticPfn_vkGetDeviceFaultInfoEXT(device, pFaultCounts, pFaultInfo);
}
#endif
#if defined(VK_EXT_depth_bias_control) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR void VKAPI_CALL vkCmdSetDepthBias2EXT(VkCommandBuffer commandBuffer, const VkDepthBiasInfoEXT* pDepthBiasInfo) {
	wfe::staticPfn_vkCmdSetDepthBias2EXT(commandBuffer, pDepthBiasInfo);
}
#endif
#if defined(VK_EXT_swapchain_maintenance1) && (defined(VK_KHR_swapchain) && defined(VK_EXT_surface_maintenance1) && defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR VkResult VKAPI_CALL vkReleaseSwapchainImagesEXT(VkDevice device, const VkReleaseSwapchainImagesInfoEXT* pReleaseInfo) {
	return wfe::staticPfn_vkReleaseSwapchainImagesEXT(device, pReleaseInfo);
}
#endif
#if defined(VK_KHR_maintenance5) && (defined(VK_VERSION_1_1) && defined(VK_KHR_dynamic_rendering))
VKAPI_ATTR void VKAPI_CALL vkGetDeviceImageSubresourceLayoutKHR(VkDevice device, const VkDeviceImageSubresourceInfoKHR* pInfo, VkSubresourceLayout2KHR* pLayout) {
	wfe::staticPfn_vkGetDeviceImageSubresourceLayoutKHR(device, pInfo, pLayout);
}
#endif
#if defined(VK_KHR_map_memory2)
VKAPI_ATTR VkResult VKAPI_CALL vkMapMemory2KHR(VkDevice device, const VkMemoryMapInfoKHR* pMemoryMapInfo, void** ppData) {
	return wfe::staticPfn_vkMapMemory2KHR(device, pMemoryMapInfo, ppData);
}
VKAPI_ATTR VkResult VKAPI_CALL vkUnmapMemory2KHR(VkDevice device, const VkMemoryUnmapInfoKHR* pMemoryUnmapInfo) {
	return wfe::staticPfn_vkUnmapMemory2KHR(device, pMemoryUnmapInfo);
}
#endif
#if defined(VK_EXT_shader_object) && ((defined(VK_KHR_get_physical_device_properties2) || defined(VK_VERSION_1_1)) && (defined(VK_KHR_dynamic_rendering) || defined(VK_VERSION_1_3)))
VKAPI_ATTR VkResult VKAPI_CALL vkCreateShadersEXT(VkDevice device, uint32_t createInfoCount, const VkShaderCreateInfoEXT* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkShaderEXT* pShaders) {
	return wfe::staticPfn_vkCreateShadersEXT(device, createInfoCount, pCreateInfos, pAllocator, pShaders);
}
VKAPI_ATTR void VKAPI_CALL vkDestroyShaderEXT(VkDevice device, VkShaderEXT shader, const VkAllocationCallbacks* pAllocator) {
	wfe::staticPfn_vkDestroyShaderEXT(device, shader, pAllocator);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetShaderBinaryDataEXT(VkDevice device, VkShaderEXT shader, size_t* pDataSize, void* pData) {
	return wfe::staticPfn_vkGetShaderBinaryDataEXT(device, shader, pDataSize, pData);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBindShadersEXT(VkCommandBuffer commandBuffer, uint32_t stageCount, const VkShaderStageFlagBits* pStages, const VkShaderEXT* pShaders) {
	wfe::staticPfn_vkCmdBindShadersEXT(commandBuffer, stageCount, pStages, pShaders);
}
#endif
#if defined(VK_QNX_external_memory_screen_buffer) && (((defined(VK_KHR_sampler_ycbcr_conversion) && defined(VK_KHR_external_memory) && defined(VK_KHR_dedicated_allocation)) || defined(VK_VERSION_1_1)) && defined(VK_EXT_queue_family_foreign))
VKAPI_ATTR VkResult VKAPI_CALL vkGetScreenBufferPropertiesQNX(VkDevice device, const struct _screen_buffer* buffer, VkScreenBufferPropertiesQNX* pProperties) {
	return wfe::staticPfn_vkGetScreenBufferPropertiesQNX(device, buffer, pProperties);
}
#endif
#if defined(VK_KHR_cooperative_matrix) && (defined(VK_KHR_get_physical_device_properties2))
VKAPI_ATTR VkResult VKAPI_CALL vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(VkPhysicalDevice physicalDevice, uint32_t* pPropertyCount, VkCooperativeMatrixPropertiesKHR* pProperties) {
	return wfe::staticPfn_vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
}
#endif
#if defined(VK_AMDX_shader_enqueue) && (defined(VK_KHR_get_physical_device_properties2) && defined(VK_KHR_synchronization2) && defined(VK_KHR_pipeline_library) && defined(VK_KHR_spirv_1_4))
VKAPI_ATTR VkResult VKAPI_CALL vkGetExecutionGraphPipelineScratchSizeAMDX(VkDevice device, VkPipeline executionGraph, VkExecutionGraphPipelineScratchSizeAMDX* pSizeInfo) {
	return wfe::staticPfn_vkGetExecutionGraphPipelineScratchSizeAMDX(device, executionGraph, pSizeInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkGetExecutionGraphPipelineNodeIndexAMDX(VkDevice device, VkPipeline executionGraph, const VkPipelineShaderStageNodeCreateInfoAMDX* pNodeInfo, uint32_t* pNodeIndex) {
	return wfe::staticPfn_vkGetExecutionGraphPipelineNodeIndexAMDX(device, executionGraph, pNodeInfo, pNodeIndex);
}
VKAPI_ATTR VkResult VKAPI_CALL vkCreateExecutionGraphPipelinesAMDX(VkDevice device, VkPipelineCache pipelineCache, uint32_t createInfoCount, const VkExecutionGraphPipelineCreateInfoAMDX* pCreateInfos, const VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines) {
	return wfe::staticPfn_vkCreateExecutionGraphPipelinesAMDX(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}
VKAPI_ATTR void VKAPI_CALL vkCmdInitializeGraphScratchMemoryAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch) {
	wfe::staticPfn_vkCmdInitializeGraphScratchMemoryAMDX(commandBuffer, scratch);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDispatchGraphAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, const VkDispatchGraphCountInfoAMDX* pCountInfo) {
	wfe::staticPfn_vkCmdDispatchGraphAMDX(commandBuffer, scratch, pCountInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDispatchGraphIndirectAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, const VkDispatchGraphCountInfoAMDX* pCountInfo) {
	wfe::staticPfn_vkCmdDispatchGraphIndirectAMDX(commandBuffer, scratch, pCountInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdDispatchGraphIndirectCountAMDX(VkCommandBuffer commandBuffer, VkDeviceAddress scratch, VkDeviceAddress countInfo) {
	wfe::staticPfn_vkCmdDispatchGraphIndirectCountAMDX(commandBuffer, scratch, countInfo);
}
#endif
#if defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))
VKAPI_ATTR void VKAPI_CALL vkCmdBindDescriptorSets2KHR(VkCommandBuffer commandBuffer, const VkBindDescriptorSetsInfoKHR* pBindDescriptorSetsInfo) {
	wfe::staticPfn_vkCmdBindDescriptorSets2KHR(commandBuffer, pBindDescriptorSetsInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdPushConstants2KHR(VkCommandBuffer commandBuffer, const VkPushConstantsInfoKHR* pPushConstantsInfo) {
	wfe::staticPfn_vkCmdPushConstants2KHR(commandBuffer, pPushConstantsInfo);
}
#endif
#if (defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))) && (defined(VK_KHR_push_descriptor))
VKAPI_ATTR void VKAPI_CALL vkCmdPushDescriptorSet2KHR(VkCommandBuffer commandBuffer, const VkPushDescriptorSetInfoKHR* pPushDescriptorSetInfo) {
	wfe::staticPfn_vkCmdPushDescriptorSet2KHR(commandBuffer, pPushDescriptorSetInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdPushDescriptorSetWithTemplate2KHR(VkCommandBuffer commandBuffer, const VkPushDescriptorSetWithTemplateInfoKHR* pPushDescriptorSetWithTemplateInfo) {
	wfe::staticPfn_vkCmdPushDescriptorSetWithTemplate2KHR(commandBuffer, pPushDescriptorSetWithTemplateInfo);
}
#endif
#if (defined(VK_KHR_maintenance6) && (defined(VK_VERSION_1_1))) && (defined(VK_EXT_descriptor_buffer))
VKAPI_ATTR void VKAPI_CALL vkCmdSetDescriptorBufferOffsets2EXT(VkCommandBuffer commandBuffer, const VkSetDescriptorBufferOffsetsInfoEXT* pSetDescriptorBufferOffsetsInfo) {
	wfe::staticPfn_vkCmdSetDescriptorBufferOffsets2EXT(commandBuffer, pSetDescriptorBufferOffsetsInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(VkCommandBuffer commandBuffer, const VkBindDescriptorBufferEmbeddedSamplersInfoEXT* pBindDescriptorBufferEmbeddedSamplersInfo) {
	wfe::staticPfn_vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(commandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo);
}
#endif
#if defined(VK_NV_low_latency2) && (defined(VK_VERSION_1_2) || defined(VK_KHR_timeline_semaphore))
VKAPI_ATTR VkResult VKAPI_CALL vkSetLatencySleepModeNV(VkDevice device, VkSwapchainKHR swapchain, const VkLatencySleepModeInfoNV* pSleepModeInfo) {
	return wfe::staticPfn_vkSetLatencySleepModeNV(device, swapchain, pSleepModeInfo);
}
VKAPI_ATTR VkResult VKAPI_CALL vkLatencySleepNV(VkDevice device, VkSwapchainKHR swapchain, const VkLatencySleepInfoNV* pSleepInfo) {
	return wfe::staticPfn_vkLatencySleepNV(device, swapchain, pSleepInfo);
}
VKAPI_ATTR void VKAPI_CALL vkSetLatencyMarkerNV(VkDevice device, VkSwapchainKHR swapchain, const VkSetLatencyMarkerInfoNV* pLatencyMarkerInfo) {
	wfe::staticPfn_vkSetLatencyMarkerNV(device, swapchain, pLatencyMarkerInfo);
}
VKAPI_ATTR void VKAPI_CALL vkGetLatencyTimingsNV(VkDevice device, VkSwapchainKHR swapchain, VkGetLatencyMarkerInfoNV* pLatencyMarkerInfo) {
	wfe::staticPfn_vkGetLatencyTimingsNV(device, swapchain, pLatencyMarkerInfo);
}
VKAPI_ATTR void VKAPI_CALL vkQueueNotifyOutOfBandNV(VkQueue queue, const VkOutOfBandQueueTypeInfoNV* pQueueTypeInfo) {
	wfe::staticPfn_vkQueueNotifyOutOfBandNV(queue, pQueueTypeInfo);
}
#endif
#if defined(VK_KHR_dynamic_rendering_local_read) && (defined(VK_KHR_dynamic_rendering))
VKAPI_ATTR void VKAPI_CALL vkCmdSetRenderingAttachmentLocationsKHR(VkCommandBuffer commandBuffer, const VkRenderingAttachmentLocationInfoKHR* pLocationInfo) {
	wfe::staticPfn_vkCmdSetRenderingAttachmentLocationsKHR(commandBuffer, pLocationInfo);
}
VKAPI_ATTR void VKAPI_CALL vkCmdSetRenderingInputAttachmentIndicesKHR(VkCommandBuffer commandBuffer, const VkRenderingInputAttachmentIndexInfoKHR* pLocationInfo) {
	wfe::staticPfn_vkCmdSetRenderingInputAttachmentIndicesKHR(commandBuffer, pLocationInfo);
}
#endif
